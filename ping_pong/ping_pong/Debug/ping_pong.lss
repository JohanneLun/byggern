
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000ef4  00000f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080016a  0080016a  00000ff2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001999  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3b  00000000  00000000  00002c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bfd  00000000  00000000  00003862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000055c  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f9  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000deb  00000000  00000000  00004fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ef       	ldi	r30, 0xF4	; 244
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 36       	cpi	r26, 0x6A	; 106
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e6       	ldi	r26, 0x6A	; 106
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 37       	cpi	r26, 0x7A	; 122
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
  a6:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e3 ef       	ldi	r30, 0xF3	; 243
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <ADC_read+0x4>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <ADC_read+0xa>
  e0:	00 00       	nop
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	_delay_ms(2);
	//Choose channel in ADC
	*adc = 0x04 | channel;
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  e8:	80 91 6d 01 	lds	r24, 0x016D
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <ADC_read+0x12>
	ADC_ready = 0; 
  f0:	10 92 6d 01 	sts	0x016D, r1
	return *adc;
  f4:	80 91 00 14 	lds	r24, 0x1400
}
  f8:	08 95       	ret

000000fa <__vector_3>:


ISR(INT2_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
	ADC_ready = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 6d 01 	sts	0x016D, r24
	//wake up the CPU
}
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <CAN_init>:
#include <util/delay.h>
#include <stdio.h>

extern volatile uint8_t rx_int_flag; 

int CAN_init(){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 122:	0e 94 5d 01 	call	0x2ba	; 0x2ba <MCP2515_init>
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <CAN_init+0x12>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <CAN_init+0x18>
 130:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	0e 94 62 01 	call	0x2c4	; 0x2c4 <MCP2515_read>
 138:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	80 7e       	andi	r24, 0xE0	; 224
 13e:	80 38       	cpi	r24, 0x80	; 128
 140:	39 f0       	breq	.+14     	; 0x150 <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 79 04 	call	0x8f2	; 0x8f2 <puts>
		return 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	1f c0       	rjmp	.+62     	; 0x18e <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8b e2       	ldi	r24, 0x2B	; 43
 156:	0e 94 9b 01 	call	0x336	; 0x336 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	60 e6       	ldi	r22, 0x60	; 96
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	0e 94 9b 01 	call	0x336	; 0x336 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 ee       	ldi	r22, 0xE0	; 224
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	0e 94 9b 01 	call	0x336	; 0x336 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 16e:	8e e0       	ldi	r24, 0x0E	; 14
 170:	0e 94 62 01 	call	0x2c4	; 0x2c4 <MCP2515_read>
 174:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	80 7e       	andi	r24, 0xE0	; 224
 17a:	39 f0       	breq	.+14     	; 0x18a <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 79 04 	call	0x8f2	; 0x8f2 <puts>
		return 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <CAN_init+0x76>
	}
	
	return 0;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
}
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	0e 94 62 01 	call	0x2c4	; 0x2c4 <MCP2515_read>
 19c:	86 95       	lsr	r24
 19e:	86 95       	lsr	r24
 1a0:	86 95       	lsr	r24
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 1a6:	81 70       	andi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret

000001ac <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1ba:	0e 94 cb 00 	call	0x196	; 0x196 <CAN_transmit_complete>
 1be:	89 2b       	or	r24, r25
 1c0:	d9 f1       	breq	.+118    	; 0x238 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1c2:	f7 01       	movw	r30, r14
 1c4:	60 81       	ld	r22, Z
 1c6:	66 95       	lsr	r22
 1c8:	66 95       	lsr	r22
 1ca:	66 95       	lsr	r22
 1cc:	81 e3       	ldi	r24, 0x31	; 49
 1ce:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1d2:	f7 01       	movw	r30, r14
 1d4:	60 81       	ld	r22, Z
 1d6:	62 95       	swap	r22
 1d8:	66 0f       	add	r22, r22
 1da:	60 7e       	andi	r22, 0xE0	; 224
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1e2:	f7 01       	movw	r30, r14
 1e4:	62 81       	ldd	r22, Z+2	; 0x02
 1e6:	6f 70       	andi	r22, 0x0F	; 15
 1e8:	85 e3       	ldi	r24, 0x35	; 53
 1ea:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1ee:	f7 01       	movw	r30, r14
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	93 81       	ldd	r25, Z+3	; 0x03
 1f4:	89 30       	cpi	r24, 0x09	; 9
 1f6:	91 05       	cpc	r25, r1
 1f8:	54 f0       	brlt	.+20     	; 0x20e <CAN_send+0x62>
			msg->length = 8;
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	93 83       	std	Z+3, r25	; 0x03
 200:	82 83       	std	Z+2, r24	; 0x02
 202:	87 01       	movw	r16, r14
 204:	0c 5f       	subi	r16, 0xFC	; 252
 206:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	bc f3       	brlt	.-18     	; 0x202 <CAN_send+0x56>
 214:	0e c0       	rjmp	.+28     	; 0x232 <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 216:	f8 01       	movw	r30, r16
 218:	61 91       	ld	r22, Z+
 21a:	8f 01       	movw	r16, r30
 21c:	8c 2f       	mov	r24, r28
 21e:	8a 5c       	subi	r24, 0xCA	; 202
 220:	0e 94 75 01 	call	0x2ea	; 0x2ea <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	f7 01       	movw	r30, r14
 228:	22 81       	ldd	r18, Z+2	; 0x02
 22a:	33 81       	ldd	r19, Z+3	; 0x03
 22c:	c2 17       	cp	r28, r18
 22e:	d3 07       	cpc	r29, r19
 230:	94 f3       	brlt	.-28     	; 0x216 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 89 01 	call	0x312	; 0x312 <MCP2515_request_to_send>
		
	}
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	08 95       	ret

00000246 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8c e2       	ldi	r24, 0x2C	; 44
 24c:	0e 94 9b 01 	call	0x336	; 0x336 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	64 e0       	ldi	r22, 0x04	; 4
 254:	8c e2       	ldi	r24, 0x2C	; 44
 256:	0e 94 9b 01 	call	0x336	; 0x336 <MCP2515_bit_modify>
	rx_int_flag = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 6c 01 	sts	0x016C, r24
 260:	08 95       	ret

00000262 <__vector_1>:
	msg.ID = ID;
	
	return msg;
}

ISR(INT0_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 284:	0e 94 23 01 	call	0x246	; 0x246 <CAN_int_vect>
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 2aa:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 2ae:	80 ec       	ldi	r24, 0xC0	; 192
 2b0:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_deactivate_SS();
 2b4:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
 2b8:	08 95       	ret

000002ba <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 2ba:	0e 94 c4 02 	call	0x588	; 0x588 <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 2be:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_reset>
 2c2:	08 95       	ret

000002c4 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 2c8:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(address);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	data = SPI_read_write(0x00);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
 2de:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 2e0:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
	return data;
}
 2e4:	8c 2f       	mov	r24, r28
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	d8 2f       	mov	r29, r24
 2f0:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 2f2:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(address);
 2fc:	8d 2f       	mov	r24, r29
 2fe:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(data);
 302:	8c 2f       	mov	r24, r28
 304:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_deactivate_SS();
 308:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 316:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_activate_SS>
	if (command <= 7){
 31a:	c8 30       	cpi	r28, 0x08	; 8
 31c:	28 f4       	brcc	.+10     	; 0x328 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 31e:	8c 2f       	mov	r24, r28
 320:	80 68       	ori	r24, 0x80	; 128
 322:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
 326:	03 c0       	rjmp	.+6      	; 0x32e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	}
	SPI_deactivate_SS();
 32e:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	18 2f       	mov	r17, r24
 33e:	d6 2f       	mov	r29, r22
 340:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 342:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(address);
 34c:	81 2f       	mov	r24, r17
 34e:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(mask_byte);
 352:	8d 2f       	mov	r24, r29
 354:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_read_write(data_byte);
 358:	8c 2f       	mov	r24, r28
 35a:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_read_write>
	SPI_deactivate_SS();
 35e:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	08 95       	ret

0000036a <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 36a:	5d 9b       	sbis	0x0b, 5	; 11
 36c:	fe cf       	rjmp	.-4      	; 0x36a <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 36e:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret

00000376 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 376:	5f 9b       	sbis	0x0b, 7	; 11
 378:	fe cf       	rjmp	.-4      	; 0x376 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 37a:	8c b1       	in	r24, 0x0c	; 12
}
 37c:	08 95       	ret

0000037e <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 37e:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 380:	88 e1       	ldi	r24, 0x18	; 24
 382:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 384:	6b eb       	ldi	r22, 0xBB	; 187
 386:	71 e0       	ldi	r23, 0x01	; 1
 388:	85 eb       	ldi	r24, 0xB5	; 181
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 1a 04 	call	0x834	; 0x834 <fdevopen>
 390:	90 93 6f 01 	sts	0x016F, r25
 394:	80 93 6e 01 	sts	0x016E, r24
	
	return 0; 
}
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	08 95       	ret

0000039e <send_joystick_dir>:
		return LEFT;
	}
	return CENTER;
}

void send_joystick_dir(void){
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	2c 97       	sbiw	r28, 0x0c	; 12
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
	uint8_t joy_pos_x = ADC_read(CHANNEL_X);
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 3bc:	18 2f       	mov	r17, r24
	
	uint8_t joy_pos_y = ADC_read(CHANNEL_Y);
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 3c4:	08 2f       	mov	r16, r24
	
	printf("joy x= %d \t", ADC_read(CHANNEL_X));
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 3cc:	1f 92       	push	r1
 3ce:	8f 93       	push	r24
 3d0:	22 e5       	ldi	r18, 0x52	; 82
 3d2:	31 e0       	ldi	r19, 0x01	; 1
 3d4:	3f 93       	push	r19
 3d6:	2f 93       	push	r18
 3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <printf>
	printf("joy y= %d \n",  ADC_read(CHANNEL_Y));
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 3e2:	1f 92       	push	r1
 3e4:	8f 93       	push	r24
 3e6:	2e e5       	ldi	r18, 0x5E	; 94
 3e8:	31 e0       	ldi	r19, 0x01	; 1
 3ea:	3f 93       	push	r19
 3ec:	2f 93       	push	r18
 3ee:	0e 94 65 04 	call	0x8ca	; 0x8ca <printf>
	
	if(abs(joy_pos_x - last_joystick_pos_x) > 10 || abs(joy_pos_y - last_joystick_pos_y) > 10){
 3f2:	41 2f       	mov	r20, r17
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	80 91 6b 01 	lds	r24, 0x016B
 3fa:	48 1b       	sub	r20, r24
 3fc:	51 09       	sbc	r21, r1
 3fe:	9a 01       	movw	r18, r20
 400:	22 f4       	brpl	.+8      	; 0x40a <send_joystick_dir+0x6c>
 402:	22 27       	eor	r18, r18
 404:	33 27       	eor	r19, r19
 406:	24 1b       	sub	r18, r20
 408:	35 0b       	sbc	r19, r21
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	2b 30       	cpi	r18, 0x0B	; 11
 416:	31 05       	cpc	r19, r1
 418:	7c f4       	brge	.+30     	; 0x438 <send_joystick_dir+0x9a>
 41a:	40 2f       	mov	r20, r16
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	80 91 6a 01 	lds	r24, 0x016A
 422:	48 1b       	sub	r20, r24
 424:	51 09       	sbc	r21, r1
 426:	9a 01       	movw	r18, r20
 428:	22 f4       	brpl	.+8      	; 0x432 <send_joystick_dir+0x94>
 42a:	22 27       	eor	r18, r18
 42c:	33 27       	eor	r19, r19
 42e:	24 1b       	sub	r18, r20
 430:	35 0b       	sbc	r19, r21
 432:	2b 30       	cpi	r18, 0x0B	; 11
 434:	31 05       	cpc	r19, r1
 436:	84 f0       	brlt	.+32     	; 0x458 <send_joystick_dir+0xba>
		Message msg;
		
		msg.length = 2;
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9c 83       	std	Y+4, r25	; 0x04
 43e:	8b 83       	std	Y+3, r24	; 0x03
		msg.data[0] = joy_pos_x;
 440:	1d 83       	std	Y+5, r17	; 0x05
		msg.data[1] = joy_pos_y;
 442:	0e 83       	std	Y+6, r16	; 0x06
		msg.ID = 0;
 444:	1a 82       	std	Y+2, r1	; 0x02
 446:	19 82       	std	Y+1, r1	; 0x01
		
		CAN_send(&msg);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CAN_send>
		last_joystick_pos_x = joy_pos_x;
 450:	10 93 6b 01 	sts	0x016B, r17
		last_joystick_pos_y = joy_pos_y;
 454:	00 93 6a 01 	sts	0x016A, r16
	}
}
 458:	2c 96       	adiw	r28, 0x0c	; 12
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 46e:	e0 91 06 01 	lds	r30, 0x0106
 472:	f0 91 07 01 	lds	r31, 0x0107
 476:	8e ea       	ldi	r24, 0xAE	; 174
 478:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 47a:	e0 91 06 01 	lds	r30, 0x0106
 47e:	f0 91 07 01 	lds	r31, 0x0107
 482:	81 ea       	ldi	r24, 0xA1	; 161
 484:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 486:	e0 91 06 01 	lds	r30, 0x0106
 48a:	f0 91 07 01 	lds	r31, 0x0107
 48e:	8a ed       	ldi	r24, 0xDA	; 218
 490:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 492:	e0 91 06 01 	lds	r30, 0x0106
 496:	f0 91 07 01 	lds	r31, 0x0107
 49a:	82 e1       	ldi	r24, 0x12	; 18
 49c:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 49e:	e0 91 06 01 	lds	r30, 0x0106
 4a2:	f0 91 07 01 	lds	r31, 0x0107
 4a6:	88 ec       	ldi	r24, 0xC8	; 200
 4a8:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 4aa:	e0 91 06 01 	lds	r30, 0x0106
 4ae:	f0 91 07 01 	lds	r31, 0x0107
 4b2:	88 ea       	ldi	r24, 0xA8	; 168
 4b4:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 4b6:	e0 91 06 01 	lds	r30, 0x0106
 4ba:	f0 91 07 01 	lds	r31, 0x0107
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 4c2:	e0 91 06 01 	lds	r30, 0x0106
 4c6:	f0 91 07 01 	lds	r31, 0x0107
 4ca:	85 ed       	ldi	r24, 0xD5	; 213
 4cc:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 4ce:	e0 91 06 01 	lds	r30, 0x0106
 4d2:	f0 91 07 01 	lds	r31, 0x0107
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 4da:	e0 91 06 01 	lds	r30, 0x0106
 4de:	f0 91 07 01 	lds	r31, 0x0107
 4e2:	81 e8       	ldi	r24, 0x81	; 129
 4e4:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 4e6:	e0 91 06 01 	lds	r30, 0x0106
 4ea:	f0 91 07 01 	lds	r31, 0x0107
 4ee:	80 e5       	ldi	r24, 0x50	; 80
 4f0:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 4f2:	e0 91 06 01 	lds	r30, 0x0106
 4f6:	f0 91 07 01 	lds	r31, 0x0107
 4fa:	89 ed       	ldi	r24, 0xD9	; 217
 4fc:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 4fe:	e0 91 06 01 	lds	r30, 0x0106
 502:	f0 91 07 01 	lds	r31, 0x0107
 506:	81 e2       	ldi	r24, 0x21	; 33
 508:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 50a:	e0 91 06 01 	lds	r30, 0x0106
 50e:	f0 91 07 01 	lds	r31, 0x0107
 512:	80 e2       	ldi	r24, 0x20	; 32
 514:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 516:	e0 91 06 01 	lds	r30, 0x0106
 51a:	f0 91 07 01 	lds	r31, 0x0107
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 522:	e0 91 06 01 	lds	r30, 0x0106
 526:	f0 91 07 01 	lds	r31, 0x0107
 52a:	8b ed       	ldi	r24, 0xDB	; 219
 52c:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 52e:	e0 91 06 01 	lds	r30, 0x0106
 532:	f0 91 07 01 	lds	r31, 0x0107
 536:	80 e3       	ldi	r24, 0x30	; 48
 538:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 53a:	e0 91 06 01 	lds	r30, 0x0106
 53e:	f0 91 07 01 	lds	r31, 0x0107
 542:	8d ea       	ldi	r24, 0xAD	; 173
 544:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 546:	e0 91 06 01 	lds	r30, 0x0106
 54a:	f0 91 07 01 	lds	r31, 0x0107
 54e:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 550:	e0 91 06 01 	lds	r30, 0x0106
 554:	f0 91 07 01 	lds	r31, 0x0107
 558:	84 ea       	ldi	r24, 0xA4	; 164
 55a:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 55c:	e0 91 06 01 	lds	r30, 0x0106
 560:	f0 91 07 01 	lds	r31, 0x0107
 564:	86 ea       	ldi	r24, 0xA6	; 166
 566:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 568:	e0 91 06 01 	lds	r30, 0x0106
 56c:	f0 91 07 01 	lds	r31, 0x0107
 570:	8f ea       	ldi	r24, 0xAF	; 175
 572:	80 83       	st	Z, r24
 574:	08 95       	ret

00000576 <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 576:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 578:	77 9b       	sbis	0x0e, 7	; 14
 57a:	fe cf       	rjmp	.-4      	; 0x578 <SPI_read_write+0x2>
	return SPDR;
 57c:	8f b1       	in	r24, 0x0f	; 15
}
 57e:	08 95       	ret

00000580 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 580:	c4 98       	cbi	0x18, 4	; 24
 582:	08 95       	ret

00000584 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 584:	c4 9a       	sbi	0x18, 4	; 24
 586:	08 95       	ret

00000588 <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 588:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 58a:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/2
	set_bit(SPSR, SPI2X);
 58c:	70 9a       	sbi	0x0e, 0	; 14
	
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 58e:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 590:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 592:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 594:	0e 94 c2 02 	call	0x584	; 0x584 <SPI_deactivate_SS>
 598:	08 95       	ret

0000059a <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 59a:	85 b7       	in	r24, 0x35	; 53
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 5a0:	80 b7       	in	r24, 0x30	; 48
 5a2:	80 62       	ori	r24, 0x20	; 32
 5a4:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 5a6:	85 b7       	in	r24, 0x35	; 53
 5a8:	8e 7f       	andi	r24, 0xFE	; 254
 5aa:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 5ac:	85 b7       	in	r24, 0x35	; 53
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 5b2:	8b b7       	in	r24, 0x3b	; 59
 5b4:	80 64       	ori	r24, 0x40	; 64
 5b6:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 5b8:	8a 98       	cbi	0x11, 2	; 17
 5ba:	08 95       	ret

000005bc <main>:
//volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 5bc:	f8 94       	cli
	UART_init(31);
 5be:	8f e1       	ldi	r24, 0x1F	; 31
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 bf 01 	call	0x37e	; 0x37e <UART_init>
	register_init();
 5c6:	0e 94 cd 02 	call	0x59a	; 0x59a <register_init>
	oled_init();
 5ca:	0e 94 37 02 	call	0x46e	; 0x46e <oled_init>
	ADC_init();
 5ce:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	CAN_init();
 5d2:	0e 94 8c 00 	call	0x118	; 0x118 <CAN_init>
	//Enable global interrupts
	sei();
 5d6:	78 94       	sei
	

	
	while(1){
		
		send_joystick_dir();
 5d8:	0e 94 cf 01 	call	0x39e	; 0x39e <send_joystick_dir>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 ef       	ldi	r25, 0xF0	; 240
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <main+0x24>
 5e4:	f9 cf       	rjmp	.-14     	; 0x5d8 <main+0x1c>

000005e6 <malloc>:
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	82 30       	cpi	r24, 0x02	; 2
 5ec:	91 05       	cpc	r25, r1
 5ee:	10 f4       	brcc	.+4      	; 0x5f4 <malloc+0xe>
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	e0 91 72 01 	lds	r30, 0x0172
 5f8:	f0 91 73 01 	lds	r31, 0x0173
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	a0 e0       	ldi	r26, 0x00	; 0
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	30 97       	sbiw	r30, 0x00	; 0
 606:	39 f1       	breq	.+78     	; 0x656 <malloc+0x70>
 608:	40 81       	ld	r20, Z
 60a:	51 81       	ldd	r21, Z+1	; 0x01
 60c:	48 17       	cp	r20, r24
 60e:	59 07       	cpc	r21, r25
 610:	b8 f0       	brcs	.+46     	; 0x640 <malloc+0x5a>
 612:	48 17       	cp	r20, r24
 614:	59 07       	cpc	r21, r25
 616:	71 f4       	brne	.+28     	; 0x634 <malloc+0x4e>
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	93 81       	ldd	r25, Z+3	; 0x03
 61c:	10 97       	sbiw	r26, 0x00	; 0
 61e:	29 f0       	breq	.+10     	; 0x62a <malloc+0x44>
 620:	13 96       	adiw	r26, 0x03	; 3
 622:	9c 93       	st	X, r25
 624:	8e 93       	st	-X, r24
 626:	12 97       	sbiw	r26, 0x02	; 2
 628:	2c c0       	rjmp	.+88     	; 0x682 <malloc+0x9c>
 62a:	90 93 73 01 	sts	0x0173, r25
 62e:	80 93 72 01 	sts	0x0172, r24
 632:	27 c0       	rjmp	.+78     	; 0x682 <malloc+0x9c>
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	31 f0       	breq	.+12     	; 0x646 <malloc+0x60>
 63a:	42 17       	cp	r20, r18
 63c:	53 07       	cpc	r21, r19
 63e:	18 f0       	brcs	.+6      	; 0x646 <malloc+0x60>
 640:	a9 01       	movw	r20, r18
 642:	db 01       	movw	r26, r22
 644:	01 c0       	rjmp	.+2      	; 0x648 <malloc+0x62>
 646:	ef 01       	movw	r28, r30
 648:	9a 01       	movw	r18, r20
 64a:	bd 01       	movw	r22, r26
 64c:	df 01       	movw	r26, r30
 64e:	02 80       	ldd	r0, Z+2	; 0x02
 650:	f3 81       	ldd	r31, Z+3	; 0x03
 652:	e0 2d       	mov	r30, r0
 654:	d7 cf       	rjmp	.-82     	; 0x604 <malloc+0x1e>
 656:	21 15       	cp	r18, r1
 658:	31 05       	cpc	r19, r1
 65a:	f9 f0       	breq	.+62     	; 0x69a <malloc+0xb4>
 65c:	28 1b       	sub	r18, r24
 65e:	39 0b       	sbc	r19, r25
 660:	24 30       	cpi	r18, 0x04	; 4
 662:	31 05       	cpc	r19, r1
 664:	80 f4       	brcc	.+32     	; 0x686 <malloc+0xa0>
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	9b 81       	ldd	r25, Y+3	; 0x03
 66a:	61 15       	cp	r22, r1
 66c:	71 05       	cpc	r23, r1
 66e:	21 f0       	breq	.+8      	; 0x678 <malloc+0x92>
 670:	fb 01       	movw	r30, r22
 672:	93 83       	std	Z+3, r25	; 0x03
 674:	82 83       	std	Z+2, r24	; 0x02
 676:	04 c0       	rjmp	.+8      	; 0x680 <malloc+0x9a>
 678:	90 93 73 01 	sts	0x0173, r25
 67c:	80 93 72 01 	sts	0x0172, r24
 680:	fe 01       	movw	r30, r28
 682:	32 96       	adiw	r30, 0x02	; 2
 684:	44 c0       	rjmp	.+136    	; 0x70e <malloc+0x128>
 686:	fe 01       	movw	r30, r28
 688:	e2 0f       	add	r30, r18
 68a:	f3 1f       	adc	r31, r19
 68c:	81 93       	st	Z+, r24
 68e:	91 93       	st	Z+, r25
 690:	22 50       	subi	r18, 0x02	; 2
 692:	31 09       	sbc	r19, r1
 694:	39 83       	std	Y+1, r19	; 0x01
 696:	28 83       	st	Y, r18
 698:	3a c0       	rjmp	.+116    	; 0x70e <malloc+0x128>
 69a:	20 91 70 01 	lds	r18, 0x0170
 69e:	30 91 71 01 	lds	r19, 0x0171
 6a2:	23 2b       	or	r18, r19
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <malloc+0xd0>
 6a6:	20 91 02 01 	lds	r18, 0x0102
 6aa:	30 91 03 01 	lds	r19, 0x0103
 6ae:	30 93 71 01 	sts	0x0171, r19
 6b2:	20 93 70 01 	sts	0x0170, r18
 6b6:	20 91 00 01 	lds	r18, 0x0100
 6ba:	30 91 01 01 	lds	r19, 0x0101
 6be:	21 15       	cp	r18, r1
 6c0:	31 05       	cpc	r19, r1
 6c2:	41 f4       	brne	.+16     	; 0x6d4 <malloc+0xee>
 6c4:	2d b7       	in	r18, 0x3d	; 61
 6c6:	3e b7       	in	r19, 0x3e	; 62
 6c8:	40 91 04 01 	lds	r20, 0x0104
 6cc:	50 91 05 01 	lds	r21, 0x0105
 6d0:	24 1b       	sub	r18, r20
 6d2:	35 0b       	sbc	r19, r21
 6d4:	e0 91 70 01 	lds	r30, 0x0170
 6d8:	f0 91 71 01 	lds	r31, 0x0171
 6dc:	e2 17       	cp	r30, r18
 6de:	f3 07       	cpc	r31, r19
 6e0:	a0 f4       	brcc	.+40     	; 0x70a <malloc+0x124>
 6e2:	2e 1b       	sub	r18, r30
 6e4:	3f 0b       	sbc	r19, r31
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	78 f0       	brcs	.+30     	; 0x70a <malloc+0x124>
 6ec:	ac 01       	movw	r20, r24
 6ee:	4e 5f       	subi	r20, 0xFE	; 254
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	24 17       	cp	r18, r20
 6f4:	35 07       	cpc	r19, r21
 6f6:	48 f0       	brcs	.+18     	; 0x70a <malloc+0x124>
 6f8:	4e 0f       	add	r20, r30
 6fa:	5f 1f       	adc	r21, r31
 6fc:	50 93 71 01 	sts	0x0171, r21
 700:	40 93 70 01 	sts	0x0170, r20
 704:	81 93       	st	Z+, r24
 706:	91 93       	st	Z+, r25
 708:	02 c0       	rjmp	.+4      	; 0x70e <malloc+0x128>
 70a:	e0 e0       	ldi	r30, 0x00	; 0
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	cf 01       	movw	r24, r30
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <free>:
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	09 f4       	brne	.+2      	; 0x720 <free+0xa>
 71e:	87 c0       	rjmp	.+270    	; 0x82e <free+0x118>
 720:	fc 01       	movw	r30, r24
 722:	32 97       	sbiw	r30, 0x02	; 2
 724:	13 82       	std	Z+3, r1	; 0x03
 726:	12 82       	std	Z+2, r1	; 0x02
 728:	c0 91 72 01 	lds	r28, 0x0172
 72c:	d0 91 73 01 	lds	r29, 0x0173
 730:	20 97       	sbiw	r28, 0x00	; 0
 732:	81 f4       	brne	.+32     	; 0x754 <free+0x3e>
 734:	20 81       	ld	r18, Z
 736:	31 81       	ldd	r19, Z+1	; 0x01
 738:	28 0f       	add	r18, r24
 73a:	39 1f       	adc	r19, r25
 73c:	80 91 70 01 	lds	r24, 0x0170
 740:	90 91 71 01 	lds	r25, 0x0171
 744:	82 17       	cp	r24, r18
 746:	93 07       	cpc	r25, r19
 748:	79 f5       	brne	.+94     	; 0x7a8 <free+0x92>
 74a:	f0 93 71 01 	sts	0x0171, r31
 74e:	e0 93 70 01 	sts	0x0170, r30
 752:	6d c0       	rjmp	.+218    	; 0x82e <free+0x118>
 754:	de 01       	movw	r26, r28
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	ae 17       	cp	r26, r30
 75c:	bf 07       	cpc	r27, r31
 75e:	50 f4       	brcc	.+20     	; 0x774 <free+0x5e>
 760:	12 96       	adiw	r26, 0x02	; 2
 762:	4d 91       	ld	r20, X+
 764:	5c 91       	ld	r21, X
 766:	13 97       	sbiw	r26, 0x03	; 3
 768:	9d 01       	movw	r18, r26
 76a:	41 15       	cp	r20, r1
 76c:	51 05       	cpc	r21, r1
 76e:	09 f1       	breq	.+66     	; 0x7b2 <free+0x9c>
 770:	da 01       	movw	r26, r20
 772:	f3 cf       	rjmp	.-26     	; 0x75a <free+0x44>
 774:	b3 83       	std	Z+3, r27	; 0x03
 776:	a2 83       	std	Z+2, r26	; 0x02
 778:	40 81       	ld	r20, Z
 77a:	51 81       	ldd	r21, Z+1	; 0x01
 77c:	84 0f       	add	r24, r20
 77e:	95 1f       	adc	r25, r21
 780:	8a 17       	cp	r24, r26
 782:	9b 07       	cpc	r25, r27
 784:	71 f4       	brne	.+28     	; 0x7a2 <free+0x8c>
 786:	8d 91       	ld	r24, X+
 788:	9c 91       	ld	r25, X
 78a:	11 97       	sbiw	r26, 0x01	; 1
 78c:	84 0f       	add	r24, r20
 78e:	95 1f       	adc	r25, r21
 790:	02 96       	adiw	r24, 0x02	; 2
 792:	91 83       	std	Z+1, r25	; 0x01
 794:	80 83       	st	Z, r24
 796:	12 96       	adiw	r26, 0x02	; 2
 798:	8d 91       	ld	r24, X+
 79a:	9c 91       	ld	r25, X
 79c:	13 97       	sbiw	r26, 0x03	; 3
 79e:	93 83       	std	Z+3, r25	; 0x03
 7a0:	82 83       	std	Z+2, r24	; 0x02
 7a2:	21 15       	cp	r18, r1
 7a4:	31 05       	cpc	r19, r1
 7a6:	29 f4       	brne	.+10     	; 0x7b2 <free+0x9c>
 7a8:	f0 93 73 01 	sts	0x0173, r31
 7ac:	e0 93 72 01 	sts	0x0172, r30
 7b0:	3e c0       	rjmp	.+124    	; 0x82e <free+0x118>
 7b2:	d9 01       	movw	r26, r18
 7b4:	13 96       	adiw	r26, 0x03	; 3
 7b6:	fc 93       	st	X, r31
 7b8:	ee 93       	st	-X, r30
 7ba:	12 97       	sbiw	r26, 0x02	; 2
 7bc:	4d 91       	ld	r20, X+
 7be:	5d 91       	ld	r21, X+
 7c0:	a4 0f       	add	r26, r20
 7c2:	b5 1f       	adc	r27, r21
 7c4:	ea 17       	cp	r30, r26
 7c6:	fb 07       	cpc	r31, r27
 7c8:	79 f4       	brne	.+30     	; 0x7e8 <free+0xd2>
 7ca:	80 81       	ld	r24, Z
 7cc:	91 81       	ldd	r25, Z+1	; 0x01
 7ce:	84 0f       	add	r24, r20
 7d0:	95 1f       	adc	r25, r21
 7d2:	02 96       	adiw	r24, 0x02	; 2
 7d4:	d9 01       	movw	r26, r18
 7d6:	11 96       	adiw	r26, 0x01	; 1
 7d8:	9c 93       	st	X, r25
 7da:	8e 93       	st	-X, r24
 7dc:	82 81       	ldd	r24, Z+2	; 0x02
 7de:	93 81       	ldd	r25, Z+3	; 0x03
 7e0:	13 96       	adiw	r26, 0x03	; 3
 7e2:	9c 93       	st	X, r25
 7e4:	8e 93       	st	-X, r24
 7e6:	12 97       	sbiw	r26, 0x02	; 2
 7e8:	e0 e0       	ldi	r30, 0x00	; 0
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	9b 81       	ldd	r25, Y+3	; 0x03
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	19 f0       	breq	.+6      	; 0x7fa <free+0xe4>
 7f4:	fe 01       	movw	r30, r28
 7f6:	ec 01       	movw	r28, r24
 7f8:	f9 cf       	rjmp	.-14     	; 0x7ec <free+0xd6>
 7fa:	ce 01       	movw	r24, r28
 7fc:	02 96       	adiw	r24, 0x02	; 2
 7fe:	28 81       	ld	r18, Y
 800:	39 81       	ldd	r19, Y+1	; 0x01
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	20 91 70 01 	lds	r18, 0x0170
 80a:	30 91 71 01 	lds	r19, 0x0171
 80e:	28 17       	cp	r18, r24
 810:	39 07       	cpc	r19, r25
 812:	69 f4       	brne	.+26     	; 0x82e <free+0x118>
 814:	30 97       	sbiw	r30, 0x00	; 0
 816:	29 f4       	brne	.+10     	; 0x822 <free+0x10c>
 818:	10 92 73 01 	sts	0x0173, r1
 81c:	10 92 72 01 	sts	0x0172, r1
 820:	02 c0       	rjmp	.+4      	; 0x826 <free+0x110>
 822:	13 82       	std	Z+3, r1	; 0x03
 824:	12 82       	std	Z+2, r1	; 0x02
 826:	d0 93 71 01 	sts	0x0171, r29
 82a:	c0 93 70 01 	sts	0x0170, r28
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <fdevopen>:
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	ec 01       	movw	r28, r24
 83e:	8b 01       	movw	r16, r22
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	31 f4       	brne	.+12     	; 0x850 <fdevopen+0x1c>
 844:	61 15       	cp	r22, r1
 846:	71 05       	cpc	r23, r1
 848:	19 f4       	brne	.+6      	; 0x850 <fdevopen+0x1c>
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	38 c0       	rjmp	.+112    	; 0x8c0 <fdevopen+0x8c>
 850:	6e e0       	ldi	r22, 0x0E	; 14
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 78 06 	call	0xcf0	; 0xcf0 <calloc>
 85c:	fc 01       	movw	r30, r24
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	a1 f3       	breq	.-24     	; 0x84a <fdevopen+0x16>
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	83 83       	std	Z+3, r24	; 0x03
 866:	01 15       	cp	r16, r1
 868:	11 05       	cpc	r17, r1
 86a:	71 f0       	breq	.+28     	; 0x888 <fdevopen+0x54>
 86c:	13 87       	std	Z+11, r17	; 0x0b
 86e:	02 87       	std	Z+10, r16	; 0x0a
 870:	81 e8       	ldi	r24, 0x81	; 129
 872:	83 83       	std	Z+3, r24	; 0x03
 874:	80 91 74 01 	lds	r24, 0x0174
 878:	90 91 75 01 	lds	r25, 0x0175
 87c:	89 2b       	or	r24, r25
 87e:	21 f4       	brne	.+8      	; 0x888 <fdevopen+0x54>
 880:	f0 93 75 01 	sts	0x0175, r31
 884:	e0 93 74 01 	sts	0x0174, r30
 888:	20 97       	sbiw	r28, 0x00	; 0
 88a:	c9 f0       	breq	.+50     	; 0x8be <fdevopen+0x8a>
 88c:	d1 87       	std	Z+9, r29	; 0x09
 88e:	c0 87       	std	Z+8, r28	; 0x08
 890:	83 81       	ldd	r24, Z+3	; 0x03
 892:	82 60       	ori	r24, 0x02	; 2
 894:	83 83       	std	Z+3, r24	; 0x03
 896:	80 91 76 01 	lds	r24, 0x0176
 89a:	90 91 77 01 	lds	r25, 0x0177
 89e:	89 2b       	or	r24, r25
 8a0:	71 f4       	brne	.+28     	; 0x8be <fdevopen+0x8a>
 8a2:	f0 93 77 01 	sts	0x0177, r31
 8a6:	e0 93 76 01 	sts	0x0176, r30
 8aa:	80 91 78 01 	lds	r24, 0x0178
 8ae:	90 91 79 01 	lds	r25, 0x0179
 8b2:	89 2b       	or	r24, r25
 8b4:	21 f4       	brne	.+8      	; 0x8be <fdevopen+0x8a>
 8b6:	f0 93 79 01 	sts	0x0179, r31
 8ba:	e0 93 78 01 	sts	0x0178, r30
 8be:	cf 01       	movw	r24, r30
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <printf>:
 8ca:	a0 e0       	ldi	r26, 0x00	; 0
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	eb e6       	ldi	r30, 0x6B	; 107
 8d0:	f4 e0       	ldi	r31, 0x04	; 4
 8d2:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__prologue_saves__+0x20>
 8d6:	fe 01       	movw	r30, r28
 8d8:	35 96       	adiw	r30, 0x05	; 5
 8da:	61 91       	ld	r22, Z+
 8dc:	71 91       	ld	r23, Z+
 8de:	af 01       	movw	r20, r30
 8e0:	80 91 76 01 	lds	r24, 0x0176
 8e4:	90 91 77 01 	lds	r25, 0x0177
 8e8:	0e 94 a6 04 	call	0x94c	; 0x94c <vfprintf>
 8ec:	e2 e0       	ldi	r30, 0x02	; 2
 8ee:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__epilogue_restores__+0x20>

000008f2 <puts>:
 8f2:	0f 93       	push	r16
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	e0 91 76 01 	lds	r30, 0x0176
 8fe:	f0 91 77 01 	lds	r31, 0x0177
 902:	23 81       	ldd	r18, Z+3	; 0x03
 904:	21 ff       	sbrs	r18, 1
 906:	1b c0       	rjmp	.+54     	; 0x93e <puts+0x4c>
 908:	ec 01       	movw	r28, r24
 90a:	00 e0       	ldi	r16, 0x00	; 0
 90c:	10 e0       	ldi	r17, 0x00	; 0
 90e:	89 91       	ld	r24, Y+
 910:	60 91 76 01 	lds	r22, 0x0176
 914:	70 91 77 01 	lds	r23, 0x0177
 918:	db 01       	movw	r26, r22
 91a:	18 96       	adiw	r26, 0x08	; 8
 91c:	ed 91       	ld	r30, X+
 91e:	fc 91       	ld	r31, X
 920:	19 97       	sbiw	r26, 0x09	; 9
 922:	88 23       	and	r24, r24
 924:	31 f0       	breq	.+12     	; 0x932 <puts+0x40>
 926:	09 95       	icall
 928:	89 2b       	or	r24, r25
 92a:	89 f3       	breq	.-30     	; 0x90e <puts+0x1c>
 92c:	0f ef       	ldi	r16, 0xFF	; 255
 92e:	1f ef       	ldi	r17, 0xFF	; 255
 930:	ee cf       	rjmp	.-36     	; 0x90e <puts+0x1c>
 932:	8a e0       	ldi	r24, 0x0A	; 10
 934:	09 95       	icall
 936:	89 2b       	or	r24, r25
 938:	11 f4       	brne	.+4      	; 0x93e <puts+0x4c>
 93a:	c8 01       	movw	r24, r16
 93c:	02 c0       	rjmp	.+4      	; 0x942 <puts+0x50>
 93e:	8f ef       	ldi	r24, 0xFF	; 255
 940:	9f ef       	ldi	r25, 0xFF	; 255
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <vfprintf>:
 94c:	ac e0       	ldi	r26, 0x0C	; 12
 94e:	b0 e0       	ldi	r27, 0x00	; 0
 950:	ec ea       	ldi	r30, 0xAC	; 172
 952:	f4 e0       	ldi	r31, 0x04	; 4
 954:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__prologue_saves__>
 958:	7c 01       	movw	r14, r24
 95a:	6b 01       	movw	r12, r22
 95c:	8a 01       	movw	r16, r20
 95e:	fc 01       	movw	r30, r24
 960:	17 82       	std	Z+7, r1	; 0x07
 962:	16 82       	std	Z+6, r1	; 0x06
 964:	83 81       	ldd	r24, Z+3	; 0x03
 966:	81 ff       	sbrs	r24, 1
 968:	bd c1       	rjmp	.+890    	; 0xce4 <vfprintf+0x398>
 96a:	ce 01       	movw	r24, r28
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	4c 01       	movw	r8, r24
 970:	f7 01       	movw	r30, r14
 972:	93 81       	ldd	r25, Z+3	; 0x03
 974:	f6 01       	movw	r30, r12
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	6f 01       	movw	r12, r30
 980:	88 23       	and	r24, r24
 982:	09 f4       	brne	.+2      	; 0x986 <vfprintf+0x3a>
 984:	ab c1       	rjmp	.+854    	; 0xcdc <vfprintf+0x390>
 986:	85 32       	cpi	r24, 0x25	; 37
 988:	39 f4       	brne	.+14     	; 0x998 <vfprintf+0x4c>
 98a:	93 fd       	sbrc	r25, 3
 98c:	85 91       	lpm	r24, Z+
 98e:	93 ff       	sbrs	r25, 3
 990:	81 91       	ld	r24, Z+
 992:	6f 01       	movw	r12, r30
 994:	85 32       	cpi	r24, 0x25	; 37
 996:	29 f4       	brne	.+10     	; 0x9a2 <vfprintf+0x56>
 998:	b7 01       	movw	r22, r14
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 9a0:	e7 cf       	rjmp	.-50     	; 0x970 <vfprintf+0x24>
 9a2:	51 2c       	mov	r5, r1
 9a4:	31 2c       	mov	r3, r1
 9a6:	20 e0       	ldi	r18, 0x00	; 0
 9a8:	20 32       	cpi	r18, 0x20	; 32
 9aa:	a0 f4       	brcc	.+40     	; 0x9d4 <vfprintf+0x88>
 9ac:	8b 32       	cpi	r24, 0x2B	; 43
 9ae:	69 f0       	breq	.+26     	; 0x9ca <vfprintf+0x7e>
 9b0:	30 f4       	brcc	.+12     	; 0x9be <vfprintf+0x72>
 9b2:	80 32       	cpi	r24, 0x20	; 32
 9b4:	59 f0       	breq	.+22     	; 0x9cc <vfprintf+0x80>
 9b6:	83 32       	cpi	r24, 0x23	; 35
 9b8:	69 f4       	brne	.+26     	; 0x9d4 <vfprintf+0x88>
 9ba:	20 61       	ori	r18, 0x10	; 16
 9bc:	2c c0       	rjmp	.+88     	; 0xa16 <vfprintf+0xca>
 9be:	8d 32       	cpi	r24, 0x2D	; 45
 9c0:	39 f0       	breq	.+14     	; 0x9d0 <vfprintf+0x84>
 9c2:	80 33       	cpi	r24, 0x30	; 48
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <vfprintf+0x88>
 9c6:	21 60       	ori	r18, 0x01	; 1
 9c8:	26 c0       	rjmp	.+76     	; 0xa16 <vfprintf+0xca>
 9ca:	22 60       	ori	r18, 0x02	; 2
 9cc:	24 60       	ori	r18, 0x04	; 4
 9ce:	23 c0       	rjmp	.+70     	; 0xa16 <vfprintf+0xca>
 9d0:	28 60       	ori	r18, 0x08	; 8
 9d2:	21 c0       	rjmp	.+66     	; 0xa16 <vfprintf+0xca>
 9d4:	27 fd       	sbrc	r18, 7
 9d6:	27 c0       	rjmp	.+78     	; 0xa26 <vfprintf+0xda>
 9d8:	30 ed       	ldi	r19, 0xD0	; 208
 9da:	38 0f       	add	r19, r24
 9dc:	3a 30       	cpi	r19, 0x0A	; 10
 9de:	78 f4       	brcc	.+30     	; 0x9fe <vfprintf+0xb2>
 9e0:	26 ff       	sbrs	r18, 6
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <vfprintf+0xa4>
 9e4:	fa e0       	ldi	r31, 0x0A	; 10
 9e6:	5f 9e       	mul	r5, r31
 9e8:	30 0d       	add	r19, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	53 2e       	mov	r5, r19
 9ee:	13 c0       	rjmp	.+38     	; 0xa16 <vfprintf+0xca>
 9f0:	8a e0       	ldi	r24, 0x0A	; 10
 9f2:	38 9e       	mul	r3, r24
 9f4:	30 0d       	add	r19, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	33 2e       	mov	r3, r19
 9fa:	20 62       	ori	r18, 0x20	; 32
 9fc:	0c c0       	rjmp	.+24     	; 0xa16 <vfprintf+0xca>
 9fe:	8e 32       	cpi	r24, 0x2E	; 46
 a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0xbe>
 a02:	26 fd       	sbrc	r18, 6
 a04:	6b c1       	rjmp	.+726    	; 0xcdc <vfprintf+0x390>
 a06:	20 64       	ori	r18, 0x40	; 64
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0xca>
 a0a:	8c 36       	cpi	r24, 0x6C	; 108
 a0c:	11 f4       	brne	.+4      	; 0xa12 <vfprintf+0xc6>
 a0e:	20 68       	ori	r18, 0x80	; 128
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0xca>
 a12:	88 36       	cpi	r24, 0x68	; 104
 a14:	41 f4       	brne	.+16     	; 0xa26 <vfprintf+0xda>
 a16:	f6 01       	movw	r30, r12
 a18:	93 fd       	sbrc	r25, 3
 a1a:	85 91       	lpm	r24, Z+
 a1c:	93 ff       	sbrs	r25, 3
 a1e:	81 91       	ld	r24, Z+
 a20:	6f 01       	movw	r12, r30
 a22:	81 11       	cpse	r24, r1
 a24:	c1 cf       	rjmp	.-126    	; 0x9a8 <vfprintf+0x5c>
 a26:	98 2f       	mov	r25, r24
 a28:	9f 7d       	andi	r25, 0xDF	; 223
 a2a:	95 54       	subi	r25, 0x45	; 69
 a2c:	93 30       	cpi	r25, 0x03	; 3
 a2e:	28 f4       	brcc	.+10     	; 0xa3a <vfprintf+0xee>
 a30:	0c 5f       	subi	r16, 0xFC	; 252
 a32:	1f 4f       	sbci	r17, 0xFF	; 255
 a34:	ff e3       	ldi	r31, 0x3F	; 63
 a36:	f9 83       	std	Y+1, r31	; 0x01
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <vfprintf+0x108>
 a3a:	83 36       	cpi	r24, 0x63	; 99
 a3c:	31 f0       	breq	.+12     	; 0xa4a <vfprintf+0xfe>
 a3e:	83 37       	cpi	r24, 0x73	; 115
 a40:	71 f0       	breq	.+28     	; 0xa5e <vfprintf+0x112>
 a42:	83 35       	cpi	r24, 0x53	; 83
 a44:	09 f0       	breq	.+2      	; 0xa48 <vfprintf+0xfc>
 a46:	5b c0       	rjmp	.+182    	; 0xafe <vfprintf+0x1b2>
 a48:	22 c0       	rjmp	.+68     	; 0xa8e <vfprintf+0x142>
 a4a:	f8 01       	movw	r30, r16
 a4c:	80 81       	ld	r24, Z
 a4e:	89 83       	std	Y+1, r24	; 0x01
 a50:	0e 5f       	subi	r16, 0xFE	; 254
 a52:	1f 4f       	sbci	r17, 0xFF	; 255
 a54:	44 24       	eor	r4, r4
 a56:	43 94       	inc	r4
 a58:	51 2c       	mov	r5, r1
 a5a:	54 01       	movw	r10, r8
 a5c:	15 c0       	rjmp	.+42     	; 0xa88 <vfprintf+0x13c>
 a5e:	38 01       	movw	r6, r16
 a60:	f2 e0       	ldi	r31, 0x02	; 2
 a62:	6f 0e       	add	r6, r31
 a64:	71 1c       	adc	r7, r1
 a66:	f8 01       	movw	r30, r16
 a68:	a0 80       	ld	r10, Z
 a6a:	b1 80       	ldd	r11, Z+1	; 0x01
 a6c:	26 ff       	sbrs	r18, 6
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x12a>
 a70:	65 2d       	mov	r22, r5
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x12e>
 a76:	6f ef       	ldi	r22, 0xFF	; 255
 a78:	7f ef       	ldi	r23, 0xFF	; 255
 a7a:	c5 01       	movw	r24, r10
 a7c:	2c 87       	std	Y+12, r18	; 0x0c
 a7e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <strnlen>
 a82:	2c 01       	movw	r4, r24
 a84:	83 01       	movw	r16, r6
 a86:	2c 85       	ldd	r18, Y+12	; 0x0c
 a88:	2f 77       	andi	r18, 0x7F	; 127
 a8a:	22 2e       	mov	r2, r18
 a8c:	17 c0       	rjmp	.+46     	; 0xabc <vfprintf+0x170>
 a8e:	38 01       	movw	r6, r16
 a90:	f2 e0       	ldi	r31, 0x02	; 2
 a92:	6f 0e       	add	r6, r31
 a94:	71 1c       	adc	r7, r1
 a96:	f8 01       	movw	r30, r16
 a98:	a0 80       	ld	r10, Z
 a9a:	b1 80       	ldd	r11, Z+1	; 0x01
 a9c:	26 ff       	sbrs	r18, 6
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <vfprintf+0x15a>
 aa0:	65 2d       	mov	r22, r5
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <vfprintf+0x15e>
 aa6:	6f ef       	ldi	r22, 0xFF	; 255
 aa8:	7f ef       	ldi	r23, 0xFF	; 255
 aaa:	c5 01       	movw	r24, r10
 aac:	2c 87       	std	Y+12, r18	; 0x0c
 aae:	0e 94 94 06 	call	0xd28	; 0xd28 <strnlen_P>
 ab2:	2c 01       	movw	r4, r24
 ab4:	2c 85       	ldd	r18, Y+12	; 0x0c
 ab6:	20 68       	ori	r18, 0x80	; 128
 ab8:	22 2e       	mov	r2, r18
 aba:	83 01       	movw	r16, r6
 abc:	23 fc       	sbrc	r2, 3
 abe:	1b c0       	rjmp	.+54     	; 0xaf6 <vfprintf+0x1aa>
 ac0:	83 2d       	mov	r24, r3
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	48 16       	cp	r4, r24
 ac6:	59 06       	cpc	r5, r25
 ac8:	b0 f4       	brcc	.+44     	; 0xaf6 <vfprintf+0x1aa>
 aca:	b7 01       	movw	r22, r14
 acc:	80 e2       	ldi	r24, 0x20	; 32
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 ad4:	3a 94       	dec	r3
 ad6:	f4 cf       	rjmp	.-24     	; 0xac0 <vfprintf+0x174>
 ad8:	f5 01       	movw	r30, r10
 ada:	27 fc       	sbrc	r2, 7
 adc:	85 91       	lpm	r24, Z+
 ade:	27 fe       	sbrs	r2, 7
 ae0:	81 91       	ld	r24, Z+
 ae2:	5f 01       	movw	r10, r30
 ae4:	b7 01       	movw	r22, r14
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 aec:	31 10       	cpse	r3, r1
 aee:	3a 94       	dec	r3
 af0:	f1 e0       	ldi	r31, 0x01	; 1
 af2:	4f 1a       	sub	r4, r31
 af4:	51 08       	sbc	r5, r1
 af6:	41 14       	cp	r4, r1
 af8:	51 04       	cpc	r5, r1
 afa:	71 f7       	brne	.-36     	; 0xad8 <vfprintf+0x18c>
 afc:	e5 c0       	rjmp	.+458    	; 0xcc8 <vfprintf+0x37c>
 afe:	84 36       	cpi	r24, 0x64	; 100
 b00:	11 f0       	breq	.+4      	; 0xb06 <vfprintf+0x1ba>
 b02:	89 36       	cpi	r24, 0x69	; 105
 b04:	39 f5       	brne	.+78     	; 0xb54 <vfprintf+0x208>
 b06:	f8 01       	movw	r30, r16
 b08:	27 ff       	sbrs	r18, 7
 b0a:	07 c0       	rjmp	.+14     	; 0xb1a <vfprintf+0x1ce>
 b0c:	60 81       	ld	r22, Z
 b0e:	71 81       	ldd	r23, Z+1	; 0x01
 b10:	82 81       	ldd	r24, Z+2	; 0x02
 b12:	93 81       	ldd	r25, Z+3	; 0x03
 b14:	0c 5f       	subi	r16, 0xFC	; 252
 b16:	1f 4f       	sbci	r17, 0xFF	; 255
 b18:	08 c0       	rjmp	.+16     	; 0xb2a <vfprintf+0x1de>
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	88 27       	eor	r24, r24
 b20:	77 fd       	sbrc	r23, 7
 b22:	80 95       	com	r24
 b24:	98 2f       	mov	r25, r24
 b26:	0e 5f       	subi	r16, 0xFE	; 254
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	2f 76       	andi	r18, 0x6F	; 111
 b2c:	b2 2e       	mov	r11, r18
 b2e:	97 ff       	sbrs	r25, 7
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <vfprintf+0x1f8>
 b32:	90 95       	com	r25
 b34:	80 95       	com	r24
 b36:	70 95       	com	r23
 b38:	61 95       	neg	r22
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	20 68       	ori	r18, 0x80	; 128
 b42:	b2 2e       	mov	r11, r18
 b44:	2a e0       	ldi	r18, 0x0A	; 10
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	a4 01       	movw	r20, r8
 b4a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 b4e:	a8 2e       	mov	r10, r24
 b50:	a8 18       	sub	r10, r8
 b52:	44 c0       	rjmp	.+136    	; 0xbdc <vfprintf+0x290>
 b54:	85 37       	cpi	r24, 0x75	; 117
 b56:	29 f4       	brne	.+10     	; 0xb62 <vfprintf+0x216>
 b58:	2f 7e       	andi	r18, 0xEF	; 239
 b5a:	b2 2e       	mov	r11, r18
 b5c:	2a e0       	ldi	r18, 0x0A	; 10
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	25 c0       	rjmp	.+74     	; 0xbac <vfprintf+0x260>
 b62:	f2 2f       	mov	r31, r18
 b64:	f9 7f       	andi	r31, 0xF9	; 249
 b66:	bf 2e       	mov	r11, r31
 b68:	8f 36       	cpi	r24, 0x6F	; 111
 b6a:	c1 f0       	breq	.+48     	; 0xb9c <vfprintf+0x250>
 b6c:	18 f4       	brcc	.+6      	; 0xb74 <vfprintf+0x228>
 b6e:	88 35       	cpi	r24, 0x58	; 88
 b70:	79 f0       	breq	.+30     	; 0xb90 <vfprintf+0x244>
 b72:	b4 c0       	rjmp	.+360    	; 0xcdc <vfprintf+0x390>
 b74:	80 37       	cpi	r24, 0x70	; 112
 b76:	19 f0       	breq	.+6      	; 0xb7e <vfprintf+0x232>
 b78:	88 37       	cpi	r24, 0x78	; 120
 b7a:	21 f0       	breq	.+8      	; 0xb84 <vfprintf+0x238>
 b7c:	af c0       	rjmp	.+350    	; 0xcdc <vfprintf+0x390>
 b7e:	2f 2f       	mov	r18, r31
 b80:	20 61       	ori	r18, 0x10	; 16
 b82:	b2 2e       	mov	r11, r18
 b84:	b4 fe       	sbrs	r11, 4
 b86:	0d c0       	rjmp	.+26     	; 0xba2 <vfprintf+0x256>
 b88:	8b 2d       	mov	r24, r11
 b8a:	84 60       	ori	r24, 0x04	; 4
 b8c:	b8 2e       	mov	r11, r24
 b8e:	09 c0       	rjmp	.+18     	; 0xba2 <vfprintf+0x256>
 b90:	24 ff       	sbrs	r18, 4
 b92:	0a c0       	rjmp	.+20     	; 0xba8 <vfprintf+0x25c>
 b94:	9f 2f       	mov	r25, r31
 b96:	96 60       	ori	r25, 0x06	; 6
 b98:	b9 2e       	mov	r11, r25
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0x25c>
 b9c:	28 e0       	ldi	r18, 0x08	; 8
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <vfprintf+0x260>
 ba2:	20 e1       	ldi	r18, 0x10	; 16
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <vfprintf+0x260>
 ba8:	20 e1       	ldi	r18, 0x10	; 16
 baa:	32 e0       	ldi	r19, 0x02	; 2
 bac:	f8 01       	movw	r30, r16
 bae:	b7 fe       	sbrs	r11, 7
 bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <vfprintf+0x274>
 bb2:	60 81       	ld	r22, Z
 bb4:	71 81       	ldd	r23, Z+1	; 0x01
 bb6:	82 81       	ldd	r24, Z+2	; 0x02
 bb8:	93 81       	ldd	r25, Z+3	; 0x03
 bba:	0c 5f       	subi	r16, 0xFC	; 252
 bbc:	1f 4f       	sbci	r17, 0xFF	; 255
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0x280>
 bc0:	60 81       	ld	r22, Z
 bc2:	71 81       	ldd	r23, Z+1	; 0x01
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	0e 5f       	subi	r16, 0xFE	; 254
 bca:	1f 4f       	sbci	r17, 0xFF	; 255
 bcc:	a4 01       	movw	r20, r8
 bce:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 bd2:	a8 2e       	mov	r10, r24
 bd4:	a8 18       	sub	r10, r8
 bd6:	fb 2d       	mov	r31, r11
 bd8:	ff 77       	andi	r31, 0x7F	; 127
 bda:	bf 2e       	mov	r11, r31
 bdc:	b6 fe       	sbrs	r11, 6
 bde:	0b c0       	rjmp	.+22     	; 0xbf6 <vfprintf+0x2aa>
 be0:	2b 2d       	mov	r18, r11
 be2:	2e 7f       	andi	r18, 0xFE	; 254
 be4:	a5 14       	cp	r10, r5
 be6:	50 f4       	brcc	.+20     	; 0xbfc <vfprintf+0x2b0>
 be8:	b4 fe       	sbrs	r11, 4
 bea:	0a c0       	rjmp	.+20     	; 0xc00 <vfprintf+0x2b4>
 bec:	b2 fc       	sbrc	r11, 2
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <vfprintf+0x2b4>
 bf0:	2b 2d       	mov	r18, r11
 bf2:	2e 7e       	andi	r18, 0xEE	; 238
 bf4:	05 c0       	rjmp	.+10     	; 0xc00 <vfprintf+0x2b4>
 bf6:	7a 2c       	mov	r7, r10
 bf8:	2b 2d       	mov	r18, r11
 bfa:	03 c0       	rjmp	.+6      	; 0xc02 <vfprintf+0x2b6>
 bfc:	7a 2c       	mov	r7, r10
 bfe:	01 c0       	rjmp	.+2      	; 0xc02 <vfprintf+0x2b6>
 c00:	75 2c       	mov	r7, r5
 c02:	24 ff       	sbrs	r18, 4
 c04:	0d c0       	rjmp	.+26     	; 0xc20 <vfprintf+0x2d4>
 c06:	fe 01       	movw	r30, r28
 c08:	ea 0d       	add	r30, r10
 c0a:	f1 1d       	adc	r31, r1
 c0c:	80 81       	ld	r24, Z
 c0e:	80 33       	cpi	r24, 0x30	; 48
 c10:	11 f4       	brne	.+4      	; 0xc16 <vfprintf+0x2ca>
 c12:	29 7e       	andi	r18, 0xE9	; 233
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <vfprintf+0x2dc>
 c16:	22 ff       	sbrs	r18, 2
 c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x2da>
 c1a:	73 94       	inc	r7
 c1c:	73 94       	inc	r7
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <vfprintf+0x2dc>
 c20:	82 2f       	mov	r24, r18
 c22:	86 78       	andi	r24, 0x86	; 134
 c24:	09 f0       	breq	.+2      	; 0xc28 <vfprintf+0x2dc>
 c26:	73 94       	inc	r7
 c28:	23 fd       	sbrc	r18, 3
 c2a:	13 c0       	rjmp	.+38     	; 0xc52 <vfprintf+0x306>
 c2c:	20 ff       	sbrs	r18, 0
 c2e:	06 c0       	rjmp	.+12     	; 0xc3c <vfprintf+0x2f0>
 c30:	5a 2c       	mov	r5, r10
 c32:	73 14       	cp	r7, r3
 c34:	18 f4       	brcc	.+6      	; 0xc3c <vfprintf+0x2f0>
 c36:	53 0c       	add	r5, r3
 c38:	57 18       	sub	r5, r7
 c3a:	73 2c       	mov	r7, r3
 c3c:	73 14       	cp	r7, r3
 c3e:	68 f4       	brcc	.+26     	; 0xc5a <vfprintf+0x30e>
 c40:	b7 01       	movw	r22, r14
 c42:	80 e2       	ldi	r24, 0x20	; 32
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	2c 87       	std	Y+12, r18	; 0x0c
 c48:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 c4c:	73 94       	inc	r7
 c4e:	2c 85       	ldd	r18, Y+12	; 0x0c
 c50:	f5 cf       	rjmp	.-22     	; 0xc3c <vfprintf+0x2f0>
 c52:	73 14       	cp	r7, r3
 c54:	10 f4       	brcc	.+4      	; 0xc5a <vfprintf+0x30e>
 c56:	37 18       	sub	r3, r7
 c58:	01 c0       	rjmp	.+2      	; 0xc5c <vfprintf+0x310>
 c5a:	31 2c       	mov	r3, r1
 c5c:	24 ff       	sbrs	r18, 4
 c5e:	12 c0       	rjmp	.+36     	; 0xc84 <vfprintf+0x338>
 c60:	b7 01       	movw	r22, r14
 c62:	80 e3       	ldi	r24, 0x30	; 48
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	2c 87       	std	Y+12, r18	; 0x0c
 c68:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
 c6e:	22 ff       	sbrs	r18, 2
 c70:	17 c0       	rjmp	.+46     	; 0xca0 <vfprintf+0x354>
 c72:	21 ff       	sbrs	r18, 1
 c74:	03 c0       	rjmp	.+6      	; 0xc7c <vfprintf+0x330>
 c76:	88 e5       	ldi	r24, 0x58	; 88
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x334>
 c7c:	88 e7       	ldi	r24, 0x78	; 120
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	b7 01       	movw	r22, r14
 c82:	0c c0       	rjmp	.+24     	; 0xc9c <vfprintf+0x350>
 c84:	82 2f       	mov	r24, r18
 c86:	86 78       	andi	r24, 0x86	; 134
 c88:	59 f0       	breq	.+22     	; 0xca0 <vfprintf+0x354>
 c8a:	21 fd       	sbrc	r18, 1
 c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x346>
 c8e:	80 e2       	ldi	r24, 0x20	; 32
 c90:	01 c0       	rjmp	.+2      	; 0xc94 <vfprintf+0x348>
 c92:	8b e2       	ldi	r24, 0x2B	; 43
 c94:	27 fd       	sbrc	r18, 7
 c96:	8d e2       	ldi	r24, 0x2D	; 45
 c98:	b7 01       	movw	r22, r14
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 ca0:	a5 14       	cp	r10, r5
 ca2:	38 f4       	brcc	.+14     	; 0xcb2 <vfprintf+0x366>
 ca4:	b7 01       	movw	r22, r14
 ca6:	80 e3       	ldi	r24, 0x30	; 48
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 cae:	5a 94       	dec	r5
 cb0:	f7 cf       	rjmp	.-18     	; 0xca0 <vfprintf+0x354>
 cb2:	aa 94       	dec	r10
 cb4:	f4 01       	movw	r30, r8
 cb6:	ea 0d       	add	r30, r10
 cb8:	f1 1d       	adc	r31, r1
 cba:	80 81       	ld	r24, Z
 cbc:	b7 01       	movw	r22, r14
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 cc4:	a1 10       	cpse	r10, r1
 cc6:	f5 cf       	rjmp	.-22     	; 0xcb2 <vfprintf+0x366>
 cc8:	33 20       	and	r3, r3
 cca:	09 f4       	brne	.+2      	; 0xcce <vfprintf+0x382>
 ccc:	51 ce       	rjmp	.-862    	; 0x970 <vfprintf+0x24>
 cce:	b7 01       	movw	r22, r14
 cd0:	80 e2       	ldi	r24, 0x20	; 32
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0e 94 b1 06 	call	0xd62	; 0xd62 <fputc>
 cd8:	3a 94       	dec	r3
 cda:	f6 cf       	rjmp	.-20     	; 0xcc8 <vfprintf+0x37c>
 cdc:	f7 01       	movw	r30, r14
 cde:	86 81       	ldd	r24, Z+6	; 0x06
 ce0:	97 81       	ldd	r25, Z+7	; 0x07
 ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x39c>
 ce4:	8f ef       	ldi	r24, 0xFF	; 255
 ce6:	9f ef       	ldi	r25, 0xFF	; 255
 ce8:	2c 96       	adiw	r28, 0x0c	; 12
 cea:	e2 e1       	ldi	r30, 0x12	; 18
 cec:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__epilogue_restores__>

00000cf0 <calloc>:
 cf0:	0f 93       	push	r16
 cf2:	1f 93       	push	r17
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	86 9f       	mul	r24, r22
 cfa:	80 01       	movw	r16, r0
 cfc:	87 9f       	mul	r24, r23
 cfe:	10 0d       	add	r17, r0
 d00:	96 9f       	mul	r25, r22
 d02:	10 0d       	add	r17, r0
 d04:	11 24       	eor	r1, r1
 d06:	c8 01       	movw	r24, r16
 d08:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <malloc>
 d0c:	ec 01       	movw	r28, r24
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	29 f0       	breq	.+10     	; 0xd1c <calloc+0x2c>
 d12:	a8 01       	movw	r20, r16
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	70 e0       	ldi	r23, 0x00	; 0
 d18:	0e 94 9f 06 	call	0xd3e	; 0xd3e <memset>
 d1c:	ce 01       	movw	r24, r28
 d1e:	df 91       	pop	r29
 d20:	cf 91       	pop	r28
 d22:	1f 91       	pop	r17
 d24:	0f 91       	pop	r16
 d26:	08 95       	ret

00000d28 <strnlen_P>:
 d28:	fc 01       	movw	r30, r24
 d2a:	05 90       	lpm	r0, Z+
 d2c:	61 50       	subi	r22, 0x01	; 1
 d2e:	70 40       	sbci	r23, 0x00	; 0
 d30:	01 10       	cpse	r0, r1
 d32:	d8 f7       	brcc	.-10     	; 0xd2a <strnlen_P+0x2>
 d34:	80 95       	com	r24
 d36:	90 95       	com	r25
 d38:	8e 0f       	add	r24, r30
 d3a:	9f 1f       	adc	r25, r31
 d3c:	08 95       	ret

00000d3e <memset>:
 d3e:	dc 01       	movw	r26, r24
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <memset+0x6>
 d42:	6d 93       	st	X+, r22
 d44:	41 50       	subi	r20, 0x01	; 1
 d46:	50 40       	sbci	r21, 0x00	; 0
 d48:	e0 f7       	brcc	.-8      	; 0xd42 <memset+0x4>
 d4a:	08 95       	ret

00000d4c <strnlen>:
 d4c:	fc 01       	movw	r30, r24
 d4e:	61 50       	subi	r22, 0x01	; 1
 d50:	70 40       	sbci	r23, 0x00	; 0
 d52:	01 90       	ld	r0, Z+
 d54:	01 10       	cpse	r0, r1
 d56:	d8 f7       	brcc	.-10     	; 0xd4e <strnlen+0x2>
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	8e 0f       	add	r24, r30
 d5e:	9f 1f       	adc	r25, r31
 d60:	08 95       	ret

00000d62 <fputc>:
 d62:	0f 93       	push	r16
 d64:	1f 93       	push	r17
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	18 2f       	mov	r17, r24
 d6c:	09 2f       	mov	r16, r25
 d6e:	eb 01       	movw	r28, r22
 d70:	8b 81       	ldd	r24, Y+3	; 0x03
 d72:	81 fd       	sbrc	r24, 1
 d74:	03 c0       	rjmp	.+6      	; 0xd7c <fputc+0x1a>
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	20 c0       	rjmp	.+64     	; 0xdbc <fputc+0x5a>
 d7c:	82 ff       	sbrs	r24, 2
 d7e:	10 c0       	rjmp	.+32     	; 0xda0 <fputc+0x3e>
 d80:	4e 81       	ldd	r20, Y+6	; 0x06
 d82:	5f 81       	ldd	r21, Y+7	; 0x07
 d84:	2c 81       	ldd	r18, Y+4	; 0x04
 d86:	3d 81       	ldd	r19, Y+5	; 0x05
 d88:	42 17       	cp	r20, r18
 d8a:	53 07       	cpc	r21, r19
 d8c:	7c f4       	brge	.+30     	; 0xdac <fputc+0x4a>
 d8e:	e8 81       	ld	r30, Y
 d90:	f9 81       	ldd	r31, Y+1	; 0x01
 d92:	9f 01       	movw	r18, r30
 d94:	2f 5f       	subi	r18, 0xFF	; 255
 d96:	3f 4f       	sbci	r19, 0xFF	; 255
 d98:	39 83       	std	Y+1, r19	; 0x01
 d9a:	28 83       	st	Y, r18
 d9c:	10 83       	st	Z, r17
 d9e:	06 c0       	rjmp	.+12     	; 0xdac <fputc+0x4a>
 da0:	e8 85       	ldd	r30, Y+8	; 0x08
 da2:	f9 85       	ldd	r31, Y+9	; 0x09
 da4:	81 2f       	mov	r24, r17
 da6:	09 95       	icall
 da8:	89 2b       	or	r24, r25
 daa:	29 f7       	brne	.-54     	; 0xd76 <fputc+0x14>
 dac:	2e 81       	ldd	r18, Y+6	; 0x06
 dae:	3f 81       	ldd	r19, Y+7	; 0x07
 db0:	2f 5f       	subi	r18, 0xFF	; 255
 db2:	3f 4f       	sbci	r19, 0xFF	; 255
 db4:	3f 83       	std	Y+7, r19	; 0x07
 db6:	2e 83       	std	Y+6, r18	; 0x06
 db8:	81 2f       	mov	r24, r17
 dba:	90 2f       	mov	r25, r16
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	08 95       	ret

00000dc6 <__ultoa_invert>:
 dc6:	fa 01       	movw	r30, r20
 dc8:	aa 27       	eor	r26, r26
 dca:	28 30       	cpi	r18, 0x08	; 8
 dcc:	51 f1       	breq	.+84     	; 0xe22 <__ultoa_invert+0x5c>
 dce:	20 31       	cpi	r18, 0x10	; 16
 dd0:	81 f1       	breq	.+96     	; 0xe32 <__ultoa_invert+0x6c>
 dd2:	e8 94       	clt
 dd4:	6f 93       	push	r22
 dd6:	6e 7f       	andi	r22, 0xFE	; 254
 dd8:	6e 5f       	subi	r22, 0xFE	; 254
 dda:	7f 4f       	sbci	r23, 0xFF	; 255
 ddc:	8f 4f       	sbci	r24, 0xFF	; 255
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	af 4f       	sbci	r26, 0xFF	; 255
 de2:	b1 e0       	ldi	r27, 0x01	; 1
 de4:	3e d0       	rcall	.+124    	; 0xe62 <__ultoa_invert+0x9c>
 de6:	b4 e0       	ldi	r27, 0x04	; 4
 de8:	3c d0       	rcall	.+120    	; 0xe62 <__ultoa_invert+0x9c>
 dea:	67 0f       	add	r22, r23
 dec:	78 1f       	adc	r23, r24
 dee:	89 1f       	adc	r24, r25
 df0:	9a 1f       	adc	r25, r26
 df2:	a1 1d       	adc	r26, r1
 df4:	68 0f       	add	r22, r24
 df6:	79 1f       	adc	r23, r25
 df8:	8a 1f       	adc	r24, r26
 dfa:	91 1d       	adc	r25, r1
 dfc:	a1 1d       	adc	r26, r1
 dfe:	6a 0f       	add	r22, r26
 e00:	71 1d       	adc	r23, r1
 e02:	81 1d       	adc	r24, r1
 e04:	91 1d       	adc	r25, r1
 e06:	a1 1d       	adc	r26, r1
 e08:	20 d0       	rcall	.+64     	; 0xe4a <__ultoa_invert+0x84>
 e0a:	09 f4       	brne	.+2      	; 0xe0e <__ultoa_invert+0x48>
 e0c:	68 94       	set
 e0e:	3f 91       	pop	r19
 e10:	2a e0       	ldi	r18, 0x0A	; 10
 e12:	26 9f       	mul	r18, r22
 e14:	11 24       	eor	r1, r1
 e16:	30 19       	sub	r19, r0
 e18:	30 5d       	subi	r19, 0xD0	; 208
 e1a:	31 93       	st	Z+, r19
 e1c:	de f6       	brtc	.-74     	; 0xdd4 <__ultoa_invert+0xe>
 e1e:	cf 01       	movw	r24, r30
 e20:	08 95       	ret
 e22:	46 2f       	mov	r20, r22
 e24:	47 70       	andi	r20, 0x07	; 7
 e26:	40 5d       	subi	r20, 0xD0	; 208
 e28:	41 93       	st	Z+, r20
 e2a:	b3 e0       	ldi	r27, 0x03	; 3
 e2c:	0f d0       	rcall	.+30     	; 0xe4c <__ultoa_invert+0x86>
 e2e:	c9 f7       	brne	.-14     	; 0xe22 <__ultoa_invert+0x5c>
 e30:	f6 cf       	rjmp	.-20     	; 0xe1e <__ultoa_invert+0x58>
 e32:	46 2f       	mov	r20, r22
 e34:	4f 70       	andi	r20, 0x0F	; 15
 e36:	40 5d       	subi	r20, 0xD0	; 208
 e38:	4a 33       	cpi	r20, 0x3A	; 58
 e3a:	18 f0       	brcs	.+6      	; 0xe42 <__ultoa_invert+0x7c>
 e3c:	49 5d       	subi	r20, 0xD9	; 217
 e3e:	31 fd       	sbrc	r19, 1
 e40:	40 52       	subi	r20, 0x20	; 32
 e42:	41 93       	st	Z+, r20
 e44:	02 d0       	rcall	.+4      	; 0xe4a <__ultoa_invert+0x84>
 e46:	a9 f7       	brne	.-22     	; 0xe32 <__ultoa_invert+0x6c>
 e48:	ea cf       	rjmp	.-44     	; 0xe1e <__ultoa_invert+0x58>
 e4a:	b4 e0       	ldi	r27, 0x04	; 4
 e4c:	a6 95       	lsr	r26
 e4e:	97 95       	ror	r25
 e50:	87 95       	ror	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	ba 95       	dec	r27
 e58:	c9 f7       	brne	.-14     	; 0xe4c <__ultoa_invert+0x86>
 e5a:	00 97       	sbiw	r24, 0x00	; 0
 e5c:	61 05       	cpc	r22, r1
 e5e:	71 05       	cpc	r23, r1
 e60:	08 95       	ret
 e62:	9b 01       	movw	r18, r22
 e64:	ac 01       	movw	r20, r24
 e66:	0a 2e       	mov	r0, r26
 e68:	06 94       	lsr	r0
 e6a:	57 95       	ror	r21
 e6c:	47 95       	ror	r20
 e6e:	37 95       	ror	r19
 e70:	27 95       	ror	r18
 e72:	ba 95       	dec	r27
 e74:	c9 f7       	brne	.-14     	; 0xe68 <__ultoa_invert+0xa2>
 e76:	62 0f       	add	r22, r18
 e78:	73 1f       	adc	r23, r19
 e7a:	84 1f       	adc	r24, r20
 e7c:	95 1f       	adc	r25, r21
 e7e:	a0 1d       	adc	r26, r0
 e80:	08 95       	ret

00000e82 <__prologue_saves__>:
 e82:	2f 92       	push	r2
 e84:	3f 92       	push	r3
 e86:	4f 92       	push	r4
 e88:	5f 92       	push	r5
 e8a:	6f 92       	push	r6
 e8c:	7f 92       	push	r7
 e8e:	8f 92       	push	r8
 e90:	9f 92       	push	r9
 e92:	af 92       	push	r10
 e94:	bf 92       	push	r11
 e96:	cf 92       	push	r12
 e98:	df 92       	push	r13
 e9a:	ef 92       	push	r14
 e9c:	ff 92       	push	r15
 e9e:	0f 93       	push	r16
 ea0:	1f 93       	push	r17
 ea2:	cf 93       	push	r28
 ea4:	df 93       	push	r29
 ea6:	cd b7       	in	r28, 0x3d	; 61
 ea8:	de b7       	in	r29, 0x3e	; 62
 eaa:	ca 1b       	sub	r28, r26
 eac:	db 0b       	sbc	r29, r27
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	f8 94       	cli
 eb2:	de bf       	out	0x3e, r29	; 62
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	cd bf       	out	0x3d, r28	; 61
 eb8:	09 94       	ijmp

00000eba <__epilogue_restores__>:
 eba:	2a 88       	ldd	r2, Y+18	; 0x12
 ebc:	39 88       	ldd	r3, Y+17	; 0x11
 ebe:	48 88       	ldd	r4, Y+16	; 0x10
 ec0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec8:	9b 84       	ldd	r9, Y+11	; 0x0b
 eca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ecc:	b9 84       	ldd	r11, Y+9	; 0x09
 ece:	c8 84       	ldd	r12, Y+8	; 0x08
 ed0:	df 80       	ldd	r13, Y+7	; 0x07
 ed2:	ee 80       	ldd	r14, Y+6	; 0x06
 ed4:	fd 80       	ldd	r15, Y+5	; 0x05
 ed6:	0c 81       	ldd	r16, Y+4	; 0x04
 ed8:	1b 81       	ldd	r17, Y+3	; 0x03
 eda:	aa 81       	ldd	r26, Y+2	; 0x02
 edc:	b9 81       	ldd	r27, Y+1	; 0x01
 ede:	ce 0f       	add	r28, r30
 ee0:	d1 1d       	adc	r29, r1
 ee2:	0f b6       	in	r0, 0x3f	; 63
 ee4:	f8 94       	cli
 ee6:	de bf       	out	0x3e, r29	; 62
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	cd bf       	out	0x3d, r28	; 61
 eec:	ed 01       	movw	r28, r26
 eee:	08 95       	ret

00000ef0 <_exit>:
 ef0:	f8 94       	cli

00000ef2 <__stop_program>:
 ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__stop_program>

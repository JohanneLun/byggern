
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000f60  00000ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080018a  0080018a  0000107e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a1f  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3c  00000000  00000000  00002d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c00  00000000  00000000  00003975  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000584  00000000  00000000  00004578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ff  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e79  00000000  00000000  000050fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e6       	ldi	r30, 0x60	; 96
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 38       	cpi	r26, 0x8A	; 138
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e8       	ldi	r26, 0x8A	; 138
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 39       	cpi	r26, 0x9A	; 154
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  a6:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e3 ef       	ldi	r30, 0xF3	; 243
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <ADC_read+0x4>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <ADC_read+0xa>
  e0:	00 00       	nop
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	_delay_ms(2);
	//Choose channel in ADC
	*adc = 0x04 | channel;
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  e8:	80 91 8d 01 	lds	r24, 0x018D
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <ADC_read+0x12>
	//ADC_ready = 0; 
	return *adc;
  f0:	80 91 00 14 	lds	r24, 0x1400
}
  f4:	08 95       	ret

000000f6 <__vector_3>:


ISR(INT2_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
	ADC_ready = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 8d 01 	sts	0x018D, r24
	//wake up the CPU
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <CAN_init>:
extern volatile uint8_t rx_int_flag; 

uint8_t last_joystick_pos_x = 0;
uint8_t last_slider_pos_r = 0;

int CAN_init(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 11e:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP2515_init>
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <CAN_init+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <CAN_init+0x18>
 12c:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <MCP2515_read>
 134:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	80 7e       	andi	r24, 0xE0	; 224
 13a:	80 38       	cpi	r24, 0x80	; 128
 13c:	39 f0       	breq	.+14     	; 0x14c <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 af 04 	call	0x95e	; 0x95e <puts>
		return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	1f c0       	rjmp	.+62     	; 0x18a <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	60 e6       	ldi	r22, 0x60	; 96
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 ee       	ldi	r22, 0xE0	; 224
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <MCP2515_read>
 170:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 7e       	andi	r24, 0xE0	; 224
 176:	39 f0       	breq	.+14     	; 0x186 <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 af 04 	call	0x95e	; 0x95e <puts>
		return 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <CAN_init+0x76>
	}
	
	return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
}
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <MCP2515_read>
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1b6:	0e 94 c9 00 	call	0x192	; 0x192 <CAN_transmit_complete>
 1ba:	89 2b       	or	r24, r25
 1bc:	d9 f1       	breq	.+118    	; 0x234 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1be:	f7 01       	movw	r30, r14
 1c0:	60 81       	ld	r22, Z
 1c2:	66 95       	lsr	r22
 1c4:	66 95       	lsr	r22
 1c6:	66 95       	lsr	r22
 1c8:	81 e3       	ldi	r24, 0x31	; 49
 1ca:	0e 94 05 02 	call	0x40a	; 0x40a <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1ce:	f7 01       	movw	r30, r14
 1d0:	60 81       	ld	r22, Z
 1d2:	62 95       	swap	r22
 1d4:	66 0f       	add	r22, r22
 1d6:	60 7e       	andi	r22, 0xE0	; 224
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 05 02 	call	0x40a	; 0x40a <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1de:	f7 01       	movw	r30, r14
 1e0:	62 81       	ldd	r22, Z+2	; 0x02
 1e2:	6f 70       	andi	r22, 0x0F	; 15
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	0e 94 05 02 	call	0x40a	; 0x40a <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1ea:	f7 01       	movw	r30, r14
 1ec:	82 81       	ldd	r24, Z+2	; 0x02
 1ee:	93 81       	ldd	r25, Z+3	; 0x03
 1f0:	89 30       	cpi	r24, 0x09	; 9
 1f2:	91 05       	cpc	r25, r1
 1f4:	54 f0       	brlt	.+20     	; 0x20a <CAN_send+0x62>
			msg->length = 8;
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	87 01       	movw	r16, r14
 200:	0c 5f       	subi	r16, 0xFC	; 252
 202:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	04 c0       	rjmp	.+8      	; 0x212 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	bc f3       	brlt	.-18     	; 0x1fe <CAN_send+0x56>
 210:	0e c0       	rjmp	.+28     	; 0x22e <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 212:	f8 01       	movw	r30, r16
 214:	61 91       	ld	r22, Z+
 216:	8f 01       	movw	r16, r30
 218:	8c 2f       	mov	r24, r28
 21a:	8a 5c       	subi	r24, 0xCA	; 202
 21c:	0e 94 05 02 	call	0x40a	; 0x40a <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	f7 01       	movw	r30, r14
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	33 81       	ldd	r19, Z+3	; 0x03
 228:	c2 17       	cp	r28, r18
 22a:	d3 07       	cpc	r29, r19
 22c:	94 f3       	brlt	.-28     	; 0x212 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 19 02 	call	0x432	; 0x432 <MCP2515_request_to_send>
		
	}
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	8c e2       	ldi	r24, 0x2C	; 44
 252:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_bit_modify>
	rx_int_flag = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 8c 01 	sts	0x018C, r24
 25c:	08 95       	ret

0000025e <send_CAN_msg>:
	
	return msg;
}


void send_CAN_msg(void){
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	2c 97       	sbiw	r28, 0x0c	; 12
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
	uint8_t joy_pos_x = joystick_read(CHANNEL_X);
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 5f 02 	call	0x4be	; 0x4be <joystick_read>
 28e:	5c 01       	movw	r10, r24
	
	uint8_t joy_pos_y = joystick_read(CHANNEL_Y);
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 5f 02 	call	0x4be	; 0x4be <joystick_read>
 298:	4c 01       	movw	r8, r24
	uint8_t slider_pos_r = slider_read(SLIDER_R);
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <slider_read>
 2a2:	6c 01       	movw	r12, r24
	uint8_t slider_pos_l = slider_read(SLIDER_L);
 2a4:	87 e0       	ldi	r24, 0x07	; 7
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <slider_read>
 2ac:	7c 01       	movw	r14, r24
	
	printf("x_pos %d \t ", joy_pos_x);
 2ae:	85 01       	movw	r16, r10
 2b0:	11 27       	eor	r17, r17
 2b2:	1f 93       	push	r17
 2b4:	0f 93       	push	r16
 2b6:	82 e5       	ldi	r24, 0x52	; 82
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	9f 93       	push	r25
 2bc:	8f 93       	push	r24
 2be:	0e 94 9b 04 	call	0x936	; 0x936 <printf>
	printf("y_pos %d \t ", joy_pos_y);
 2c2:	c4 01       	movw	r24, r8
 2c4:	99 27       	eor	r25, r25
 2c6:	9f 93       	push	r25
 2c8:	8f 93       	push	r24
 2ca:	2e e5       	ldi	r18, 0x5E	; 94
 2cc:	31 e0       	ldi	r19, 0x01	; 1
 2ce:	3f 93       	push	r19
 2d0:	2f 93       	push	r18
 2d2:	0e 94 9b 04 	call	0x936	; 0x936 <printf>
	printf("slider_l_pos %d \t ", slider_pos_l);
 2d6:	c7 01       	movw	r24, r14
 2d8:	99 27       	eor	r25, r25
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	8a e6       	ldi	r24, 0x6A	; 106
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	0e 94 9b 04 	call	0x936	; 0x936 <printf>
	printf("slider %d \n", slider_pos_r);
 2ea:	76 01       	movw	r14, r12
 2ec:	ff 24       	eor	r15, r15
 2ee:	ff 92       	push	r15
 2f0:	ef 92       	push	r14
 2f2:	8d e7       	ldi	r24, 0x7D	; 125
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	0e 94 9b 04 	call	0x936	; 0x936 <printf>
	if(abs(joy_pos_x - last_joystick_pos_x) > 10 || abs(slider_pos_r - last_slider_pos_r) > 10){
 2fe:	80 91 8b 01 	lds	r24, 0x018B
 302:	08 1b       	sub	r16, r24
 304:	11 09       	sbc	r17, r1
 306:	c8 01       	movw	r24, r16
 308:	99 23       	and	r25, r25
 30a:	24 f4       	brge	.+8      	; 0x314 <send_CAN_msg+0xb6>
 30c:	88 27       	eor	r24, r24
 30e:	99 27       	eor	r25, r25
 310:	80 1b       	sub	r24, r16
 312:	91 0b       	sbc	r25, r17
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	0b 97       	sbiw	r24, 0x0b	; 11
 320:	6c f4       	brge	.+26     	; 0x33c <send_CAN_msg+0xde>
 322:	80 91 8a 01 	lds	r24, 0x018A
 326:	e8 1a       	sub	r14, r24
 328:	f1 08       	sbc	r15, r1
 32a:	c7 01       	movw	r24, r14
 32c:	99 23       	and	r25, r25
 32e:	24 f4       	brge	.+8      	; 0x338 <send_CAN_msg+0xda>
 330:	88 27       	eor	r24, r24
 332:	99 27       	eor	r25, r25
 334:	8e 19       	sub	r24, r14
 336:	9f 09       	sbc	r25, r15
 338:	0b 97       	sbiw	r24, 0x0b	; 11
 33a:	84 f0       	brlt	.+32     	; 0x35c <send_CAN_msg+0xfe>
		Message msg;
		
		msg.length = 3;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9c 83       	std	Y+4, r25	; 0x04
 342:	8b 83       	std	Y+3, r24	; 0x03
		msg.data[0] = joy_pos_x;
 344:	ad 82       	std	Y+5, r10	; 0x05
		msg.data[1] = slider_pos_r;
 346:	ce 82       	std	Y+6, r12	; 0x06
		msg.ID = 0;
 348:	1a 82       	std	Y+2, r1	; 0x02
 34a:	19 82       	std	Y+1, r1	; 0x01
		
		CAN_send(&msg);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CAN_send>
		last_joystick_pos_x = joy_pos_x;
 354:	a0 92 8b 01 	sts	0x018B, r10
		last_slider_pos_r = slider_pos_r;
 358:	c0 92 8a 01 	sts	0x018A, r12
	}
}
 35c:	2c 96       	adiw	r28, 0x0c	; 12
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	9f 90       	pop	r9
 37e:	8f 90       	pop	r8
 380:	08 95       	ret

00000382 <__vector_1>:

ISR(INT0_vect){
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	2f 93       	push	r18
 38e:	3f 93       	push	r19
 390:	4f 93       	push	r20
 392:	5f 93       	push	r21
 394:	6f 93       	push	r22
 396:	7f 93       	push	r23
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	ef 93       	push	r30
 3a2:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 3a4:	0e 94 21 01 	call	0x242	; 0x242 <CAN_int_vect>
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 3ca:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 3ce:	80 ec       	ldi	r24, 0xC0	; 192
 3d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_deactivate_SS();
 3d4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
 3d8:	08 95       	ret

000003da <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 3da:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 3de:	0e 94 e5 01 	call	0x3ca	; 0x3ca <MCP2515_reset>
 3e2:	08 95       	ret

000003e4 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 3e8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(address);
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	data = SPI_read_write(0x00);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
 3fe:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 400:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
	return data;
}
 404:	8c 2f       	mov	r24, r28
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	d8 2f       	mov	r29, r24
 410:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 412:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(address);
 41c:	8d 2f       	mov	r24, r29
 41e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(data);
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_deactivate_SS();
 428:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 432:	cf 93       	push	r28
 434:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 436:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_activate_SS>
	if (command <= 7){
 43a:	c8 30       	cpi	r28, 0x08	; 8
 43c:	28 f4       	brcc	.+10     	; 0x448 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 43e:	8c 2f       	mov	r24, r28
 440:	80 68       	ori	r24, 0x80	; 128
 442:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
 446:	03 c0       	rjmp	.+6      	; 0x44e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	}
	SPI_deactivate_SS();
 44e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
}
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	18 2f       	mov	r17, r24
 45e:	d6 2f       	mov	r29, r22
 460:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 462:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(address);
 46c:	81 2f       	mov	r24, r17
 46e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(mask_byte);
 472:	8d 2f       	mov	r24, r29
 474:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_read_write(data_byte);
 478:	8c 2f       	mov	r24, r28
 47a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_read_write>
	SPI_deactivate_SS();
 47e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	08 95       	ret

0000048a <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 48a:	5d 9b       	sbis	0x0b, 5	; 11
 48c:	fe cf       	rjmp	.-4      	; 0x48a <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 48e:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret

00000496 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 496:	5f 9b       	sbis	0x0b, 7	; 11
 498:	fe cf       	rjmp	.-4      	; 0x496 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 49a:	8c b1       	in	r24, 0x0c	; 12
}
 49c:	08 95       	ret

0000049e <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 49e:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 4a0:	88 e1       	ldi	r24, 0x18	; 24
 4a2:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 4a4:	6b e4       	ldi	r22, 0x4B	; 75
 4a6:	72 e0       	ldi	r23, 0x02	; 2
 4a8:	85 e4       	ldi	r24, 0x45	; 69
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fdevopen>
 4b0:	90 93 8f 01 	sts	0x018F, r25
 4b4:	80 93 8e 01 	sts	0x018E, r24
	
	return 0; 
}
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	08 95       	ret

000004be <joystick_read>:



int joystick_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4be:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <slider_read>:


int slider_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret

000004ce <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 4ce:	e0 91 06 01 	lds	r30, 0x0106
 4d2:	f0 91 07 01 	lds	r31, 0x0107
 4d6:	8e ea       	ldi	r24, 0xAE	; 174
 4d8:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 4da:	e0 91 06 01 	lds	r30, 0x0106
 4de:	f0 91 07 01 	lds	r31, 0x0107
 4e2:	81 ea       	ldi	r24, 0xA1	; 161
 4e4:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 4e6:	e0 91 06 01 	lds	r30, 0x0106
 4ea:	f0 91 07 01 	lds	r31, 0x0107
 4ee:	8a ed       	ldi	r24, 0xDA	; 218
 4f0:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 4f2:	e0 91 06 01 	lds	r30, 0x0106
 4f6:	f0 91 07 01 	lds	r31, 0x0107
 4fa:	82 e1       	ldi	r24, 0x12	; 18
 4fc:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 4fe:	e0 91 06 01 	lds	r30, 0x0106
 502:	f0 91 07 01 	lds	r31, 0x0107
 506:	88 ec       	ldi	r24, 0xC8	; 200
 508:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 50a:	e0 91 06 01 	lds	r30, 0x0106
 50e:	f0 91 07 01 	lds	r31, 0x0107
 512:	88 ea       	ldi	r24, 0xA8	; 168
 514:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 516:	e0 91 06 01 	lds	r30, 0x0106
 51a:	f0 91 07 01 	lds	r31, 0x0107
 51e:	8f e3       	ldi	r24, 0x3F	; 63
 520:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 522:	e0 91 06 01 	lds	r30, 0x0106
 526:	f0 91 07 01 	lds	r31, 0x0107
 52a:	85 ed       	ldi	r24, 0xD5	; 213
 52c:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 52e:	e0 91 06 01 	lds	r30, 0x0106
 532:	f0 91 07 01 	lds	r31, 0x0107
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 53a:	e0 91 06 01 	lds	r30, 0x0106
 53e:	f0 91 07 01 	lds	r31, 0x0107
 542:	81 e8       	ldi	r24, 0x81	; 129
 544:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 546:	e0 91 06 01 	lds	r30, 0x0106
 54a:	f0 91 07 01 	lds	r31, 0x0107
 54e:	80 e5       	ldi	r24, 0x50	; 80
 550:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 552:	e0 91 06 01 	lds	r30, 0x0106
 556:	f0 91 07 01 	lds	r31, 0x0107
 55a:	89 ed       	ldi	r24, 0xD9	; 217
 55c:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 55e:	e0 91 06 01 	lds	r30, 0x0106
 562:	f0 91 07 01 	lds	r31, 0x0107
 566:	81 e2       	ldi	r24, 0x21	; 33
 568:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 56a:	e0 91 06 01 	lds	r30, 0x0106
 56e:	f0 91 07 01 	lds	r31, 0x0107
 572:	80 e2       	ldi	r24, 0x20	; 32
 574:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 576:	e0 91 06 01 	lds	r30, 0x0106
 57a:	f0 91 07 01 	lds	r31, 0x0107
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 582:	e0 91 06 01 	lds	r30, 0x0106
 586:	f0 91 07 01 	lds	r31, 0x0107
 58a:	8b ed       	ldi	r24, 0xDB	; 219
 58c:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 58e:	e0 91 06 01 	lds	r30, 0x0106
 592:	f0 91 07 01 	lds	r31, 0x0107
 596:	80 e3       	ldi	r24, 0x30	; 48
 598:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 59a:	e0 91 06 01 	lds	r30, 0x0106
 59e:	f0 91 07 01 	lds	r31, 0x0107
 5a2:	8d ea       	ldi	r24, 0xAD	; 173
 5a4:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 5a6:	e0 91 06 01 	lds	r30, 0x0106
 5aa:	f0 91 07 01 	lds	r31, 0x0107
 5ae:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 5b0:	e0 91 06 01 	lds	r30, 0x0106
 5b4:	f0 91 07 01 	lds	r31, 0x0107
 5b8:	84 ea       	ldi	r24, 0xA4	; 164
 5ba:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 5bc:	e0 91 06 01 	lds	r30, 0x0106
 5c0:	f0 91 07 01 	lds	r31, 0x0107
 5c4:	86 ea       	ldi	r24, 0xA6	; 166
 5c6:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 5c8:	e0 91 06 01 	lds	r30, 0x0106
 5cc:	f0 91 07 01 	lds	r31, 0x0107
 5d0:	8f ea       	ldi	r24, 0xAF	; 175
 5d2:	80 83       	st	Z, r24
 5d4:	08 95       	ret

000005d6 <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 5d6:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 5d8:	77 9b       	sbis	0x0e, 7	; 14
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <SPI_read_write+0x2>
	return SPDR;
 5dc:	8f b1       	in	r24, 0x0f	; 15
}
 5de:	08 95       	ret

000005e0 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 5e0:	c4 98       	cbi	0x18, 4	; 24
 5e2:	08 95       	ret

000005e4 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 5e4:	c4 9a       	sbi	0x18, 4	; 24
 5e6:	08 95       	ret

000005e8 <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 5e8:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 5ea:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/2
	set_bit(SPSR, SPI2X);
 5ec:	70 9a       	sbi	0x0e, 0	; 14
	
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 5ee:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 5f0:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 5f2:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 5f4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <SPI_deactivate_SS>
 5f8:	08 95       	ret

000005fa <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 5fa:	85 b7       	in	r24, 0x35	; 53
 5fc:	80 68       	ori	r24, 0x80	; 128
 5fe:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 600:	80 b7       	in	r24, 0x30	; 48
 602:	80 62       	ori	r24, 0x20	; 32
 604:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 606:	85 b7       	in	r24, 0x35	; 53
 608:	8e 7f       	andi	r24, 0xFE	; 254
 60a:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 60c:	85 b7       	in	r24, 0x35	; 53
 60e:	82 60       	ori	r24, 0x02	; 2
 610:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 612:	8b b7       	in	r24, 0x3b	; 59
 614:	80 64       	ori	r24, 0x40	; 64
 616:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 618:	8a 98       	cbi	0x11, 2	; 17
 61a:	08 95       	ret

0000061c <main>:
//volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 61c:	f8 94       	cli
	UART_init(31);
 61e:	8f e1       	ldi	r24, 0x1F	; 31
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 4f 02 	call	0x49e	; 0x49e <UART_init>
	register_init();
 626:	0e 94 fd 02 	call	0x5fa	; 0x5fa <register_init>
	oled_init();
 62a:	0e 94 67 02 	call	0x4ce	; 0x4ce <oled_init>
	ADC_init();
 62e:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	CAN_init();
 632:	0e 94 8a 00 	call	0x114	; 0x114 <CAN_init>
	//Enable global interrupts
	sei();
 636:	78 94       	sei
	

	
	while(1){
		
		send_CAN_msg();
 638:	0e 94 2f 01 	call	0x25e	; 0x25e <send_CAN_msg>
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	90 ef       	ldi	r25, 0xF0	; 240
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <main+0x24>
		//printf("X %d\n", ADC_read(CHANNEL_Y));
		
		
		
		
		if(ADC_ready){
 644:	80 91 8d 01 	lds	r24, 0x018D
 648:	88 23       	and	r24, r24
 64a:	b1 f3       	breq	.-20     	; 0x638 <main+0x1c>
			ADC_ready = 0;
 64c:	10 92 8d 01 	sts	0x018D, r1
 650:	f3 cf       	rjmp	.-26     	; 0x638 <main+0x1c>

00000652 <malloc>:
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	91 05       	cpc	r25, r1
 65a:	10 f4       	brcc	.+4      	; 0x660 <malloc+0xe>
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	e0 91 92 01 	lds	r30, 0x0192
 664:	f0 91 93 01 	lds	r31, 0x0193
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	a0 e0       	ldi	r26, 0x00	; 0
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	30 97       	sbiw	r30, 0x00	; 0
 672:	39 f1       	breq	.+78     	; 0x6c2 <malloc+0x70>
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	48 17       	cp	r20, r24
 67a:	59 07       	cpc	r21, r25
 67c:	b8 f0       	brcs	.+46     	; 0x6ac <malloc+0x5a>
 67e:	48 17       	cp	r20, r24
 680:	59 07       	cpc	r21, r25
 682:	71 f4       	brne	.+28     	; 0x6a0 <malloc+0x4e>
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	10 97       	sbiw	r26, 0x00	; 0
 68a:	29 f0       	breq	.+10     	; 0x696 <malloc+0x44>
 68c:	13 96       	adiw	r26, 0x03	; 3
 68e:	9c 93       	st	X, r25
 690:	8e 93       	st	-X, r24
 692:	12 97       	sbiw	r26, 0x02	; 2
 694:	2c c0       	rjmp	.+88     	; 0x6ee <malloc+0x9c>
 696:	90 93 93 01 	sts	0x0193, r25
 69a:	80 93 92 01 	sts	0x0192, r24
 69e:	27 c0       	rjmp	.+78     	; 0x6ee <malloc+0x9c>
 6a0:	21 15       	cp	r18, r1
 6a2:	31 05       	cpc	r19, r1
 6a4:	31 f0       	breq	.+12     	; 0x6b2 <malloc+0x60>
 6a6:	42 17       	cp	r20, r18
 6a8:	53 07       	cpc	r21, r19
 6aa:	18 f0       	brcs	.+6      	; 0x6b2 <malloc+0x60>
 6ac:	a9 01       	movw	r20, r18
 6ae:	db 01       	movw	r26, r22
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <malloc+0x62>
 6b2:	ef 01       	movw	r28, r30
 6b4:	9a 01       	movw	r18, r20
 6b6:	bd 01       	movw	r22, r26
 6b8:	df 01       	movw	r26, r30
 6ba:	02 80       	ldd	r0, Z+2	; 0x02
 6bc:	f3 81       	ldd	r31, Z+3	; 0x03
 6be:	e0 2d       	mov	r30, r0
 6c0:	d7 cf       	rjmp	.-82     	; 0x670 <malloc+0x1e>
 6c2:	21 15       	cp	r18, r1
 6c4:	31 05       	cpc	r19, r1
 6c6:	f9 f0       	breq	.+62     	; 0x706 <malloc+0xb4>
 6c8:	28 1b       	sub	r18, r24
 6ca:	39 0b       	sbc	r19, r25
 6cc:	24 30       	cpi	r18, 0x04	; 4
 6ce:	31 05       	cpc	r19, r1
 6d0:	80 f4       	brcc	.+32     	; 0x6f2 <malloc+0xa0>
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	9b 81       	ldd	r25, Y+3	; 0x03
 6d6:	61 15       	cp	r22, r1
 6d8:	71 05       	cpc	r23, r1
 6da:	21 f0       	breq	.+8      	; 0x6e4 <malloc+0x92>
 6dc:	fb 01       	movw	r30, r22
 6de:	93 83       	std	Z+3, r25	; 0x03
 6e0:	82 83       	std	Z+2, r24	; 0x02
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <malloc+0x9a>
 6e4:	90 93 93 01 	sts	0x0193, r25
 6e8:	80 93 92 01 	sts	0x0192, r24
 6ec:	fe 01       	movw	r30, r28
 6ee:	32 96       	adiw	r30, 0x02	; 2
 6f0:	44 c0       	rjmp	.+136    	; 0x77a <malloc+0x128>
 6f2:	fe 01       	movw	r30, r28
 6f4:	e2 0f       	add	r30, r18
 6f6:	f3 1f       	adc	r31, r19
 6f8:	81 93       	st	Z+, r24
 6fa:	91 93       	st	Z+, r25
 6fc:	22 50       	subi	r18, 0x02	; 2
 6fe:	31 09       	sbc	r19, r1
 700:	39 83       	std	Y+1, r19	; 0x01
 702:	28 83       	st	Y, r18
 704:	3a c0       	rjmp	.+116    	; 0x77a <malloc+0x128>
 706:	20 91 90 01 	lds	r18, 0x0190
 70a:	30 91 91 01 	lds	r19, 0x0191
 70e:	23 2b       	or	r18, r19
 710:	41 f4       	brne	.+16     	; 0x722 <malloc+0xd0>
 712:	20 91 02 01 	lds	r18, 0x0102
 716:	30 91 03 01 	lds	r19, 0x0103
 71a:	30 93 91 01 	sts	0x0191, r19
 71e:	20 93 90 01 	sts	0x0190, r18
 722:	20 91 00 01 	lds	r18, 0x0100
 726:	30 91 01 01 	lds	r19, 0x0101
 72a:	21 15       	cp	r18, r1
 72c:	31 05       	cpc	r19, r1
 72e:	41 f4       	brne	.+16     	; 0x740 <malloc+0xee>
 730:	2d b7       	in	r18, 0x3d	; 61
 732:	3e b7       	in	r19, 0x3e	; 62
 734:	40 91 04 01 	lds	r20, 0x0104
 738:	50 91 05 01 	lds	r21, 0x0105
 73c:	24 1b       	sub	r18, r20
 73e:	35 0b       	sbc	r19, r21
 740:	e0 91 90 01 	lds	r30, 0x0190
 744:	f0 91 91 01 	lds	r31, 0x0191
 748:	e2 17       	cp	r30, r18
 74a:	f3 07       	cpc	r31, r19
 74c:	a0 f4       	brcc	.+40     	; 0x776 <malloc+0x124>
 74e:	2e 1b       	sub	r18, r30
 750:	3f 0b       	sbc	r19, r31
 752:	28 17       	cp	r18, r24
 754:	39 07       	cpc	r19, r25
 756:	78 f0       	brcs	.+30     	; 0x776 <malloc+0x124>
 758:	ac 01       	movw	r20, r24
 75a:	4e 5f       	subi	r20, 0xFE	; 254
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	24 17       	cp	r18, r20
 760:	35 07       	cpc	r19, r21
 762:	48 f0       	brcs	.+18     	; 0x776 <malloc+0x124>
 764:	4e 0f       	add	r20, r30
 766:	5f 1f       	adc	r21, r31
 768:	50 93 91 01 	sts	0x0191, r21
 76c:	40 93 90 01 	sts	0x0190, r20
 770:	81 93       	st	Z+, r24
 772:	91 93       	st	Z+, r25
 774:	02 c0       	rjmp	.+4      	; 0x77a <malloc+0x128>
 776:	e0 e0       	ldi	r30, 0x00	; 0
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	cf 01       	movw	r24, r30
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <free>:
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	09 f4       	brne	.+2      	; 0x78c <free+0xa>
 78a:	87 c0       	rjmp	.+270    	; 0x89a <free+0x118>
 78c:	fc 01       	movw	r30, r24
 78e:	32 97       	sbiw	r30, 0x02	; 2
 790:	13 82       	std	Z+3, r1	; 0x03
 792:	12 82       	std	Z+2, r1	; 0x02
 794:	c0 91 92 01 	lds	r28, 0x0192
 798:	d0 91 93 01 	lds	r29, 0x0193
 79c:	20 97       	sbiw	r28, 0x00	; 0
 79e:	81 f4       	brne	.+32     	; 0x7c0 <free+0x3e>
 7a0:	20 81       	ld	r18, Z
 7a2:	31 81       	ldd	r19, Z+1	; 0x01
 7a4:	28 0f       	add	r18, r24
 7a6:	39 1f       	adc	r19, r25
 7a8:	80 91 90 01 	lds	r24, 0x0190
 7ac:	90 91 91 01 	lds	r25, 0x0191
 7b0:	82 17       	cp	r24, r18
 7b2:	93 07       	cpc	r25, r19
 7b4:	79 f5       	brne	.+94     	; 0x814 <free+0x92>
 7b6:	f0 93 91 01 	sts	0x0191, r31
 7ba:	e0 93 90 01 	sts	0x0190, r30
 7be:	6d c0       	rjmp	.+218    	; 0x89a <free+0x118>
 7c0:	de 01       	movw	r26, r28
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	ae 17       	cp	r26, r30
 7c8:	bf 07       	cpc	r27, r31
 7ca:	50 f4       	brcc	.+20     	; 0x7e0 <free+0x5e>
 7cc:	12 96       	adiw	r26, 0x02	; 2
 7ce:	4d 91       	ld	r20, X+
 7d0:	5c 91       	ld	r21, X
 7d2:	13 97       	sbiw	r26, 0x03	; 3
 7d4:	9d 01       	movw	r18, r26
 7d6:	41 15       	cp	r20, r1
 7d8:	51 05       	cpc	r21, r1
 7da:	09 f1       	breq	.+66     	; 0x81e <free+0x9c>
 7dc:	da 01       	movw	r26, r20
 7de:	f3 cf       	rjmp	.-26     	; 0x7c6 <free+0x44>
 7e0:	b3 83       	std	Z+3, r27	; 0x03
 7e2:	a2 83       	std	Z+2, r26	; 0x02
 7e4:	40 81       	ld	r20, Z
 7e6:	51 81       	ldd	r21, Z+1	; 0x01
 7e8:	84 0f       	add	r24, r20
 7ea:	95 1f       	adc	r25, r21
 7ec:	8a 17       	cp	r24, r26
 7ee:	9b 07       	cpc	r25, r27
 7f0:	71 f4       	brne	.+28     	; 0x80e <free+0x8c>
 7f2:	8d 91       	ld	r24, X+
 7f4:	9c 91       	ld	r25, X
 7f6:	11 97       	sbiw	r26, 0x01	; 1
 7f8:	84 0f       	add	r24, r20
 7fa:	95 1f       	adc	r25, r21
 7fc:	02 96       	adiw	r24, 0x02	; 2
 7fe:	91 83       	std	Z+1, r25	; 0x01
 800:	80 83       	st	Z, r24
 802:	12 96       	adiw	r26, 0x02	; 2
 804:	8d 91       	ld	r24, X+
 806:	9c 91       	ld	r25, X
 808:	13 97       	sbiw	r26, 0x03	; 3
 80a:	93 83       	std	Z+3, r25	; 0x03
 80c:	82 83       	std	Z+2, r24	; 0x02
 80e:	21 15       	cp	r18, r1
 810:	31 05       	cpc	r19, r1
 812:	29 f4       	brne	.+10     	; 0x81e <free+0x9c>
 814:	f0 93 93 01 	sts	0x0193, r31
 818:	e0 93 92 01 	sts	0x0192, r30
 81c:	3e c0       	rjmp	.+124    	; 0x89a <free+0x118>
 81e:	d9 01       	movw	r26, r18
 820:	13 96       	adiw	r26, 0x03	; 3
 822:	fc 93       	st	X, r31
 824:	ee 93       	st	-X, r30
 826:	12 97       	sbiw	r26, 0x02	; 2
 828:	4d 91       	ld	r20, X+
 82a:	5d 91       	ld	r21, X+
 82c:	a4 0f       	add	r26, r20
 82e:	b5 1f       	adc	r27, r21
 830:	ea 17       	cp	r30, r26
 832:	fb 07       	cpc	r31, r27
 834:	79 f4       	brne	.+30     	; 0x854 <free+0xd2>
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	84 0f       	add	r24, r20
 83c:	95 1f       	adc	r25, r21
 83e:	02 96       	adiw	r24, 0x02	; 2
 840:	d9 01       	movw	r26, r18
 842:	11 96       	adiw	r26, 0x01	; 1
 844:	9c 93       	st	X, r25
 846:	8e 93       	st	-X, r24
 848:	82 81       	ldd	r24, Z+2	; 0x02
 84a:	93 81       	ldd	r25, Z+3	; 0x03
 84c:	13 96       	adiw	r26, 0x03	; 3
 84e:	9c 93       	st	X, r25
 850:	8e 93       	st	-X, r24
 852:	12 97       	sbiw	r26, 0x02	; 2
 854:	e0 e0       	ldi	r30, 0x00	; 0
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	9b 81       	ldd	r25, Y+3	; 0x03
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	19 f0       	breq	.+6      	; 0x866 <free+0xe4>
 860:	fe 01       	movw	r30, r28
 862:	ec 01       	movw	r28, r24
 864:	f9 cf       	rjmp	.-14     	; 0x858 <free+0xd6>
 866:	ce 01       	movw	r24, r28
 868:	02 96       	adiw	r24, 0x02	; 2
 86a:	28 81       	ld	r18, Y
 86c:	39 81       	ldd	r19, Y+1	; 0x01
 86e:	82 0f       	add	r24, r18
 870:	93 1f       	adc	r25, r19
 872:	20 91 90 01 	lds	r18, 0x0190
 876:	30 91 91 01 	lds	r19, 0x0191
 87a:	28 17       	cp	r18, r24
 87c:	39 07       	cpc	r19, r25
 87e:	69 f4       	brne	.+26     	; 0x89a <free+0x118>
 880:	30 97       	sbiw	r30, 0x00	; 0
 882:	29 f4       	brne	.+10     	; 0x88e <free+0x10c>
 884:	10 92 93 01 	sts	0x0193, r1
 888:	10 92 92 01 	sts	0x0192, r1
 88c:	02 c0       	rjmp	.+4      	; 0x892 <free+0x110>
 88e:	13 82       	std	Z+3, r1	; 0x03
 890:	12 82       	std	Z+2, r1	; 0x02
 892:	d0 93 91 01 	sts	0x0191, r29
 896:	c0 93 90 01 	sts	0x0190, r28
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <fdevopen>:
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	ec 01       	movw	r28, r24
 8aa:	8b 01       	movw	r16, r22
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	31 f4       	brne	.+12     	; 0x8bc <fdevopen+0x1c>
 8b0:	61 15       	cp	r22, r1
 8b2:	71 05       	cpc	r23, r1
 8b4:	19 f4       	brne	.+6      	; 0x8bc <fdevopen+0x1c>
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	38 c0       	rjmp	.+112    	; 0x92c <fdevopen+0x8c>
 8bc:	6e e0       	ldi	r22, 0x0E	; 14
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <calloc>
 8c8:	fc 01       	movw	r30, r24
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	a1 f3       	breq	.-24     	; 0x8b6 <fdevopen+0x16>
 8ce:	80 e8       	ldi	r24, 0x80	; 128
 8d0:	83 83       	std	Z+3, r24	; 0x03
 8d2:	01 15       	cp	r16, r1
 8d4:	11 05       	cpc	r17, r1
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <fdevopen+0x54>
 8d8:	13 87       	std	Z+11, r17	; 0x0b
 8da:	02 87       	std	Z+10, r16	; 0x0a
 8dc:	81 e8       	ldi	r24, 0x81	; 129
 8de:	83 83       	std	Z+3, r24	; 0x03
 8e0:	80 91 94 01 	lds	r24, 0x0194
 8e4:	90 91 95 01 	lds	r25, 0x0195
 8e8:	89 2b       	or	r24, r25
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <fdevopen+0x54>
 8ec:	f0 93 95 01 	sts	0x0195, r31
 8f0:	e0 93 94 01 	sts	0x0194, r30
 8f4:	20 97       	sbiw	r28, 0x00	; 0
 8f6:	c9 f0       	breq	.+50     	; 0x92a <fdevopen+0x8a>
 8f8:	d1 87       	std	Z+9, r29	; 0x09
 8fa:	c0 87       	std	Z+8, r28	; 0x08
 8fc:	83 81       	ldd	r24, Z+3	; 0x03
 8fe:	82 60       	ori	r24, 0x02	; 2
 900:	83 83       	std	Z+3, r24	; 0x03
 902:	80 91 96 01 	lds	r24, 0x0196
 906:	90 91 97 01 	lds	r25, 0x0197
 90a:	89 2b       	or	r24, r25
 90c:	71 f4       	brne	.+28     	; 0x92a <fdevopen+0x8a>
 90e:	f0 93 97 01 	sts	0x0197, r31
 912:	e0 93 96 01 	sts	0x0196, r30
 916:	80 91 98 01 	lds	r24, 0x0198
 91a:	90 91 99 01 	lds	r25, 0x0199
 91e:	89 2b       	or	r24, r25
 920:	21 f4       	brne	.+8      	; 0x92a <fdevopen+0x8a>
 922:	f0 93 99 01 	sts	0x0199, r31
 926:	e0 93 98 01 	sts	0x0198, r30
 92a:	cf 01       	movw	r24, r30
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	08 95       	ret

00000936 <printf>:
 936:	a0 e0       	ldi	r26, 0x00	; 0
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	e1 ea       	ldi	r30, 0xA1	; 161
 93c:	f4 e0       	ldi	r31, 0x04	; 4
 93e:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__prologue_saves__+0x20>
 942:	fe 01       	movw	r30, r28
 944:	35 96       	adiw	r30, 0x05	; 5
 946:	61 91       	ld	r22, Z+
 948:	71 91       	ld	r23, Z+
 94a:	af 01       	movw	r20, r30
 94c:	80 91 96 01 	lds	r24, 0x0196
 950:	90 91 97 01 	lds	r25, 0x0197
 954:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vfprintf>
 958:	e2 e0       	ldi	r30, 0x02	; 2
 95a:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__epilogue_restores__+0x20>

0000095e <puts>:
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	e0 91 96 01 	lds	r30, 0x0196
 96a:	f0 91 97 01 	lds	r31, 0x0197
 96e:	23 81       	ldd	r18, Z+3	; 0x03
 970:	21 ff       	sbrs	r18, 1
 972:	1b c0       	rjmp	.+54     	; 0x9aa <puts+0x4c>
 974:	ec 01       	movw	r28, r24
 976:	00 e0       	ldi	r16, 0x00	; 0
 978:	10 e0       	ldi	r17, 0x00	; 0
 97a:	89 91       	ld	r24, Y+
 97c:	60 91 96 01 	lds	r22, 0x0196
 980:	70 91 97 01 	lds	r23, 0x0197
 984:	db 01       	movw	r26, r22
 986:	18 96       	adiw	r26, 0x08	; 8
 988:	ed 91       	ld	r30, X+
 98a:	fc 91       	ld	r31, X
 98c:	19 97       	sbiw	r26, 0x09	; 9
 98e:	88 23       	and	r24, r24
 990:	31 f0       	breq	.+12     	; 0x99e <puts+0x40>
 992:	09 95       	icall
 994:	89 2b       	or	r24, r25
 996:	89 f3       	breq	.-30     	; 0x97a <puts+0x1c>
 998:	0f ef       	ldi	r16, 0xFF	; 255
 99a:	1f ef       	ldi	r17, 0xFF	; 255
 99c:	ee cf       	rjmp	.-36     	; 0x97a <puts+0x1c>
 99e:	8a e0       	ldi	r24, 0x0A	; 10
 9a0:	09 95       	icall
 9a2:	89 2b       	or	r24, r25
 9a4:	11 f4       	brne	.+4      	; 0x9aa <puts+0x4c>
 9a6:	c8 01       	movw	r24, r16
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <puts+0x50>
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	9f ef       	ldi	r25, 0xFF	; 255
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	08 95       	ret

000009b8 <vfprintf>:
 9b8:	ac e0       	ldi	r26, 0x0C	; 12
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	e2 ee       	ldi	r30, 0xE2	; 226
 9be:	f4 e0       	ldi	r31, 0x04	; 4
 9c0:	0c 94 77 07 	jmp	0xeee	; 0xeee <__prologue_saves__>
 9c4:	7c 01       	movw	r14, r24
 9c6:	6b 01       	movw	r12, r22
 9c8:	8a 01       	movw	r16, r20
 9ca:	fc 01       	movw	r30, r24
 9cc:	17 82       	std	Z+7, r1	; 0x07
 9ce:	16 82       	std	Z+6, r1	; 0x06
 9d0:	83 81       	ldd	r24, Z+3	; 0x03
 9d2:	81 ff       	sbrs	r24, 1
 9d4:	bd c1       	rjmp	.+890    	; 0xd50 <vfprintf+0x398>
 9d6:	ce 01       	movw	r24, r28
 9d8:	01 96       	adiw	r24, 0x01	; 1
 9da:	4c 01       	movw	r8, r24
 9dc:	f7 01       	movw	r30, r14
 9de:	93 81       	ldd	r25, Z+3	; 0x03
 9e0:	f6 01       	movw	r30, r12
 9e2:	93 fd       	sbrc	r25, 3
 9e4:	85 91       	lpm	r24, Z+
 9e6:	93 ff       	sbrs	r25, 3
 9e8:	81 91       	ld	r24, Z+
 9ea:	6f 01       	movw	r12, r30
 9ec:	88 23       	and	r24, r24
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x3a>
 9f0:	ab c1       	rjmp	.+854    	; 0xd48 <vfprintf+0x390>
 9f2:	85 32       	cpi	r24, 0x25	; 37
 9f4:	39 f4       	brne	.+14     	; 0xa04 <vfprintf+0x4c>
 9f6:	93 fd       	sbrc	r25, 3
 9f8:	85 91       	lpm	r24, Z+
 9fa:	93 ff       	sbrs	r25, 3
 9fc:	81 91       	ld	r24, Z+
 9fe:	6f 01       	movw	r12, r30
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	29 f4       	brne	.+10     	; 0xa0e <vfprintf+0x56>
 a04:	b7 01       	movw	r22, r14
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 a0c:	e7 cf       	rjmp	.-50     	; 0x9dc <vfprintf+0x24>
 a0e:	51 2c       	mov	r5, r1
 a10:	31 2c       	mov	r3, r1
 a12:	20 e0       	ldi	r18, 0x00	; 0
 a14:	20 32       	cpi	r18, 0x20	; 32
 a16:	a0 f4       	brcc	.+40     	; 0xa40 <vfprintf+0x88>
 a18:	8b 32       	cpi	r24, 0x2B	; 43
 a1a:	69 f0       	breq	.+26     	; 0xa36 <vfprintf+0x7e>
 a1c:	30 f4       	brcc	.+12     	; 0xa2a <vfprintf+0x72>
 a1e:	80 32       	cpi	r24, 0x20	; 32
 a20:	59 f0       	breq	.+22     	; 0xa38 <vfprintf+0x80>
 a22:	83 32       	cpi	r24, 0x23	; 35
 a24:	69 f4       	brne	.+26     	; 0xa40 <vfprintf+0x88>
 a26:	20 61       	ori	r18, 0x10	; 16
 a28:	2c c0       	rjmp	.+88     	; 0xa82 <vfprintf+0xca>
 a2a:	8d 32       	cpi	r24, 0x2D	; 45
 a2c:	39 f0       	breq	.+14     	; 0xa3c <vfprintf+0x84>
 a2e:	80 33       	cpi	r24, 0x30	; 48
 a30:	39 f4       	brne	.+14     	; 0xa40 <vfprintf+0x88>
 a32:	21 60       	ori	r18, 0x01	; 1
 a34:	26 c0       	rjmp	.+76     	; 0xa82 <vfprintf+0xca>
 a36:	22 60       	ori	r18, 0x02	; 2
 a38:	24 60       	ori	r18, 0x04	; 4
 a3a:	23 c0       	rjmp	.+70     	; 0xa82 <vfprintf+0xca>
 a3c:	28 60       	ori	r18, 0x08	; 8
 a3e:	21 c0       	rjmp	.+66     	; 0xa82 <vfprintf+0xca>
 a40:	27 fd       	sbrc	r18, 7
 a42:	27 c0       	rjmp	.+78     	; 0xa92 <vfprintf+0xda>
 a44:	30 ed       	ldi	r19, 0xD0	; 208
 a46:	38 0f       	add	r19, r24
 a48:	3a 30       	cpi	r19, 0x0A	; 10
 a4a:	78 f4       	brcc	.+30     	; 0xa6a <vfprintf+0xb2>
 a4c:	26 ff       	sbrs	r18, 6
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <vfprintf+0xa4>
 a50:	fa e0       	ldi	r31, 0x0A	; 10
 a52:	5f 9e       	mul	r5, r31
 a54:	30 0d       	add	r19, r0
 a56:	11 24       	eor	r1, r1
 a58:	53 2e       	mov	r5, r19
 a5a:	13 c0       	rjmp	.+38     	; 0xa82 <vfprintf+0xca>
 a5c:	8a e0       	ldi	r24, 0x0A	; 10
 a5e:	38 9e       	mul	r3, r24
 a60:	30 0d       	add	r19, r0
 a62:	11 24       	eor	r1, r1
 a64:	33 2e       	mov	r3, r19
 a66:	20 62       	ori	r18, 0x20	; 32
 a68:	0c c0       	rjmp	.+24     	; 0xa82 <vfprintf+0xca>
 a6a:	8e 32       	cpi	r24, 0x2E	; 46
 a6c:	21 f4       	brne	.+8      	; 0xa76 <vfprintf+0xbe>
 a6e:	26 fd       	sbrc	r18, 6
 a70:	6b c1       	rjmp	.+726    	; 0xd48 <vfprintf+0x390>
 a72:	20 64       	ori	r18, 0x40	; 64
 a74:	06 c0       	rjmp	.+12     	; 0xa82 <vfprintf+0xca>
 a76:	8c 36       	cpi	r24, 0x6C	; 108
 a78:	11 f4       	brne	.+4      	; 0xa7e <vfprintf+0xc6>
 a7a:	20 68       	ori	r18, 0x80	; 128
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0xca>
 a7e:	88 36       	cpi	r24, 0x68	; 104
 a80:	41 f4       	brne	.+16     	; 0xa92 <vfprintf+0xda>
 a82:	f6 01       	movw	r30, r12
 a84:	93 fd       	sbrc	r25, 3
 a86:	85 91       	lpm	r24, Z+
 a88:	93 ff       	sbrs	r25, 3
 a8a:	81 91       	ld	r24, Z+
 a8c:	6f 01       	movw	r12, r30
 a8e:	81 11       	cpse	r24, r1
 a90:	c1 cf       	rjmp	.-126    	; 0xa14 <vfprintf+0x5c>
 a92:	98 2f       	mov	r25, r24
 a94:	9f 7d       	andi	r25, 0xDF	; 223
 a96:	95 54       	subi	r25, 0x45	; 69
 a98:	93 30       	cpi	r25, 0x03	; 3
 a9a:	28 f4       	brcc	.+10     	; 0xaa6 <vfprintf+0xee>
 a9c:	0c 5f       	subi	r16, 0xFC	; 252
 a9e:	1f 4f       	sbci	r17, 0xFF	; 255
 aa0:	ff e3       	ldi	r31, 0x3F	; 63
 aa2:	f9 83       	std	Y+1, r31	; 0x01
 aa4:	0d c0       	rjmp	.+26     	; 0xac0 <vfprintf+0x108>
 aa6:	83 36       	cpi	r24, 0x63	; 99
 aa8:	31 f0       	breq	.+12     	; 0xab6 <vfprintf+0xfe>
 aaa:	83 37       	cpi	r24, 0x73	; 115
 aac:	71 f0       	breq	.+28     	; 0xaca <vfprintf+0x112>
 aae:	83 35       	cpi	r24, 0x53	; 83
 ab0:	09 f0       	breq	.+2      	; 0xab4 <vfprintf+0xfc>
 ab2:	5b c0       	rjmp	.+182    	; 0xb6a <vfprintf+0x1b2>
 ab4:	22 c0       	rjmp	.+68     	; 0xafa <vfprintf+0x142>
 ab6:	f8 01       	movw	r30, r16
 ab8:	80 81       	ld	r24, Z
 aba:	89 83       	std	Y+1, r24	; 0x01
 abc:	0e 5f       	subi	r16, 0xFE	; 254
 abe:	1f 4f       	sbci	r17, 0xFF	; 255
 ac0:	44 24       	eor	r4, r4
 ac2:	43 94       	inc	r4
 ac4:	51 2c       	mov	r5, r1
 ac6:	54 01       	movw	r10, r8
 ac8:	15 c0       	rjmp	.+42     	; 0xaf4 <vfprintf+0x13c>
 aca:	38 01       	movw	r6, r16
 acc:	f2 e0       	ldi	r31, 0x02	; 2
 ace:	6f 0e       	add	r6, r31
 ad0:	71 1c       	adc	r7, r1
 ad2:	f8 01       	movw	r30, r16
 ad4:	a0 80       	ld	r10, Z
 ad6:	b1 80       	ldd	r11, Z+1	; 0x01
 ad8:	26 ff       	sbrs	r18, 6
 ada:	03 c0       	rjmp	.+6      	; 0xae2 <vfprintf+0x12a>
 adc:	65 2d       	mov	r22, r5
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0x12e>
 ae2:	6f ef       	ldi	r22, 0xFF	; 255
 ae4:	7f ef       	ldi	r23, 0xFF	; 255
 ae6:	c5 01       	movw	r24, r10
 ae8:	2c 87       	std	Y+12, r18	; 0x0c
 aea:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <strnlen>
 aee:	2c 01       	movw	r4, r24
 af0:	83 01       	movw	r16, r6
 af2:	2c 85       	ldd	r18, Y+12	; 0x0c
 af4:	2f 77       	andi	r18, 0x7F	; 127
 af6:	22 2e       	mov	r2, r18
 af8:	17 c0       	rjmp	.+46     	; 0xb28 <vfprintf+0x170>
 afa:	38 01       	movw	r6, r16
 afc:	f2 e0       	ldi	r31, 0x02	; 2
 afe:	6f 0e       	add	r6, r31
 b00:	71 1c       	adc	r7, r1
 b02:	f8 01       	movw	r30, r16
 b04:	a0 80       	ld	r10, Z
 b06:	b1 80       	ldd	r11, Z+1	; 0x01
 b08:	26 ff       	sbrs	r18, 6
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <vfprintf+0x15a>
 b0c:	65 2d       	mov	r22, r5
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x15e>
 b12:	6f ef       	ldi	r22, 0xFF	; 255
 b14:	7f ef       	ldi	r23, 0xFF	; 255
 b16:	c5 01       	movw	r24, r10
 b18:	2c 87       	std	Y+12, r18	; 0x0c
 b1a:	0e 94 ca 06 	call	0xd94	; 0xd94 <strnlen_P>
 b1e:	2c 01       	movw	r4, r24
 b20:	2c 85       	ldd	r18, Y+12	; 0x0c
 b22:	20 68       	ori	r18, 0x80	; 128
 b24:	22 2e       	mov	r2, r18
 b26:	83 01       	movw	r16, r6
 b28:	23 fc       	sbrc	r2, 3
 b2a:	1b c0       	rjmp	.+54     	; 0xb62 <vfprintf+0x1aa>
 b2c:	83 2d       	mov	r24, r3
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	48 16       	cp	r4, r24
 b32:	59 06       	cpc	r5, r25
 b34:	b0 f4       	brcc	.+44     	; 0xb62 <vfprintf+0x1aa>
 b36:	b7 01       	movw	r22, r14
 b38:	80 e2       	ldi	r24, 0x20	; 32
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b40:	3a 94       	dec	r3
 b42:	f4 cf       	rjmp	.-24     	; 0xb2c <vfprintf+0x174>
 b44:	f5 01       	movw	r30, r10
 b46:	27 fc       	sbrc	r2, 7
 b48:	85 91       	lpm	r24, Z+
 b4a:	27 fe       	sbrs	r2, 7
 b4c:	81 91       	ld	r24, Z+
 b4e:	5f 01       	movw	r10, r30
 b50:	b7 01       	movw	r22, r14
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 b58:	31 10       	cpse	r3, r1
 b5a:	3a 94       	dec	r3
 b5c:	f1 e0       	ldi	r31, 0x01	; 1
 b5e:	4f 1a       	sub	r4, r31
 b60:	51 08       	sbc	r5, r1
 b62:	41 14       	cp	r4, r1
 b64:	51 04       	cpc	r5, r1
 b66:	71 f7       	brne	.-36     	; 0xb44 <vfprintf+0x18c>
 b68:	e5 c0       	rjmp	.+458    	; 0xd34 <vfprintf+0x37c>
 b6a:	84 36       	cpi	r24, 0x64	; 100
 b6c:	11 f0       	breq	.+4      	; 0xb72 <vfprintf+0x1ba>
 b6e:	89 36       	cpi	r24, 0x69	; 105
 b70:	39 f5       	brne	.+78     	; 0xbc0 <vfprintf+0x208>
 b72:	f8 01       	movw	r30, r16
 b74:	27 ff       	sbrs	r18, 7
 b76:	07 c0       	rjmp	.+14     	; 0xb86 <vfprintf+0x1ce>
 b78:	60 81       	ld	r22, Z
 b7a:	71 81       	ldd	r23, Z+1	; 0x01
 b7c:	82 81       	ldd	r24, Z+2	; 0x02
 b7e:	93 81       	ldd	r25, Z+3	; 0x03
 b80:	0c 5f       	subi	r16, 0xFC	; 252
 b82:	1f 4f       	sbci	r17, 0xFF	; 255
 b84:	08 c0       	rjmp	.+16     	; 0xb96 <vfprintf+0x1de>
 b86:	60 81       	ld	r22, Z
 b88:	71 81       	ldd	r23, Z+1	; 0x01
 b8a:	88 27       	eor	r24, r24
 b8c:	77 fd       	sbrc	r23, 7
 b8e:	80 95       	com	r24
 b90:	98 2f       	mov	r25, r24
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	2f 76       	andi	r18, 0x6F	; 111
 b98:	b2 2e       	mov	r11, r18
 b9a:	97 ff       	sbrs	r25, 7
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x1f8>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	20 68       	ori	r18, 0x80	; 128
 bae:	b2 2e       	mov	r11, r18
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a4 01       	movw	r20, r8
 bb6:	0e 94 19 07 	call	0xe32	; 0xe32 <__ultoa_invert>
 bba:	a8 2e       	mov	r10, r24
 bbc:	a8 18       	sub	r10, r8
 bbe:	44 c0       	rjmp	.+136    	; 0xc48 <vfprintf+0x290>
 bc0:	85 37       	cpi	r24, 0x75	; 117
 bc2:	29 f4       	brne	.+10     	; 0xbce <vfprintf+0x216>
 bc4:	2f 7e       	andi	r18, 0xEF	; 239
 bc6:	b2 2e       	mov	r11, r18
 bc8:	2a e0       	ldi	r18, 0x0A	; 10
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	25 c0       	rjmp	.+74     	; 0xc18 <vfprintf+0x260>
 bce:	f2 2f       	mov	r31, r18
 bd0:	f9 7f       	andi	r31, 0xF9	; 249
 bd2:	bf 2e       	mov	r11, r31
 bd4:	8f 36       	cpi	r24, 0x6F	; 111
 bd6:	c1 f0       	breq	.+48     	; 0xc08 <vfprintf+0x250>
 bd8:	18 f4       	brcc	.+6      	; 0xbe0 <vfprintf+0x228>
 bda:	88 35       	cpi	r24, 0x58	; 88
 bdc:	79 f0       	breq	.+30     	; 0xbfc <vfprintf+0x244>
 bde:	b4 c0       	rjmp	.+360    	; 0xd48 <vfprintf+0x390>
 be0:	80 37       	cpi	r24, 0x70	; 112
 be2:	19 f0       	breq	.+6      	; 0xbea <vfprintf+0x232>
 be4:	88 37       	cpi	r24, 0x78	; 120
 be6:	21 f0       	breq	.+8      	; 0xbf0 <vfprintf+0x238>
 be8:	af c0       	rjmp	.+350    	; 0xd48 <vfprintf+0x390>
 bea:	2f 2f       	mov	r18, r31
 bec:	20 61       	ori	r18, 0x10	; 16
 bee:	b2 2e       	mov	r11, r18
 bf0:	b4 fe       	sbrs	r11, 4
 bf2:	0d c0       	rjmp	.+26     	; 0xc0e <vfprintf+0x256>
 bf4:	8b 2d       	mov	r24, r11
 bf6:	84 60       	ori	r24, 0x04	; 4
 bf8:	b8 2e       	mov	r11, r24
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <vfprintf+0x256>
 bfc:	24 ff       	sbrs	r18, 4
 bfe:	0a c0       	rjmp	.+20     	; 0xc14 <vfprintf+0x25c>
 c00:	9f 2f       	mov	r25, r31
 c02:	96 60       	ori	r25, 0x06	; 6
 c04:	b9 2e       	mov	r11, r25
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x25c>
 c08:	28 e0       	ldi	r18, 0x08	; 8
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	05 c0       	rjmp	.+10     	; 0xc18 <vfprintf+0x260>
 c0e:	20 e1       	ldi	r18, 0x10	; 16
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <vfprintf+0x260>
 c14:	20 e1       	ldi	r18, 0x10	; 16
 c16:	32 e0       	ldi	r19, 0x02	; 2
 c18:	f8 01       	movw	r30, r16
 c1a:	b7 fe       	sbrs	r11, 7
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <vfprintf+0x274>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	82 81       	ldd	r24, Z+2	; 0x02
 c24:	93 81       	ldd	r25, Z+3	; 0x03
 c26:	0c 5f       	subi	r16, 0xFC	; 252
 c28:	1f 4f       	sbci	r17, 0xFF	; 255
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0x280>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 5f       	subi	r16, 0xFE	; 254
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	a4 01       	movw	r20, r8
 c3a:	0e 94 19 07 	call	0xe32	; 0xe32 <__ultoa_invert>
 c3e:	a8 2e       	mov	r10, r24
 c40:	a8 18       	sub	r10, r8
 c42:	fb 2d       	mov	r31, r11
 c44:	ff 77       	andi	r31, 0x7F	; 127
 c46:	bf 2e       	mov	r11, r31
 c48:	b6 fe       	sbrs	r11, 6
 c4a:	0b c0       	rjmp	.+22     	; 0xc62 <vfprintf+0x2aa>
 c4c:	2b 2d       	mov	r18, r11
 c4e:	2e 7f       	andi	r18, 0xFE	; 254
 c50:	a5 14       	cp	r10, r5
 c52:	50 f4       	brcc	.+20     	; 0xc68 <vfprintf+0x2b0>
 c54:	b4 fe       	sbrs	r11, 4
 c56:	0a c0       	rjmp	.+20     	; 0xc6c <vfprintf+0x2b4>
 c58:	b2 fc       	sbrc	r11, 2
 c5a:	08 c0       	rjmp	.+16     	; 0xc6c <vfprintf+0x2b4>
 c5c:	2b 2d       	mov	r18, r11
 c5e:	2e 7e       	andi	r18, 0xEE	; 238
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <vfprintf+0x2b4>
 c62:	7a 2c       	mov	r7, r10
 c64:	2b 2d       	mov	r18, r11
 c66:	03 c0       	rjmp	.+6      	; 0xc6e <vfprintf+0x2b6>
 c68:	7a 2c       	mov	r7, r10
 c6a:	01 c0       	rjmp	.+2      	; 0xc6e <vfprintf+0x2b6>
 c6c:	75 2c       	mov	r7, r5
 c6e:	24 ff       	sbrs	r18, 4
 c70:	0d c0       	rjmp	.+26     	; 0xc8c <vfprintf+0x2d4>
 c72:	fe 01       	movw	r30, r28
 c74:	ea 0d       	add	r30, r10
 c76:	f1 1d       	adc	r31, r1
 c78:	80 81       	ld	r24, Z
 c7a:	80 33       	cpi	r24, 0x30	; 48
 c7c:	11 f4       	brne	.+4      	; 0xc82 <vfprintf+0x2ca>
 c7e:	29 7e       	andi	r18, 0xE9	; 233
 c80:	09 c0       	rjmp	.+18     	; 0xc94 <vfprintf+0x2dc>
 c82:	22 ff       	sbrs	r18, 2
 c84:	06 c0       	rjmp	.+12     	; 0xc92 <vfprintf+0x2da>
 c86:	73 94       	inc	r7
 c88:	73 94       	inc	r7
 c8a:	04 c0       	rjmp	.+8      	; 0xc94 <vfprintf+0x2dc>
 c8c:	82 2f       	mov	r24, r18
 c8e:	86 78       	andi	r24, 0x86	; 134
 c90:	09 f0       	breq	.+2      	; 0xc94 <vfprintf+0x2dc>
 c92:	73 94       	inc	r7
 c94:	23 fd       	sbrc	r18, 3
 c96:	13 c0       	rjmp	.+38     	; 0xcbe <vfprintf+0x306>
 c98:	20 ff       	sbrs	r18, 0
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <vfprintf+0x2f0>
 c9c:	5a 2c       	mov	r5, r10
 c9e:	73 14       	cp	r7, r3
 ca0:	18 f4       	brcc	.+6      	; 0xca8 <vfprintf+0x2f0>
 ca2:	53 0c       	add	r5, r3
 ca4:	57 18       	sub	r5, r7
 ca6:	73 2c       	mov	r7, r3
 ca8:	73 14       	cp	r7, r3
 caa:	68 f4       	brcc	.+26     	; 0xcc6 <vfprintf+0x30e>
 cac:	b7 01       	movw	r22, r14
 cae:	80 e2       	ldi	r24, 0x20	; 32
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	2c 87       	std	Y+12, r18	; 0x0c
 cb4:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 cb8:	73 94       	inc	r7
 cba:	2c 85       	ldd	r18, Y+12	; 0x0c
 cbc:	f5 cf       	rjmp	.-22     	; 0xca8 <vfprintf+0x2f0>
 cbe:	73 14       	cp	r7, r3
 cc0:	10 f4       	brcc	.+4      	; 0xcc6 <vfprintf+0x30e>
 cc2:	37 18       	sub	r3, r7
 cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x310>
 cc6:	31 2c       	mov	r3, r1
 cc8:	24 ff       	sbrs	r18, 4
 cca:	12 c0       	rjmp	.+36     	; 0xcf0 <vfprintf+0x338>
 ccc:	b7 01       	movw	r22, r14
 cce:	80 e3       	ldi	r24, 0x30	; 48
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	2c 87       	std	Y+12, r18	; 0x0c
 cd4:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
 cda:	22 ff       	sbrs	r18, 2
 cdc:	17 c0       	rjmp	.+46     	; 0xd0c <vfprintf+0x354>
 cde:	21 ff       	sbrs	r18, 1
 ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x330>
 ce2:	88 e5       	ldi	r24, 0x58	; 88
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x334>
 ce8:	88 e7       	ldi	r24, 0x78	; 120
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	b7 01       	movw	r22, r14
 cee:	0c c0       	rjmp	.+24     	; 0xd08 <vfprintf+0x350>
 cf0:	82 2f       	mov	r24, r18
 cf2:	86 78       	andi	r24, 0x86	; 134
 cf4:	59 f0       	breq	.+22     	; 0xd0c <vfprintf+0x354>
 cf6:	21 fd       	sbrc	r18, 1
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x346>
 cfa:	80 e2       	ldi	r24, 0x20	; 32
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <vfprintf+0x348>
 cfe:	8b e2       	ldi	r24, 0x2B	; 43
 d00:	27 fd       	sbrc	r18, 7
 d02:	8d e2       	ldi	r24, 0x2D	; 45
 d04:	b7 01       	movw	r22, r14
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d0c:	a5 14       	cp	r10, r5
 d0e:	38 f4       	brcc	.+14     	; 0xd1e <vfprintf+0x366>
 d10:	b7 01       	movw	r22, r14
 d12:	80 e3       	ldi	r24, 0x30	; 48
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d1a:	5a 94       	dec	r5
 d1c:	f7 cf       	rjmp	.-18     	; 0xd0c <vfprintf+0x354>
 d1e:	aa 94       	dec	r10
 d20:	f4 01       	movw	r30, r8
 d22:	ea 0d       	add	r30, r10
 d24:	f1 1d       	adc	r31, r1
 d26:	80 81       	ld	r24, Z
 d28:	b7 01       	movw	r22, r14
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d30:	a1 10       	cpse	r10, r1
 d32:	f5 cf       	rjmp	.-22     	; 0xd1e <vfprintf+0x366>
 d34:	33 20       	and	r3, r3
 d36:	09 f4       	brne	.+2      	; 0xd3a <vfprintf+0x382>
 d38:	51 ce       	rjmp	.-862    	; 0x9dc <vfprintf+0x24>
 d3a:	b7 01       	movw	r22, r14
 d3c:	80 e2       	ldi	r24, 0x20	; 32
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	0e 94 e7 06 	call	0xdce	; 0xdce <fputc>
 d44:	3a 94       	dec	r3
 d46:	f6 cf       	rjmp	.-20     	; 0xd34 <vfprintf+0x37c>
 d48:	f7 01       	movw	r30, r14
 d4a:	86 81       	ldd	r24, Z+6	; 0x06
 d4c:	97 81       	ldd	r25, Z+7	; 0x07
 d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x39c>
 d50:	8f ef       	ldi	r24, 0xFF	; 255
 d52:	9f ef       	ldi	r25, 0xFF	; 255
 d54:	2c 96       	adiw	r28, 0x0c	; 12
 d56:	e2 e1       	ldi	r30, 0x12	; 18
 d58:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__epilogue_restores__>

00000d5c <calloc>:
 d5c:	0f 93       	push	r16
 d5e:	1f 93       	push	r17
 d60:	cf 93       	push	r28
 d62:	df 93       	push	r29
 d64:	86 9f       	mul	r24, r22
 d66:	80 01       	movw	r16, r0
 d68:	87 9f       	mul	r24, r23
 d6a:	10 0d       	add	r17, r0
 d6c:	96 9f       	mul	r25, r22
 d6e:	10 0d       	add	r17, r0
 d70:	11 24       	eor	r1, r1
 d72:	c8 01       	movw	r24, r16
 d74:	0e 94 29 03 	call	0x652	; 0x652 <malloc>
 d78:	ec 01       	movw	r28, r24
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	29 f0       	breq	.+10     	; 0xd88 <calloc+0x2c>
 d7e:	a8 01       	movw	r20, r16
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	70 e0       	ldi	r23, 0x00	; 0
 d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <memset>
 d88:	ce 01       	movw	r24, r28
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	1f 91       	pop	r17
 d90:	0f 91       	pop	r16
 d92:	08 95       	ret

00000d94 <strnlen_P>:
 d94:	fc 01       	movw	r30, r24
 d96:	05 90       	lpm	r0, Z+
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 10       	cpse	r0, r1
 d9e:	d8 f7       	brcc	.-10     	; 0xd96 <strnlen_P+0x2>
 da0:	80 95       	com	r24
 da2:	90 95       	com	r25
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	08 95       	ret

00000daa <memset>:
 daa:	dc 01       	movw	r26, r24
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <memset+0x6>
 dae:	6d 93       	st	X+, r22
 db0:	41 50       	subi	r20, 0x01	; 1
 db2:	50 40       	sbci	r21, 0x00	; 0
 db4:	e0 f7       	brcc	.-8      	; 0xdae <memset+0x4>
 db6:	08 95       	ret

00000db8 <strnlen>:
 db8:	fc 01       	movw	r30, r24
 dba:	61 50       	subi	r22, 0x01	; 1
 dbc:	70 40       	sbci	r23, 0x00	; 0
 dbe:	01 90       	ld	r0, Z+
 dc0:	01 10       	cpse	r0, r1
 dc2:	d8 f7       	brcc	.-10     	; 0xdba <strnlen+0x2>
 dc4:	80 95       	com	r24
 dc6:	90 95       	com	r25
 dc8:	8e 0f       	add	r24, r30
 dca:	9f 1f       	adc	r25, r31
 dcc:	08 95       	ret

00000dce <fputc>:
 dce:	0f 93       	push	r16
 dd0:	1f 93       	push	r17
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	18 2f       	mov	r17, r24
 dd8:	09 2f       	mov	r16, r25
 dda:	eb 01       	movw	r28, r22
 ddc:	8b 81       	ldd	r24, Y+3	; 0x03
 dde:	81 fd       	sbrc	r24, 1
 de0:	03 c0       	rjmp	.+6      	; 0xde8 <fputc+0x1a>
 de2:	8f ef       	ldi	r24, 0xFF	; 255
 de4:	9f ef       	ldi	r25, 0xFF	; 255
 de6:	20 c0       	rjmp	.+64     	; 0xe28 <fputc+0x5a>
 de8:	82 ff       	sbrs	r24, 2
 dea:	10 c0       	rjmp	.+32     	; 0xe0c <fputc+0x3e>
 dec:	4e 81       	ldd	r20, Y+6	; 0x06
 dee:	5f 81       	ldd	r21, Y+7	; 0x07
 df0:	2c 81       	ldd	r18, Y+4	; 0x04
 df2:	3d 81       	ldd	r19, Y+5	; 0x05
 df4:	42 17       	cp	r20, r18
 df6:	53 07       	cpc	r21, r19
 df8:	7c f4       	brge	.+30     	; 0xe18 <fputc+0x4a>
 dfa:	e8 81       	ld	r30, Y
 dfc:	f9 81       	ldd	r31, Y+1	; 0x01
 dfe:	9f 01       	movw	r18, r30
 e00:	2f 5f       	subi	r18, 0xFF	; 255
 e02:	3f 4f       	sbci	r19, 0xFF	; 255
 e04:	39 83       	std	Y+1, r19	; 0x01
 e06:	28 83       	st	Y, r18
 e08:	10 83       	st	Z, r17
 e0a:	06 c0       	rjmp	.+12     	; 0xe18 <fputc+0x4a>
 e0c:	e8 85       	ldd	r30, Y+8	; 0x08
 e0e:	f9 85       	ldd	r31, Y+9	; 0x09
 e10:	81 2f       	mov	r24, r17
 e12:	09 95       	icall
 e14:	89 2b       	or	r24, r25
 e16:	29 f7       	brne	.-54     	; 0xde2 <fputc+0x14>
 e18:	2e 81       	ldd	r18, Y+6	; 0x06
 e1a:	3f 81       	ldd	r19, Y+7	; 0x07
 e1c:	2f 5f       	subi	r18, 0xFF	; 255
 e1e:	3f 4f       	sbci	r19, 0xFF	; 255
 e20:	3f 83       	std	Y+7, r19	; 0x07
 e22:	2e 83       	std	Y+6, r18	; 0x06
 e24:	81 2f       	mov	r24, r17
 e26:	90 2f       	mov	r25, r16
 e28:	df 91       	pop	r29
 e2a:	cf 91       	pop	r28
 e2c:	1f 91       	pop	r17
 e2e:	0f 91       	pop	r16
 e30:	08 95       	ret

00000e32 <__ultoa_invert>:
 e32:	fa 01       	movw	r30, r20
 e34:	aa 27       	eor	r26, r26
 e36:	28 30       	cpi	r18, 0x08	; 8
 e38:	51 f1       	breq	.+84     	; 0xe8e <__ultoa_invert+0x5c>
 e3a:	20 31       	cpi	r18, 0x10	; 16
 e3c:	81 f1       	breq	.+96     	; 0xe9e <__ultoa_invert+0x6c>
 e3e:	e8 94       	clt
 e40:	6f 93       	push	r22
 e42:	6e 7f       	andi	r22, 0xFE	; 254
 e44:	6e 5f       	subi	r22, 0xFE	; 254
 e46:	7f 4f       	sbci	r23, 0xFF	; 255
 e48:	8f 4f       	sbci	r24, 0xFF	; 255
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	af 4f       	sbci	r26, 0xFF	; 255
 e4e:	b1 e0       	ldi	r27, 0x01	; 1
 e50:	3e d0       	rcall	.+124    	; 0xece <__ultoa_invert+0x9c>
 e52:	b4 e0       	ldi	r27, 0x04	; 4
 e54:	3c d0       	rcall	.+120    	; 0xece <__ultoa_invert+0x9c>
 e56:	67 0f       	add	r22, r23
 e58:	78 1f       	adc	r23, r24
 e5a:	89 1f       	adc	r24, r25
 e5c:	9a 1f       	adc	r25, r26
 e5e:	a1 1d       	adc	r26, r1
 e60:	68 0f       	add	r22, r24
 e62:	79 1f       	adc	r23, r25
 e64:	8a 1f       	adc	r24, r26
 e66:	91 1d       	adc	r25, r1
 e68:	a1 1d       	adc	r26, r1
 e6a:	6a 0f       	add	r22, r26
 e6c:	71 1d       	adc	r23, r1
 e6e:	81 1d       	adc	r24, r1
 e70:	91 1d       	adc	r25, r1
 e72:	a1 1d       	adc	r26, r1
 e74:	20 d0       	rcall	.+64     	; 0xeb6 <__ultoa_invert+0x84>
 e76:	09 f4       	brne	.+2      	; 0xe7a <__ultoa_invert+0x48>
 e78:	68 94       	set
 e7a:	3f 91       	pop	r19
 e7c:	2a e0       	ldi	r18, 0x0A	; 10
 e7e:	26 9f       	mul	r18, r22
 e80:	11 24       	eor	r1, r1
 e82:	30 19       	sub	r19, r0
 e84:	30 5d       	subi	r19, 0xD0	; 208
 e86:	31 93       	st	Z+, r19
 e88:	de f6       	brtc	.-74     	; 0xe40 <__ultoa_invert+0xe>
 e8a:	cf 01       	movw	r24, r30
 e8c:	08 95       	ret
 e8e:	46 2f       	mov	r20, r22
 e90:	47 70       	andi	r20, 0x07	; 7
 e92:	40 5d       	subi	r20, 0xD0	; 208
 e94:	41 93       	st	Z+, r20
 e96:	b3 e0       	ldi	r27, 0x03	; 3
 e98:	0f d0       	rcall	.+30     	; 0xeb8 <__ultoa_invert+0x86>
 e9a:	c9 f7       	brne	.-14     	; 0xe8e <__ultoa_invert+0x5c>
 e9c:	f6 cf       	rjmp	.-20     	; 0xe8a <__ultoa_invert+0x58>
 e9e:	46 2f       	mov	r20, r22
 ea0:	4f 70       	andi	r20, 0x0F	; 15
 ea2:	40 5d       	subi	r20, 0xD0	; 208
 ea4:	4a 33       	cpi	r20, 0x3A	; 58
 ea6:	18 f0       	brcs	.+6      	; 0xeae <__ultoa_invert+0x7c>
 ea8:	49 5d       	subi	r20, 0xD9	; 217
 eaa:	31 fd       	sbrc	r19, 1
 eac:	40 52       	subi	r20, 0x20	; 32
 eae:	41 93       	st	Z+, r20
 eb0:	02 d0       	rcall	.+4      	; 0xeb6 <__ultoa_invert+0x84>
 eb2:	a9 f7       	brne	.-22     	; 0xe9e <__ultoa_invert+0x6c>
 eb4:	ea cf       	rjmp	.-44     	; 0xe8a <__ultoa_invert+0x58>
 eb6:	b4 e0       	ldi	r27, 0x04	; 4
 eb8:	a6 95       	lsr	r26
 eba:	97 95       	ror	r25
 ebc:	87 95       	ror	r24
 ebe:	77 95       	ror	r23
 ec0:	67 95       	ror	r22
 ec2:	ba 95       	dec	r27
 ec4:	c9 f7       	brne	.-14     	; 0xeb8 <__ultoa_invert+0x86>
 ec6:	00 97       	sbiw	r24, 0x00	; 0
 ec8:	61 05       	cpc	r22, r1
 eca:	71 05       	cpc	r23, r1
 ecc:	08 95       	ret
 ece:	9b 01       	movw	r18, r22
 ed0:	ac 01       	movw	r20, r24
 ed2:	0a 2e       	mov	r0, r26
 ed4:	06 94       	lsr	r0
 ed6:	57 95       	ror	r21
 ed8:	47 95       	ror	r20
 eda:	37 95       	ror	r19
 edc:	27 95       	ror	r18
 ede:	ba 95       	dec	r27
 ee0:	c9 f7       	brne	.-14     	; 0xed4 <__ultoa_invert+0xa2>
 ee2:	62 0f       	add	r22, r18
 ee4:	73 1f       	adc	r23, r19
 ee6:	84 1f       	adc	r24, r20
 ee8:	95 1f       	adc	r25, r21
 eea:	a0 1d       	adc	r26, r0
 eec:	08 95       	ret

00000eee <__prologue_saves__>:
 eee:	2f 92       	push	r2
 ef0:	3f 92       	push	r3
 ef2:	4f 92       	push	r4
 ef4:	5f 92       	push	r5
 ef6:	6f 92       	push	r6
 ef8:	7f 92       	push	r7
 efa:	8f 92       	push	r8
 efc:	9f 92       	push	r9
 efe:	af 92       	push	r10
 f00:	bf 92       	push	r11
 f02:	cf 92       	push	r12
 f04:	df 92       	push	r13
 f06:	ef 92       	push	r14
 f08:	ff 92       	push	r15
 f0a:	0f 93       	push	r16
 f0c:	1f 93       	push	r17
 f0e:	cf 93       	push	r28
 f10:	df 93       	push	r29
 f12:	cd b7       	in	r28, 0x3d	; 61
 f14:	de b7       	in	r29, 0x3e	; 62
 f16:	ca 1b       	sub	r28, r26
 f18:	db 0b       	sbc	r29, r27
 f1a:	0f b6       	in	r0, 0x3f	; 63
 f1c:	f8 94       	cli
 f1e:	de bf       	out	0x3e, r29	; 62
 f20:	0f be       	out	0x3f, r0	; 63
 f22:	cd bf       	out	0x3d, r28	; 61
 f24:	09 94       	ijmp

00000f26 <__epilogue_restores__>:
 f26:	2a 88       	ldd	r2, Y+18	; 0x12
 f28:	39 88       	ldd	r3, Y+17	; 0x11
 f2a:	48 88       	ldd	r4, Y+16	; 0x10
 f2c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f2e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f30:	7d 84       	ldd	r7, Y+13	; 0x0d
 f32:	8c 84       	ldd	r8, Y+12	; 0x0c
 f34:	9b 84       	ldd	r9, Y+11	; 0x0b
 f36:	aa 84       	ldd	r10, Y+10	; 0x0a
 f38:	b9 84       	ldd	r11, Y+9	; 0x09
 f3a:	c8 84       	ldd	r12, Y+8	; 0x08
 f3c:	df 80       	ldd	r13, Y+7	; 0x07
 f3e:	ee 80       	ldd	r14, Y+6	; 0x06
 f40:	fd 80       	ldd	r15, Y+5	; 0x05
 f42:	0c 81       	ldd	r16, Y+4	; 0x04
 f44:	1b 81       	ldd	r17, Y+3	; 0x03
 f46:	aa 81       	ldd	r26, Y+2	; 0x02
 f48:	b9 81       	ldd	r27, Y+1	; 0x01
 f4a:	ce 0f       	add	r28, r30
 f4c:	d1 1d       	adc	r29, r1
 f4e:	0f b6       	in	r0, 0x3f	; 63
 f50:	f8 94       	cli
 f52:	de bf       	out	0x3e, r29	; 62
 f54:	0f be       	out	0x3f, r0	; 63
 f56:	cd bf       	out	0x3d, r28	; 61
 f58:	ed 01       	movw	r28, r26
 f5a:	08 95       	ret

00000f5c <_exit>:
 f5c:	f8 94       	cli

00000f5e <__stop_program>:
 f5e:	ff cf       	rjmp	.-2      	; 0xf5e <__stop_program>


ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000060c  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000655  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000374  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000231  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bd  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e0       	ldi	r30, 0x0C	; 12
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 30       	cpi	r26, 0x0C	; 12
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac e0       	ldi	r26, 0x0C	; 12
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a9 31       	cpi	r26, 0x19	; 25
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  a6:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
  b2:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
  be:	8c b1       	in	r24, 0x0c	; 12
}
  c0:	08 95       	ret

000000c2 <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
  c2:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
  c8:	6d e5       	ldi	r22, 0x5D	; 93
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	87 e5       	ldi	r24, 0x57	; 87
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 6f 01 	call	0x2de	; 0x2de <fdevopen>
  d4:	90 93 0e 01 	sts	0x010E, r25
  d8:	80 93 0d 01 	sts	0x010D, r24
	
	return 0; 
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <oled_init>:

uint8_t page, col;

void oled_init(){
	//  display  off
	*OLED_c = 0xae;
  e2:	e0 91 08 01 	lds	r30, 0x0108
  e6:	f0 91 09 01 	lds	r31, 0x0109
  ea:	8e ea       	ldi	r24, 0xAE	; 174
  ec:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
  ee:	e0 91 08 01 	lds	r30, 0x0108
  f2:	f0 91 09 01 	lds	r31, 0x0109
  f6:	81 ea       	ldi	r24, 0xA1	; 161
  f8:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
  fa:	e0 91 08 01 	lds	r30, 0x0108
  fe:	f0 91 09 01 	lds	r31, 0x0109
 102:	8a ed       	ldi	r24, 0xDA	; 218
 104:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 106:	e0 91 08 01 	lds	r30, 0x0108
 10a:	f0 91 09 01 	lds	r31, 0x0109
 10e:	82 e1       	ldi	r24, 0x12	; 18
 110:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 112:	e0 91 08 01 	lds	r30, 0x0108
 116:	f0 91 09 01 	lds	r31, 0x0109
 11a:	88 ec       	ldi	r24, 0xC8	; 200
 11c:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 11e:	e0 91 08 01 	lds	r30, 0x0108
 122:	f0 91 09 01 	lds	r31, 0x0109
 126:	88 ea       	ldi	r24, 0xA8	; 168
 128:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 12a:	e0 91 08 01 	lds	r30, 0x0108
 12e:	f0 91 09 01 	lds	r31, 0x0109
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 136:	e0 91 08 01 	lds	r30, 0x0108
 13a:	f0 91 09 01 	lds	r31, 0x0109
 13e:	85 ed       	ldi	r24, 0xD5	; 213
 140:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 142:	e0 91 08 01 	lds	r30, 0x0108
 146:	f0 91 09 01 	lds	r31, 0x0109
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 14e:	e0 91 08 01 	lds	r30, 0x0108
 152:	f0 91 09 01 	lds	r31, 0x0109
 156:	81 e8       	ldi	r24, 0x81	; 129
 158:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 15a:	e0 91 08 01 	lds	r30, 0x0108
 15e:	f0 91 09 01 	lds	r31, 0x0109
 162:	80 e5       	ldi	r24, 0x50	; 80
 164:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 166:	e0 91 08 01 	lds	r30, 0x0108
 16a:	f0 91 09 01 	lds	r31, 0x0109
 16e:	89 ed       	ldi	r24, 0xD9	; 217
 170:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 172:	e0 91 08 01 	lds	r30, 0x0108
 176:	f0 91 09 01 	lds	r31, 0x0109
 17a:	81 e2       	ldi	r24, 0x21	; 33
 17c:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 17e:	e0 91 08 01 	lds	r30, 0x0108
 182:	f0 91 09 01 	lds	r31, 0x0109
 186:	80 e2       	ldi	r24, 0x20	; 32
 188:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 18a:	e0 91 08 01 	lds	r30, 0x0108
 18e:	f0 91 09 01 	lds	r31, 0x0109
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 196:	e0 91 08 01 	lds	r30, 0x0108
 19a:	f0 91 09 01 	lds	r31, 0x0109
 19e:	8b ed       	ldi	r24, 0xDB	; 219
 1a0:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 1a2:	e0 91 08 01 	lds	r30, 0x0108
 1a6:	f0 91 09 01 	lds	r31, 0x0109
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 1ae:	e0 91 08 01 	lds	r30, 0x0108
 1b2:	f0 91 09 01 	lds	r31, 0x0109
 1b6:	8d ea       	ldi	r24, 0xAD	; 173
 1b8:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 1ba:	e0 91 08 01 	lds	r30, 0x0108
 1be:	f0 91 09 01 	lds	r31, 0x0109
 1c2:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 1c4:	e0 91 08 01 	lds	r30, 0x0108
 1c8:	f0 91 09 01 	lds	r31, 0x0109
 1cc:	84 ea       	ldi	r24, 0xA4	; 164
 1ce:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 1d0:	e0 91 08 01 	lds	r30, 0x0108
 1d4:	f0 91 09 01 	lds	r31, 0x0109
 1d8:	86 ea       	ldi	r24, 0xA6	; 166
 1da:	80 83       	st	Z, r24
	

	//  display  on
	*OLED_c = 0xaf;
 1dc:	e0 91 08 01 	lds	r30, 0x0108
 1e0:	f0 91 09 01 	lds	r31, 0x0109
 1e4:	8f ea       	ldi	r24, 0xAF	; 175
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <oled_goto_page>:
}



void oled_goto_page(int page){
	*OLED_c = (page | 0xb0);
 1ea:	e0 91 08 01 	lds	r30, 0x0108
 1ee:	f0 91 09 01 	lds	r31, 0x0109
 1f2:	80 6b       	ori	r24, 0xB0	; 176
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <oled_goto_column>:
}

void oled_goto_column(int column){
	*OLED_c = (column & 0x0f); //clearer de 4 første bitsene
 1f8:	e0 91 08 01 	lds	r30, 0x0108
 1fc:	f0 91 09 01 	lds	r31, 0x0109
 200:	28 2f       	mov	r18, r24
 202:	2f 70       	andi	r18, 0x0F	; 15
 204:	20 83       	st	Z, r18
	*OLED_c = ((column & 0xf0) >> 4) | (0x10);
 206:	e0 91 08 01 	lds	r30, 0x0108
 20a:	f0 91 09 01 	lds	r31, 0x0109
 20e:	80 7f       	andi	r24, 0xF0	; 240
 210:	99 27       	eor	r25, r25
 212:	95 95       	asr	r25
 214:	87 95       	ror	r24
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24
 226:	08 95       	ret

00000228 <oled_pos>:
}

void oled_pos(int row,int column){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	eb 01       	movw	r28, r22
	oled_goto_page(row);
 22e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <oled_goto_page>
	oled_goto_column(column);
 232:	ce 01       	movw	r24, r28
 234:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <oled_goto_column>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <oled_fill_page>:
	oled_pos(0,0);
}


void oled_fill_page(uint8_t page){
	oled_pos(page, 0);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 14 01 	call	0x228	; 0x228 <oled_pos>
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	90 e0       	ldi	r25, 0x00	; 0
	for (uint16_t i = 0 ; i < 128; i++){
		*OLED_d = 0xf;
 24c:	2f e0       	ldi	r18, 0x0F	; 15
 24e:	e0 91 06 01 	lds	r30, 0x0106
 252:	f0 91 07 01 	lds	r31, 0x0107
 256:	20 83       	st	Z, r18
 258:	01 97       	sbiw	r24, 0x01	; 1
}


void oled_fill_page(uint8_t page){
	oled_pos(page, 0);
	for (uint16_t i = 0 ; i < 128; i++){
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	c1 f7       	brne	.-16     	; 0x24e <oled_fill_page+0x10>
		*OLED_d = 0xf;
	}
 25e:	08 95       	ret

00000260 <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler SRAM i MCU
	set_bit(MCUCR, SRE);
 260:	85 b7       	in	r24, 0x35	; 53
 262:	80 68       	ori	r24, 0x80	; 128
 264:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 266:	80 b7       	in	r24, 0x30	; 48
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 bf       	out	0x30, r24	; 48
 26c:	08 95       	ret

0000026e <main>:
volatile char *oled_d = 0x1200;

int main(void)
{
	// Disable global interrupts
	cli();
 26e:	f8 94       	cli
	
	UART_init(31);
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_init>
	register_init();
 278:	0e 94 30 01 	call	0x260	; 0x260 <register_init>
	
	oled_init();
 27c:	0e 94 71 00 	call	0xe2	; 0xe2 <oled_init>

	
	// Enable global interrupts
	sei();
 280:	78 94       	sei
	
	
	
	
	oled_fill_page(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(2);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(3);
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(4);
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(5);
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(6);
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	oled_fill_page(7);
 2ac:	87 e0       	ldi	r24, 0x07	; 7
 2ae:	0e 94 1f 01 	call	0x23e	; 0x23e <oled_fill_page>
	*oled_cmd = 1;
 2b2:	e0 91 0a 01 	lds	r30, 0x010A
 2b6:	f0 91 0b 01 	lds	r31, 0x010B
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
 2be:	ff cf       	rjmp	.-2      	; 0x2be <main+0x50>

000002c0 <__vector_3>:
	}

	return 0;
}

ISR(INT2_vect){
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
	JOY_STICK = 1; 
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 0c 01 	sts	0x010C, r24
	//wake up the CPU
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <fdevopen>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	8b 01       	movw	r16, r22
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	31 f4       	brne	.+12     	; 0x2fa <fdevopen+0x1c>
 2ee:	61 15       	cp	r22, r1
 2f0:	71 05       	cpc	r23, r1
 2f2:	19 f4       	brne	.+6      	; 0x2fa <fdevopen+0x1c>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	38 c0       	rjmp	.+112    	; 0x36a <fdevopen+0x8c>
 2fa:	6e e0       	ldi	r22, 0x0E	; 14
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 ba 01 	call	0x374	; 0x374 <calloc>
 306:	fc 01       	movw	r30, r24
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	a1 f3       	breq	.-24     	; 0x2f4 <fdevopen+0x16>
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	83 83       	std	Z+3, r24	; 0x03
 310:	01 15       	cp	r16, r1
 312:	11 05       	cpc	r17, r1
 314:	71 f0       	breq	.+28     	; 0x332 <fdevopen+0x54>
 316:	13 87       	std	Z+11, r17	; 0x0b
 318:	02 87       	std	Z+10, r16	; 0x0a
 31a:	81 e8       	ldi	r24, 0x81	; 129
 31c:	83 83       	std	Z+3, r24	; 0x03
 31e:	80 91 0f 01 	lds	r24, 0x010F
 322:	90 91 10 01 	lds	r25, 0x0110
 326:	89 2b       	or	r24, r25
 328:	21 f4       	brne	.+8      	; 0x332 <fdevopen+0x54>
 32a:	f0 93 10 01 	sts	0x0110, r31
 32e:	e0 93 0f 01 	sts	0x010F, r30
 332:	20 97       	sbiw	r28, 0x00	; 0
 334:	c9 f0       	breq	.+50     	; 0x368 <fdevopen+0x8a>
 336:	d1 87       	std	Z+9, r29	; 0x09
 338:	c0 87       	std	Z+8, r28	; 0x08
 33a:	83 81       	ldd	r24, Z+3	; 0x03
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	83 83       	std	Z+3, r24	; 0x03
 340:	80 91 11 01 	lds	r24, 0x0111
 344:	90 91 12 01 	lds	r25, 0x0112
 348:	89 2b       	or	r24, r25
 34a:	71 f4       	brne	.+28     	; 0x368 <fdevopen+0x8a>
 34c:	f0 93 12 01 	sts	0x0112, r31
 350:	e0 93 11 01 	sts	0x0111, r30
 354:	80 91 13 01 	lds	r24, 0x0113
 358:	90 91 14 01 	lds	r25, 0x0114
 35c:	89 2b       	or	r24, r25
 35e:	21 f4       	brne	.+8      	; 0x368 <fdevopen+0x8a>
 360:	f0 93 14 01 	sts	0x0114, r31
 364:	e0 93 13 01 	sts	0x0113, r30
 368:	cf 01       	movw	r24, r30
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <calloc>:
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	86 9f       	mul	r24, r22
 37e:	80 01       	movw	r16, r0
 380:	87 9f       	mul	r24, r23
 382:	10 0d       	add	r17, r0
 384:	96 9f       	mul	r25, r22
 386:	10 0d       	add	r17, r0
 388:	11 24       	eor	r1, r1
 38a:	c8 01       	movw	r24, r16
 38c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <malloc>
 390:	ec 01       	movw	r28, r24
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	29 f0       	breq	.+10     	; 0x3a0 <calloc+0x2c>
 396:	a8 01       	movw	r20, r16
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <memset>
 3a0:	ce 01       	movw	r24, r28
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <malloc>:
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	91 05       	cpc	r25, r1
 3b4:	10 f4       	brcc	.+4      	; 0x3ba <malloc+0xe>
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	e0 91 17 01 	lds	r30, 0x0117
 3be:	f0 91 18 01 	lds	r31, 0x0118
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	30 97       	sbiw	r30, 0x00	; 0
 3cc:	39 f1       	breq	.+78     	; 0x41c <malloc+0x70>
 3ce:	40 81       	ld	r20, Z
 3d0:	51 81       	ldd	r21, Z+1	; 0x01
 3d2:	48 17       	cp	r20, r24
 3d4:	59 07       	cpc	r21, r25
 3d6:	b8 f0       	brcs	.+46     	; 0x406 <malloc+0x5a>
 3d8:	48 17       	cp	r20, r24
 3da:	59 07       	cpc	r21, r25
 3dc:	71 f4       	brne	.+28     	; 0x3fa <malloc+0x4e>
 3de:	82 81       	ldd	r24, Z+2	; 0x02
 3e0:	93 81       	ldd	r25, Z+3	; 0x03
 3e2:	10 97       	sbiw	r26, 0x00	; 0
 3e4:	29 f0       	breq	.+10     	; 0x3f0 <malloc+0x44>
 3e6:	13 96       	adiw	r26, 0x03	; 3
 3e8:	9c 93       	st	X, r25
 3ea:	8e 93       	st	-X, r24
 3ec:	12 97       	sbiw	r26, 0x02	; 2
 3ee:	2c c0       	rjmp	.+88     	; 0x448 <malloc+0x9c>
 3f0:	90 93 18 01 	sts	0x0118, r25
 3f4:	80 93 17 01 	sts	0x0117, r24
 3f8:	27 c0       	rjmp	.+78     	; 0x448 <malloc+0x9c>
 3fa:	21 15       	cp	r18, r1
 3fc:	31 05       	cpc	r19, r1
 3fe:	31 f0       	breq	.+12     	; 0x40c <malloc+0x60>
 400:	42 17       	cp	r20, r18
 402:	53 07       	cpc	r21, r19
 404:	18 f0       	brcs	.+6      	; 0x40c <malloc+0x60>
 406:	a9 01       	movw	r20, r18
 408:	db 01       	movw	r26, r22
 40a:	01 c0       	rjmp	.+2      	; 0x40e <malloc+0x62>
 40c:	ef 01       	movw	r28, r30
 40e:	9a 01       	movw	r18, r20
 410:	bd 01       	movw	r22, r26
 412:	df 01       	movw	r26, r30
 414:	02 80       	ldd	r0, Z+2	; 0x02
 416:	f3 81       	ldd	r31, Z+3	; 0x03
 418:	e0 2d       	mov	r30, r0
 41a:	d7 cf       	rjmp	.-82     	; 0x3ca <malloc+0x1e>
 41c:	21 15       	cp	r18, r1
 41e:	31 05       	cpc	r19, r1
 420:	f9 f0       	breq	.+62     	; 0x460 <malloc+0xb4>
 422:	28 1b       	sub	r18, r24
 424:	39 0b       	sbc	r19, r25
 426:	24 30       	cpi	r18, 0x04	; 4
 428:	31 05       	cpc	r19, r1
 42a:	80 f4       	brcc	.+32     	; 0x44c <malloc+0xa0>
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	9b 81       	ldd	r25, Y+3	; 0x03
 430:	61 15       	cp	r22, r1
 432:	71 05       	cpc	r23, r1
 434:	21 f0       	breq	.+8      	; 0x43e <malloc+0x92>
 436:	fb 01       	movw	r30, r22
 438:	93 83       	std	Z+3, r25	; 0x03
 43a:	82 83       	std	Z+2, r24	; 0x02
 43c:	04 c0       	rjmp	.+8      	; 0x446 <malloc+0x9a>
 43e:	90 93 18 01 	sts	0x0118, r25
 442:	80 93 17 01 	sts	0x0117, r24
 446:	fe 01       	movw	r30, r28
 448:	32 96       	adiw	r30, 0x02	; 2
 44a:	44 c0       	rjmp	.+136    	; 0x4d4 <malloc+0x128>
 44c:	fe 01       	movw	r30, r28
 44e:	e2 0f       	add	r30, r18
 450:	f3 1f       	adc	r31, r19
 452:	81 93       	st	Z+, r24
 454:	91 93       	st	Z+, r25
 456:	22 50       	subi	r18, 0x02	; 2
 458:	31 09       	sbc	r19, r1
 45a:	39 83       	std	Y+1, r19	; 0x01
 45c:	28 83       	st	Y, r18
 45e:	3a c0       	rjmp	.+116    	; 0x4d4 <malloc+0x128>
 460:	20 91 15 01 	lds	r18, 0x0115
 464:	30 91 16 01 	lds	r19, 0x0116
 468:	23 2b       	or	r18, r19
 46a:	41 f4       	brne	.+16     	; 0x47c <malloc+0xd0>
 46c:	20 91 02 01 	lds	r18, 0x0102
 470:	30 91 03 01 	lds	r19, 0x0103
 474:	30 93 16 01 	sts	0x0116, r19
 478:	20 93 15 01 	sts	0x0115, r18
 47c:	20 91 00 01 	lds	r18, 0x0100
 480:	30 91 01 01 	lds	r19, 0x0101
 484:	21 15       	cp	r18, r1
 486:	31 05       	cpc	r19, r1
 488:	41 f4       	brne	.+16     	; 0x49a <malloc+0xee>
 48a:	2d b7       	in	r18, 0x3d	; 61
 48c:	3e b7       	in	r19, 0x3e	; 62
 48e:	40 91 04 01 	lds	r20, 0x0104
 492:	50 91 05 01 	lds	r21, 0x0105
 496:	24 1b       	sub	r18, r20
 498:	35 0b       	sbc	r19, r21
 49a:	e0 91 15 01 	lds	r30, 0x0115
 49e:	f0 91 16 01 	lds	r31, 0x0116
 4a2:	e2 17       	cp	r30, r18
 4a4:	f3 07       	cpc	r31, r19
 4a6:	a0 f4       	brcc	.+40     	; 0x4d0 <malloc+0x124>
 4a8:	2e 1b       	sub	r18, r30
 4aa:	3f 0b       	sbc	r19, r31
 4ac:	28 17       	cp	r18, r24
 4ae:	39 07       	cpc	r19, r25
 4b0:	78 f0       	brcs	.+30     	; 0x4d0 <malloc+0x124>
 4b2:	ac 01       	movw	r20, r24
 4b4:	4e 5f       	subi	r20, 0xFE	; 254
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	24 17       	cp	r18, r20
 4ba:	35 07       	cpc	r19, r21
 4bc:	48 f0       	brcs	.+18     	; 0x4d0 <malloc+0x124>
 4be:	4e 0f       	add	r20, r30
 4c0:	5f 1f       	adc	r21, r31
 4c2:	50 93 16 01 	sts	0x0116, r21
 4c6:	40 93 15 01 	sts	0x0115, r20
 4ca:	81 93       	st	Z+, r24
 4cc:	91 93       	st	Z+, r25
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <malloc+0x128>
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	cf 01       	movw	r24, r30
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <free>:
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <free+0xa>
 4e4:	87 c0       	rjmp	.+270    	; 0x5f4 <__stack+0xf5>
 4e6:	fc 01       	movw	r30, r24
 4e8:	32 97       	sbiw	r30, 0x02	; 2
 4ea:	13 82       	std	Z+3, r1	; 0x03
 4ec:	12 82       	std	Z+2, r1	; 0x02
 4ee:	c0 91 17 01 	lds	r28, 0x0117
 4f2:	d0 91 18 01 	lds	r29, 0x0118
 4f6:	20 97       	sbiw	r28, 0x00	; 0
 4f8:	81 f4       	brne	.+32     	; 0x51a <__stack+0x1b>
 4fa:	20 81       	ld	r18, Z
 4fc:	31 81       	ldd	r19, Z+1	; 0x01
 4fe:	28 0f       	add	r18, r24
 500:	39 1f       	adc	r19, r25
 502:	80 91 15 01 	lds	r24, 0x0115
 506:	90 91 16 01 	lds	r25, 0x0116
 50a:	82 17       	cp	r24, r18
 50c:	93 07       	cpc	r25, r19
 50e:	79 f5       	brne	.+94     	; 0x56e <__stack+0x6f>
 510:	f0 93 16 01 	sts	0x0116, r31
 514:	e0 93 15 01 	sts	0x0115, r30
 518:	6d c0       	rjmp	.+218    	; 0x5f4 <__stack+0xf5>
 51a:	de 01       	movw	r26, r28
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	ae 17       	cp	r26, r30
 522:	bf 07       	cpc	r27, r31
 524:	50 f4       	brcc	.+20     	; 0x53a <__stack+0x3b>
 526:	12 96       	adiw	r26, 0x02	; 2
 528:	4d 91       	ld	r20, X+
 52a:	5c 91       	ld	r21, X
 52c:	13 97       	sbiw	r26, 0x03	; 3
 52e:	9d 01       	movw	r18, r26
 530:	41 15       	cp	r20, r1
 532:	51 05       	cpc	r21, r1
 534:	09 f1       	breq	.+66     	; 0x578 <__stack+0x79>
 536:	da 01       	movw	r26, r20
 538:	f3 cf       	rjmp	.-26     	; 0x520 <__stack+0x21>
 53a:	b3 83       	std	Z+3, r27	; 0x03
 53c:	a2 83       	std	Z+2, r26	; 0x02
 53e:	40 81       	ld	r20, Z
 540:	51 81       	ldd	r21, Z+1	; 0x01
 542:	84 0f       	add	r24, r20
 544:	95 1f       	adc	r25, r21
 546:	8a 17       	cp	r24, r26
 548:	9b 07       	cpc	r25, r27
 54a:	71 f4       	brne	.+28     	; 0x568 <__stack+0x69>
 54c:	8d 91       	ld	r24, X+
 54e:	9c 91       	ld	r25, X
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	84 0f       	add	r24, r20
 554:	95 1f       	adc	r25, r21
 556:	02 96       	adiw	r24, 0x02	; 2
 558:	91 83       	std	Z+1, r25	; 0x01
 55a:	80 83       	st	Z, r24
 55c:	12 96       	adiw	r26, 0x02	; 2
 55e:	8d 91       	ld	r24, X+
 560:	9c 91       	ld	r25, X
 562:	13 97       	sbiw	r26, 0x03	; 3
 564:	93 83       	std	Z+3, r25	; 0x03
 566:	82 83       	std	Z+2, r24	; 0x02
 568:	21 15       	cp	r18, r1
 56a:	31 05       	cpc	r19, r1
 56c:	29 f4       	brne	.+10     	; 0x578 <__stack+0x79>
 56e:	f0 93 18 01 	sts	0x0118, r31
 572:	e0 93 17 01 	sts	0x0117, r30
 576:	3e c0       	rjmp	.+124    	; 0x5f4 <__stack+0xf5>
 578:	d9 01       	movw	r26, r18
 57a:	13 96       	adiw	r26, 0x03	; 3
 57c:	fc 93       	st	X, r31
 57e:	ee 93       	st	-X, r30
 580:	12 97       	sbiw	r26, 0x02	; 2
 582:	4d 91       	ld	r20, X+
 584:	5d 91       	ld	r21, X+
 586:	a4 0f       	add	r26, r20
 588:	b5 1f       	adc	r27, r21
 58a:	ea 17       	cp	r30, r26
 58c:	fb 07       	cpc	r31, r27
 58e:	79 f4       	brne	.+30     	; 0x5ae <__stack+0xaf>
 590:	80 81       	ld	r24, Z
 592:	91 81       	ldd	r25, Z+1	; 0x01
 594:	84 0f       	add	r24, r20
 596:	95 1f       	adc	r25, r21
 598:	02 96       	adiw	r24, 0x02	; 2
 59a:	d9 01       	movw	r26, r18
 59c:	11 96       	adiw	r26, 0x01	; 1
 59e:	9c 93       	st	X, r25
 5a0:	8e 93       	st	-X, r24
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	13 96       	adiw	r26, 0x03	; 3
 5a8:	9c 93       	st	X, r25
 5aa:	8e 93       	st	-X, r24
 5ac:	12 97       	sbiw	r26, 0x02	; 2
 5ae:	e0 e0       	ldi	r30, 0x00	; 0
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	9b 81       	ldd	r25, Y+3	; 0x03
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <__stack+0xc1>
 5ba:	fe 01       	movw	r30, r28
 5bc:	ec 01       	movw	r28, r24
 5be:	f9 cf       	rjmp	.-14     	; 0x5b2 <__stack+0xb3>
 5c0:	ce 01       	movw	r24, r28
 5c2:	02 96       	adiw	r24, 0x02	; 2
 5c4:	28 81       	ld	r18, Y
 5c6:	39 81       	ldd	r19, Y+1	; 0x01
 5c8:	82 0f       	add	r24, r18
 5ca:	93 1f       	adc	r25, r19
 5cc:	20 91 15 01 	lds	r18, 0x0115
 5d0:	30 91 16 01 	lds	r19, 0x0116
 5d4:	28 17       	cp	r18, r24
 5d6:	39 07       	cpc	r19, r25
 5d8:	69 f4       	brne	.+26     	; 0x5f4 <__stack+0xf5>
 5da:	30 97       	sbiw	r30, 0x00	; 0
 5dc:	29 f4       	brne	.+10     	; 0x5e8 <__stack+0xe9>
 5de:	10 92 18 01 	sts	0x0118, r1
 5e2:	10 92 17 01 	sts	0x0117, r1
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__stack+0xed>
 5e8:	13 82       	std	Z+3, r1	; 0x03
 5ea:	12 82       	std	Z+2, r1	; 0x02
 5ec:	d0 93 16 01 	sts	0x0116, r29
 5f0:	c0 93 15 01 	sts	0x0115, r28
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <memset>:
 5fa:	dc 01       	movw	r26, r24
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <memset+0x6>
 5fe:	6d 93       	st	X+, r22
 600:	41 50       	subi	r20, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	e0 f7       	brcc	.-8      	; 0x5fe <memset+0x4>
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>

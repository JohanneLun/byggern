
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000f6c  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080019a  0080019a  0000109a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000192e  00000000  00000000  00001336  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b71  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b71  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060e  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eea  00000000  00000000  00004f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00005e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_17>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e6       	ldi	r30, 0x6C	; 108
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 39       	cpi	r26, 0x9A	; 154
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e9       	ldi	r26, 0x9A	; 154
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 3b       	cpi	r26, 0xB4	; 180
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 18 03 	call	0x630	; 0x630 <main>
  a6:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e3 ef       	ldi	r30, 0xF3	; 243
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <ADC_read+0x4>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <ADC_read+0xa>
  e0:	00 00       	nop
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	_delay_ms(2);
	//Choose channel in ADC
	*adc = 0x04 | channel;
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  e8:	80 91 9b 01 	lds	r24, 0x019B
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <ADC_read+0x12>
	//ADC_ready = 0; 
	return *adc;
  f0:	80 91 00 14 	lds	r24, 0x1400
}
  f4:	08 95       	ret

000000f6 <__vector_3>:


ISR(INT2_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
	ADC_ready = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 9b 01 	sts	0x019B, r24
	//wake up the CPU
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <CAN_init>:
uint8_t last_joystick_pos_x = 0;
uint8_t last_slider_pos_r = 0;

Message msg;

int CAN_init(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 11e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP2515_init>
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <CAN_init+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <CAN_init+0x18>
 12c:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP2515_read>
 134:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	80 7e       	andi	r24, 0xE0	; 224
 13a:	80 38       	cpi	r24, 0x80	; 128
 13c:	39 f0       	breq	.+14     	; 0x14c <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 b5 04 	call	0x96a	; 0x96a <puts>
		return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	1f c0       	rjmp	.+62     	; 0x18a <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	0e 94 26 02 	call	0x44c	; 0x44c <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	60 e6       	ldi	r22, 0x60	; 96
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	0e 94 26 02 	call	0x44c	; 0x44c <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 ee       	ldi	r22, 0xE0	; 224
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	0e 94 26 02 	call	0x44c	; 0x44c <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP2515_read>
 170:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 7e       	andi	r24, 0xE0	; 224
 176:	39 f0       	breq	.+14     	; 0x186 <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 b5 04 	call	0x96a	; 0x96a <puts>
		return 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <CAN_init+0x76>
	}
	
	return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
}
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	0e 94 ed 01 	call	0x3da	; 0x3da <MCP2515_read>
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1b6:	0e 94 c9 00 	call	0x192	; 0x192 <CAN_transmit_complete>
 1ba:	89 2b       	or	r24, r25
 1bc:	d9 f1       	breq	.+118    	; 0x234 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1be:	f7 01       	movw	r30, r14
 1c0:	60 81       	ld	r22, Z
 1c2:	66 95       	lsr	r22
 1c4:	66 95       	lsr	r22
 1c6:	66 95       	lsr	r22
 1c8:	81 e3       	ldi	r24, 0x31	; 49
 1ca:	0e 94 00 02 	call	0x400	; 0x400 <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1ce:	f7 01       	movw	r30, r14
 1d0:	60 81       	ld	r22, Z
 1d2:	62 95       	swap	r22
 1d4:	66 0f       	add	r22, r22
 1d6:	60 7e       	andi	r22, 0xE0	; 224
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 00 02 	call	0x400	; 0x400 <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1de:	f7 01       	movw	r30, r14
 1e0:	62 81       	ldd	r22, Z+2	; 0x02
 1e2:	6f 70       	andi	r22, 0x0F	; 15
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	0e 94 00 02 	call	0x400	; 0x400 <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1ea:	f7 01       	movw	r30, r14
 1ec:	82 81       	ldd	r24, Z+2	; 0x02
 1ee:	93 81       	ldd	r25, Z+3	; 0x03
 1f0:	89 30       	cpi	r24, 0x09	; 9
 1f2:	91 05       	cpc	r25, r1
 1f4:	54 f0       	brlt	.+20     	; 0x20a <CAN_send+0x62>
			msg->length = 8;
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	87 01       	movw	r16, r14
 200:	0c 5f       	subi	r16, 0xFC	; 252
 202:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	04 c0       	rjmp	.+8      	; 0x212 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	bc f3       	brlt	.-18     	; 0x1fe <CAN_send+0x56>
 210:	0e c0       	rjmp	.+28     	; 0x22e <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 212:	f8 01       	movw	r30, r16
 214:	61 91       	ld	r22, Z+
 216:	8f 01       	movw	r16, r30
 218:	8c 2f       	mov	r24, r28
 21a:	8a 5c       	subi	r24, 0xCA	; 202
 21c:	0e 94 00 02 	call	0x400	; 0x400 <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	f7 01       	movw	r30, r14
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	33 81       	ldd	r19, Z+3	; 0x03
 228:	c2 17       	cp	r28, r18
 22a:	d3 07       	cpc	r29, r19
 22c:	94 f3       	brlt	.-28     	; 0x212 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 14 02 	call	0x428	; 0x428 <MCP2515_request_to_send>
		
	}
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	0e 94 26 02 	call	0x44c	; 0x44c <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	8c e2       	ldi	r24, 0x2C	; 44
 252:	0e 94 26 02 	call	0x44c	; 0x44c <MCP2515_bit_modify>
	rx_int_flag = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 9a 01 	sts	0x019A, r24
 25c:	08 95       	ret

0000025e <CAN_create_msg>:
	
}


void CAN_create_msg(void){
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	
	uint8_t joy_pos_x = joystick_read(CHANNEL_X);
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <joystick_read>
 276:	8c 01       	movw	r16, r24
	uint8_t joy_pos_y = joystick_read(CHANNEL_Y);
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <joystick_read>
 280:	6c 01       	movw	r12, r24
	uint8_t slider_pos_r = slider_read(SLIDER_R);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 5e 02 	call	0x4bc	; 0x4bc <slider_read>
 28a:	ec 01       	movw	r28, r24
	uint8_t slider_pos_l = slider_read(SLIDER_L);
 28c:	87 e0       	ldi	r24, 0x07	; 7
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 5e 02 	call	0x4bc	; 0x4bc <slider_read>
 294:	7c 01       	movw	r14, r24
	
	printf("x_pos %d \t ", joy_pos_x);
 296:	c8 01       	movw	r24, r16
 298:	99 27       	eor	r25, r25
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	42 e5       	ldi	r20, 0x52	; 82
 2a0:	51 e0       	ldi	r21, 0x01	; 1
 2a2:	5f 93       	push	r21
 2a4:	4f 93       	push	r20
 2a6:	0e 94 a1 04 	call	0x942	; 0x942 <printf>
	printf("y_pos %d \t ", joy_pos_y);
 2aa:	96 01       	movw	r18, r12
 2ac:	33 27       	eor	r19, r19
 2ae:	3f 93       	push	r19
 2b0:	2f 93       	push	r18
 2b2:	2e e5       	ldi	r18, 0x5E	; 94
 2b4:	31 e0       	ldi	r19, 0x01	; 1
 2b6:	3f 93       	push	r19
 2b8:	2f 93       	push	r18
 2ba:	0e 94 a1 04 	call	0x942	; 0x942 <printf>
	printf("slider_l_pos %d \t ", slider_pos_l);
 2be:	c7 01       	movw	r24, r14
 2c0:	99 27       	eor	r25, r25
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	8a e6       	ldi	r24, 0x6A	; 106
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	9f 93       	push	r25
 2cc:	8f 93       	push	r24
 2ce:	0e 94 a1 04 	call	0x942	; 0x942 <printf>
	printf("slider %d \n", slider_pos_r);
 2d2:	ce 01       	movw	r24, r28
 2d4:	99 27       	eor	r25, r25
 2d6:	9f 93       	push	r25
 2d8:	8f 93       	push	r24
 2da:	8d e7       	ldi	r24, 0x7D	; 125
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	9f 93       	push	r25
 2e0:	8f 93       	push	r24
 2e2:	0e 94 a1 04 	call	0x942	; 0x942 <printf>
	
	msg.length = 3;
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 9f 01 	sts	0x019F, r25
 2ee:	80 93 9e 01 	sts	0x019E, r24
}


void CAN_create_msg(void){
	
	uint8_t joy_pos_x = joystick_read(CHANNEL_X);
 2f2:	00 93 a0 01 	sts	0x01A0, r16
	uint8_t joy_pos_y = joystick_read(CHANNEL_Y);
	uint8_t slider_pos_r = slider_read(SLIDER_R);
 2f6:	c0 93 a1 01 	sts	0x01A1, r28
	printf("slider %d \n", slider_pos_r);
	
	msg.length = 3;
	msg.data[0] = joy_pos_x;
	msg.data[1] = slider_pos_r;
	msg.ID = 0;
 2fa:	10 92 9d 01 	sts	0x019D, r1
 2fe:	10 92 9c 01 	sts	0x019C, r1
 302:	8d b7       	in	r24, 0x3d	; 61
 304:	9e b7       	in	r25, 0x3e	; 62
 306:	40 96       	adiw	r24, 0x10	; 16
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	9e bf       	out	0x3e, r25	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	8d bf       	out	0x3d, r24	; 61
	
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	08 95       	ret

00000324 <__vector_1>:

ISR(INT0_vect){
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 346:	0e 94 21 01 	call	0x242	; 0x242 <CAN_int_vect>
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_17>:

ISR(TIMER0_OVF_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	CAN_send(&msg);
 38e:	8c e9       	ldi	r24, 0x9C	; 156
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CAN_send>
	printf("can message sent\n");
 396:	89 e8       	ldi	r24, 0x89	; 137
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 b5 04 	call	0x96a	; 0x96a <puts>
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 3c0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_deactivate_SS();
 3ca:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
 3ce:	08 95       	ret

000003d0 <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 3d0:	0e 94 ef 02 	call	0x5de	; 0x5de <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 3d4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <MCP2515_reset>
 3d8:	08 95       	ret

000003da <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 3da:	cf 93       	push	r28
 3dc:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 3de:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(address);
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	data = SPI_read_write(0x00);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
 3f4:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 3f6:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
	return data;
}
 3fa:	8c 2f       	mov	r24, r28
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	d8 2f       	mov	r29, r24
 406:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 408:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(address);
 412:	8d 2f       	mov	r24, r29
 414:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(data);
 418:	8c 2f       	mov	r24, r28
 41a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_deactivate_SS();
 41e:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 42c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_activate_SS>
	if (command <= 7){
 430:	c8 30       	cpi	r28, 0x08	; 8
 432:	28 f4       	brcc	.+10     	; 0x43e <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 434:	8c 2f       	mov	r24, r28
 436:	80 68       	ori	r24, 0x80	; 128
 438:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
 43c:	03 c0       	rjmp	.+6      	; 0x444 <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	}
	SPI_deactivate_SS();
 444:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
}
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	18 2f       	mov	r17, r24
 454:	d6 2f       	mov	r29, r22
 456:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 458:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 45c:	85 e0       	ldi	r24, 0x05	; 5
 45e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(address);
 462:	81 2f       	mov	r24, r17
 464:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(mask_byte);
 468:	8d 2f       	mov	r24, r29
 46a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_read_write(data_byte);
 46e:	8c 2f       	mov	r24, r28
 470:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_read_write>
	SPI_deactivate_SS();
 474:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	08 95       	ret

00000480 <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 480:	5d 9b       	sbis	0x0b, 5	; 11
 482:	fe cf       	rjmp	.-4      	; 0x480 <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 484:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	08 95       	ret

0000048c <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 48c:	5f 9b       	sbis	0x0b, 7	; 11
 48e:	fe cf       	rjmp	.-4      	; 0x48c <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 490:	8c b1       	in	r24, 0x0c	; 12
}
 492:	08 95       	ret

00000494 <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 494:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 496:	88 e1       	ldi	r24, 0x18	; 24
 498:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 49a:	66 e4       	ldi	r22, 0x46	; 70
 49c:	72 e0       	ldi	r23, 0x02	; 2
 49e:	80 e4       	ldi	r24, 0x40	; 64
 4a0:	92 e0       	ldi	r25, 0x02	; 2
 4a2:	0e 94 56 04 	call	0x8ac	; 0x8ac <fdevopen>
 4a6:	90 93 a9 01 	sts	0x01A9, r25
 4aa:	80 93 a8 01 	sts	0x01A8, r24
	
	return 0; 
}
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	08 95       	ret

000004b4 <joystick_read>:



int joystick_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	08 95       	ret

000004bc <slider_read>:


int slider_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	08 95       	ret

000004c4 <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 4c4:	e0 91 06 01 	lds	r30, 0x0106
 4c8:	f0 91 07 01 	lds	r31, 0x0107
 4cc:	8e ea       	ldi	r24, 0xAE	; 174
 4ce:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 4d0:	e0 91 06 01 	lds	r30, 0x0106
 4d4:	f0 91 07 01 	lds	r31, 0x0107
 4d8:	81 ea       	ldi	r24, 0xA1	; 161
 4da:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 4dc:	e0 91 06 01 	lds	r30, 0x0106
 4e0:	f0 91 07 01 	lds	r31, 0x0107
 4e4:	8a ed       	ldi	r24, 0xDA	; 218
 4e6:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 4e8:	e0 91 06 01 	lds	r30, 0x0106
 4ec:	f0 91 07 01 	lds	r31, 0x0107
 4f0:	82 e1       	ldi	r24, 0x12	; 18
 4f2:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 4f4:	e0 91 06 01 	lds	r30, 0x0106
 4f8:	f0 91 07 01 	lds	r31, 0x0107
 4fc:	88 ec       	ldi	r24, 0xC8	; 200
 4fe:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 500:	e0 91 06 01 	lds	r30, 0x0106
 504:	f0 91 07 01 	lds	r31, 0x0107
 508:	88 ea       	ldi	r24, 0xA8	; 168
 50a:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 50c:	e0 91 06 01 	lds	r30, 0x0106
 510:	f0 91 07 01 	lds	r31, 0x0107
 514:	8f e3       	ldi	r24, 0x3F	; 63
 516:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 518:	e0 91 06 01 	lds	r30, 0x0106
 51c:	f0 91 07 01 	lds	r31, 0x0107
 520:	85 ed       	ldi	r24, 0xD5	; 213
 522:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 524:	e0 91 06 01 	lds	r30, 0x0106
 528:	f0 91 07 01 	lds	r31, 0x0107
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 530:	e0 91 06 01 	lds	r30, 0x0106
 534:	f0 91 07 01 	lds	r31, 0x0107
 538:	81 e8       	ldi	r24, 0x81	; 129
 53a:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 53c:	e0 91 06 01 	lds	r30, 0x0106
 540:	f0 91 07 01 	lds	r31, 0x0107
 544:	80 e5       	ldi	r24, 0x50	; 80
 546:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 548:	e0 91 06 01 	lds	r30, 0x0106
 54c:	f0 91 07 01 	lds	r31, 0x0107
 550:	89 ed       	ldi	r24, 0xD9	; 217
 552:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 554:	e0 91 06 01 	lds	r30, 0x0106
 558:	f0 91 07 01 	lds	r31, 0x0107
 55c:	81 e2       	ldi	r24, 0x21	; 33
 55e:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 560:	e0 91 06 01 	lds	r30, 0x0106
 564:	f0 91 07 01 	lds	r31, 0x0107
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 56c:	e0 91 06 01 	lds	r30, 0x0106
 570:	f0 91 07 01 	lds	r31, 0x0107
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 578:	e0 91 06 01 	lds	r30, 0x0106
 57c:	f0 91 07 01 	lds	r31, 0x0107
 580:	8b ed       	ldi	r24, 0xDB	; 219
 582:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 584:	e0 91 06 01 	lds	r30, 0x0106
 588:	f0 91 07 01 	lds	r31, 0x0107
 58c:	80 e3       	ldi	r24, 0x30	; 48
 58e:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 590:	e0 91 06 01 	lds	r30, 0x0106
 594:	f0 91 07 01 	lds	r31, 0x0107
 598:	8d ea       	ldi	r24, 0xAD	; 173
 59a:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 59c:	e0 91 06 01 	lds	r30, 0x0106
 5a0:	f0 91 07 01 	lds	r31, 0x0107
 5a4:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 5a6:	e0 91 06 01 	lds	r30, 0x0106
 5aa:	f0 91 07 01 	lds	r31, 0x0107
 5ae:	84 ea       	ldi	r24, 0xA4	; 164
 5b0:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 5b2:	e0 91 06 01 	lds	r30, 0x0106
 5b6:	f0 91 07 01 	lds	r31, 0x0107
 5ba:	86 ea       	ldi	r24, 0xA6	; 166
 5bc:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 5be:	e0 91 06 01 	lds	r30, 0x0106
 5c2:	f0 91 07 01 	lds	r31, 0x0107
 5c6:	8f ea       	ldi	r24, 0xAF	; 175
 5c8:	80 83       	st	Z, r24
 5ca:	08 95       	ret

000005cc <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 5cc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 5ce:	77 9b       	sbis	0x0e, 7	; 14
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <SPI_read_write+0x2>
	return SPDR;
 5d2:	8f b1       	in	r24, 0x0f	; 15
}
 5d4:	08 95       	ret

000005d6 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 5d6:	c4 98       	cbi	0x18, 4	; 24
 5d8:	08 95       	ret

000005da <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 5da:	c4 9a       	sbi	0x18, 4	; 24
 5dc:	08 95       	ret

000005de <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 5de:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 5e0:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/2
	set_bit(SPSR, SPI2X);
 5e2:	70 9a       	sbi	0x0e, 0	; 14
	
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 5e4:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 5e6:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 5e8:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 5ea:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_deactivate_SS>
 5ee:	08 95       	ret

000005f0 <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 5f0:	85 b7       	in	r24, 0x35	; 53
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 5f6:	80 b7       	in	r24, 0x30	; 48
 5f8:	80 62       	ori	r24, 0x20	; 32
 5fa:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 602:	85 b7       	in	r24, 0x35	; 53
 604:	82 60       	ori	r24, 0x02	; 2
 606:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 608:	8b b7       	in	r24, 0x3b	; 59
 60a:	80 64       	ori	r24, 0x40	; 64
 60c:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 60e:	8a 98       	cbi	0x11, 2	; 17
	
	//Set timer/counter0 interrupt
	//Normal mode
	clr_bit(TCCR0, WGM01);
 610:	83 b7       	in	r24, 0x33	; 51
 612:	87 7f       	andi	r24, 0xF7	; 247
 614:	83 bf       	out	0x33, r24	; 51
	clr_bit(TCCR0, WGM00);
 616:	83 b7       	in	r24, 0x33	; 51
 618:	8f 7b       	andi	r24, 0xBF	; 191
 61a:	83 bf       	out	0x33, r24	; 51
	
	//Prescaler Fosc/1024
	set_bit(TCCR0, CS02);
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	84 60       	ori	r24, 0x04	; 4
 620:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0, CS00);
 622:	83 b7       	in	r24, 0x33	; 51
 624:	81 60       	ori	r24, 0x01	; 1
 626:	83 bf       	out	0x33, r24	; 51
	
	//Interrupt enable overflow
	set_bit(TIMSK, TOIE0);
 628:	89 b7       	in	r24, 0x39	; 57
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	89 bf       	out	0x39, r24	; 57
 62e:	08 95       	ret

00000630 <main>:
//volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 630:	f8 94       	cli
	UART_init(31);
 632:	8f e1       	ldi	r24, 0x1F	; 31
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 4a 02 	call	0x494	; 0x494 <UART_init>
	register_init();
 63a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <register_init>
	oled_init();
 63e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <oled_init>
	ADC_init();
 642:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	CAN_init();
 646:	0e 94 8a 00 	call	0x114	; 0x114 <CAN_init>
	//Enable global interrupts
	sei();
 64a:	78 94       	sei
	
	

	
	while(1){
		CAN_create_msg();
 64c:	0e 94 2f 01 	call	0x25e	; 0x25e <CAN_create_msg>
		
		//printf("Y %d \t", ADC_read(CHANNEL_X));
		//printf("X %d\n", ADC_read(CHANNEL_Y));
	
		if(ADC_ready){
 650:	80 91 9b 01 	lds	r24, 0x019B
 654:	88 23       	and	r24, r24
 656:	d1 f3       	breq	.-12     	; 0x64c <main+0x1c>
			ADC_ready = 0;
 658:	10 92 9b 01 	sts	0x019B, r1
 65c:	f7 cf       	rjmp	.-18     	; 0x64c <main+0x1c>

0000065e <malloc>:
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	91 05       	cpc	r25, r1
 666:	10 f4       	brcc	.+4      	; 0x66c <malloc+0xe>
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	e0 91 ac 01 	lds	r30, 0x01AC
 670:	f0 91 ad 01 	lds	r31, 0x01AD
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a0 e0       	ldi	r26, 0x00	; 0
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	39 f1       	breq	.+78     	; 0x6ce <malloc+0x70>
 680:	40 81       	ld	r20, Z
 682:	51 81       	ldd	r21, Z+1	; 0x01
 684:	48 17       	cp	r20, r24
 686:	59 07       	cpc	r21, r25
 688:	b8 f0       	brcs	.+46     	; 0x6b8 <malloc+0x5a>
 68a:	48 17       	cp	r20, r24
 68c:	59 07       	cpc	r21, r25
 68e:	71 f4       	brne	.+28     	; 0x6ac <malloc+0x4e>
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	10 97       	sbiw	r26, 0x00	; 0
 696:	29 f0       	breq	.+10     	; 0x6a2 <malloc+0x44>
 698:	13 96       	adiw	r26, 0x03	; 3
 69a:	9c 93       	st	X, r25
 69c:	8e 93       	st	-X, r24
 69e:	12 97       	sbiw	r26, 0x02	; 2
 6a0:	2c c0       	rjmp	.+88     	; 0x6fa <malloc+0x9c>
 6a2:	90 93 ad 01 	sts	0x01AD, r25
 6a6:	80 93 ac 01 	sts	0x01AC, r24
 6aa:	27 c0       	rjmp	.+78     	; 0x6fa <malloc+0x9c>
 6ac:	21 15       	cp	r18, r1
 6ae:	31 05       	cpc	r19, r1
 6b0:	31 f0       	breq	.+12     	; 0x6be <malloc+0x60>
 6b2:	42 17       	cp	r20, r18
 6b4:	53 07       	cpc	r21, r19
 6b6:	18 f0       	brcs	.+6      	; 0x6be <malloc+0x60>
 6b8:	a9 01       	movw	r20, r18
 6ba:	db 01       	movw	r26, r22
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <malloc+0x62>
 6be:	ef 01       	movw	r28, r30
 6c0:	9a 01       	movw	r18, r20
 6c2:	bd 01       	movw	r22, r26
 6c4:	df 01       	movw	r26, r30
 6c6:	02 80       	ldd	r0, Z+2	; 0x02
 6c8:	f3 81       	ldd	r31, Z+3	; 0x03
 6ca:	e0 2d       	mov	r30, r0
 6cc:	d7 cf       	rjmp	.-82     	; 0x67c <malloc+0x1e>
 6ce:	21 15       	cp	r18, r1
 6d0:	31 05       	cpc	r19, r1
 6d2:	f9 f0       	breq	.+62     	; 0x712 <malloc+0xb4>
 6d4:	28 1b       	sub	r18, r24
 6d6:	39 0b       	sbc	r19, r25
 6d8:	24 30       	cpi	r18, 0x04	; 4
 6da:	31 05       	cpc	r19, r1
 6dc:	80 f4       	brcc	.+32     	; 0x6fe <malloc+0xa0>
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	9b 81       	ldd	r25, Y+3	; 0x03
 6e2:	61 15       	cp	r22, r1
 6e4:	71 05       	cpc	r23, r1
 6e6:	21 f0       	breq	.+8      	; 0x6f0 <malloc+0x92>
 6e8:	fb 01       	movw	r30, r22
 6ea:	93 83       	std	Z+3, r25	; 0x03
 6ec:	82 83       	std	Z+2, r24	; 0x02
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <malloc+0x9a>
 6f0:	90 93 ad 01 	sts	0x01AD, r25
 6f4:	80 93 ac 01 	sts	0x01AC, r24
 6f8:	fe 01       	movw	r30, r28
 6fa:	32 96       	adiw	r30, 0x02	; 2
 6fc:	44 c0       	rjmp	.+136    	; 0x786 <malloc+0x128>
 6fe:	fe 01       	movw	r30, r28
 700:	e2 0f       	add	r30, r18
 702:	f3 1f       	adc	r31, r19
 704:	81 93       	st	Z+, r24
 706:	91 93       	st	Z+, r25
 708:	22 50       	subi	r18, 0x02	; 2
 70a:	31 09       	sbc	r19, r1
 70c:	39 83       	std	Y+1, r19	; 0x01
 70e:	28 83       	st	Y, r18
 710:	3a c0       	rjmp	.+116    	; 0x786 <malloc+0x128>
 712:	20 91 aa 01 	lds	r18, 0x01AA
 716:	30 91 ab 01 	lds	r19, 0x01AB
 71a:	23 2b       	or	r18, r19
 71c:	41 f4       	brne	.+16     	; 0x72e <malloc+0xd0>
 71e:	20 91 02 01 	lds	r18, 0x0102
 722:	30 91 03 01 	lds	r19, 0x0103
 726:	30 93 ab 01 	sts	0x01AB, r19
 72a:	20 93 aa 01 	sts	0x01AA, r18
 72e:	20 91 00 01 	lds	r18, 0x0100
 732:	30 91 01 01 	lds	r19, 0x0101
 736:	21 15       	cp	r18, r1
 738:	31 05       	cpc	r19, r1
 73a:	41 f4       	brne	.+16     	; 0x74c <malloc+0xee>
 73c:	2d b7       	in	r18, 0x3d	; 61
 73e:	3e b7       	in	r19, 0x3e	; 62
 740:	40 91 04 01 	lds	r20, 0x0104
 744:	50 91 05 01 	lds	r21, 0x0105
 748:	24 1b       	sub	r18, r20
 74a:	35 0b       	sbc	r19, r21
 74c:	e0 91 aa 01 	lds	r30, 0x01AA
 750:	f0 91 ab 01 	lds	r31, 0x01AB
 754:	e2 17       	cp	r30, r18
 756:	f3 07       	cpc	r31, r19
 758:	a0 f4       	brcc	.+40     	; 0x782 <malloc+0x124>
 75a:	2e 1b       	sub	r18, r30
 75c:	3f 0b       	sbc	r19, r31
 75e:	28 17       	cp	r18, r24
 760:	39 07       	cpc	r19, r25
 762:	78 f0       	brcs	.+30     	; 0x782 <malloc+0x124>
 764:	ac 01       	movw	r20, r24
 766:	4e 5f       	subi	r20, 0xFE	; 254
 768:	5f 4f       	sbci	r21, 0xFF	; 255
 76a:	24 17       	cp	r18, r20
 76c:	35 07       	cpc	r19, r21
 76e:	48 f0       	brcs	.+18     	; 0x782 <malloc+0x124>
 770:	4e 0f       	add	r20, r30
 772:	5f 1f       	adc	r21, r31
 774:	50 93 ab 01 	sts	0x01AB, r21
 778:	40 93 aa 01 	sts	0x01AA, r20
 77c:	81 93       	st	Z+, r24
 77e:	91 93       	st	Z+, r25
 780:	02 c0       	rjmp	.+4      	; 0x786 <malloc+0x128>
 782:	e0 e0       	ldi	r30, 0x00	; 0
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	cf 01       	movw	r24, r30
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <free>:
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	09 f4       	brne	.+2      	; 0x798 <free+0xa>
 796:	87 c0       	rjmp	.+270    	; 0x8a6 <free+0x118>
 798:	fc 01       	movw	r30, r24
 79a:	32 97       	sbiw	r30, 0x02	; 2
 79c:	13 82       	std	Z+3, r1	; 0x03
 79e:	12 82       	std	Z+2, r1	; 0x02
 7a0:	c0 91 ac 01 	lds	r28, 0x01AC
 7a4:	d0 91 ad 01 	lds	r29, 0x01AD
 7a8:	20 97       	sbiw	r28, 0x00	; 0
 7aa:	81 f4       	brne	.+32     	; 0x7cc <free+0x3e>
 7ac:	20 81       	ld	r18, Z
 7ae:	31 81       	ldd	r19, Z+1	; 0x01
 7b0:	28 0f       	add	r18, r24
 7b2:	39 1f       	adc	r19, r25
 7b4:	80 91 aa 01 	lds	r24, 0x01AA
 7b8:	90 91 ab 01 	lds	r25, 0x01AB
 7bc:	82 17       	cp	r24, r18
 7be:	93 07       	cpc	r25, r19
 7c0:	79 f5       	brne	.+94     	; 0x820 <free+0x92>
 7c2:	f0 93 ab 01 	sts	0x01AB, r31
 7c6:	e0 93 aa 01 	sts	0x01AA, r30
 7ca:	6d c0       	rjmp	.+218    	; 0x8a6 <free+0x118>
 7cc:	de 01       	movw	r26, r28
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	ae 17       	cp	r26, r30
 7d4:	bf 07       	cpc	r27, r31
 7d6:	50 f4       	brcc	.+20     	; 0x7ec <free+0x5e>
 7d8:	12 96       	adiw	r26, 0x02	; 2
 7da:	4d 91       	ld	r20, X+
 7dc:	5c 91       	ld	r21, X
 7de:	13 97       	sbiw	r26, 0x03	; 3
 7e0:	9d 01       	movw	r18, r26
 7e2:	41 15       	cp	r20, r1
 7e4:	51 05       	cpc	r21, r1
 7e6:	09 f1       	breq	.+66     	; 0x82a <free+0x9c>
 7e8:	da 01       	movw	r26, r20
 7ea:	f3 cf       	rjmp	.-26     	; 0x7d2 <free+0x44>
 7ec:	b3 83       	std	Z+3, r27	; 0x03
 7ee:	a2 83       	std	Z+2, r26	; 0x02
 7f0:	40 81       	ld	r20, Z
 7f2:	51 81       	ldd	r21, Z+1	; 0x01
 7f4:	84 0f       	add	r24, r20
 7f6:	95 1f       	adc	r25, r21
 7f8:	8a 17       	cp	r24, r26
 7fa:	9b 07       	cpc	r25, r27
 7fc:	71 f4       	brne	.+28     	; 0x81a <free+0x8c>
 7fe:	8d 91       	ld	r24, X+
 800:	9c 91       	ld	r25, X
 802:	11 97       	sbiw	r26, 0x01	; 1
 804:	84 0f       	add	r24, r20
 806:	95 1f       	adc	r25, r21
 808:	02 96       	adiw	r24, 0x02	; 2
 80a:	91 83       	std	Z+1, r25	; 0x01
 80c:	80 83       	st	Z, r24
 80e:	12 96       	adiw	r26, 0x02	; 2
 810:	8d 91       	ld	r24, X+
 812:	9c 91       	ld	r25, X
 814:	13 97       	sbiw	r26, 0x03	; 3
 816:	93 83       	std	Z+3, r25	; 0x03
 818:	82 83       	std	Z+2, r24	; 0x02
 81a:	21 15       	cp	r18, r1
 81c:	31 05       	cpc	r19, r1
 81e:	29 f4       	brne	.+10     	; 0x82a <free+0x9c>
 820:	f0 93 ad 01 	sts	0x01AD, r31
 824:	e0 93 ac 01 	sts	0x01AC, r30
 828:	3e c0       	rjmp	.+124    	; 0x8a6 <free+0x118>
 82a:	d9 01       	movw	r26, r18
 82c:	13 96       	adiw	r26, 0x03	; 3
 82e:	fc 93       	st	X, r31
 830:	ee 93       	st	-X, r30
 832:	12 97       	sbiw	r26, 0x02	; 2
 834:	4d 91       	ld	r20, X+
 836:	5d 91       	ld	r21, X+
 838:	a4 0f       	add	r26, r20
 83a:	b5 1f       	adc	r27, r21
 83c:	ea 17       	cp	r30, r26
 83e:	fb 07       	cpc	r31, r27
 840:	79 f4       	brne	.+30     	; 0x860 <free+0xd2>
 842:	80 81       	ld	r24, Z
 844:	91 81       	ldd	r25, Z+1	; 0x01
 846:	84 0f       	add	r24, r20
 848:	95 1f       	adc	r25, r21
 84a:	02 96       	adiw	r24, 0x02	; 2
 84c:	d9 01       	movw	r26, r18
 84e:	11 96       	adiw	r26, 0x01	; 1
 850:	9c 93       	st	X, r25
 852:	8e 93       	st	-X, r24
 854:	82 81       	ldd	r24, Z+2	; 0x02
 856:	93 81       	ldd	r25, Z+3	; 0x03
 858:	13 96       	adiw	r26, 0x03	; 3
 85a:	9c 93       	st	X, r25
 85c:	8e 93       	st	-X, r24
 85e:	12 97       	sbiw	r26, 0x02	; 2
 860:	e0 e0       	ldi	r30, 0x00	; 0
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	8a 81       	ldd	r24, Y+2	; 0x02
 866:	9b 81       	ldd	r25, Y+3	; 0x03
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	19 f0       	breq	.+6      	; 0x872 <free+0xe4>
 86c:	fe 01       	movw	r30, r28
 86e:	ec 01       	movw	r28, r24
 870:	f9 cf       	rjmp	.-14     	; 0x864 <free+0xd6>
 872:	ce 01       	movw	r24, r28
 874:	02 96       	adiw	r24, 0x02	; 2
 876:	28 81       	ld	r18, Y
 878:	39 81       	ldd	r19, Y+1	; 0x01
 87a:	82 0f       	add	r24, r18
 87c:	93 1f       	adc	r25, r19
 87e:	20 91 aa 01 	lds	r18, 0x01AA
 882:	30 91 ab 01 	lds	r19, 0x01AB
 886:	28 17       	cp	r18, r24
 888:	39 07       	cpc	r19, r25
 88a:	69 f4       	brne	.+26     	; 0x8a6 <free+0x118>
 88c:	30 97       	sbiw	r30, 0x00	; 0
 88e:	29 f4       	brne	.+10     	; 0x89a <free+0x10c>
 890:	10 92 ad 01 	sts	0x01AD, r1
 894:	10 92 ac 01 	sts	0x01AC, r1
 898:	02 c0       	rjmp	.+4      	; 0x89e <free+0x110>
 89a:	13 82       	std	Z+3, r1	; 0x03
 89c:	12 82       	std	Z+2, r1	; 0x02
 89e:	d0 93 ab 01 	sts	0x01AB, r29
 8a2:	c0 93 aa 01 	sts	0x01AA, r28
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <fdevopen>:
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
 8b6:	8b 01       	movw	r16, r22
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	31 f4       	brne	.+12     	; 0x8c8 <fdevopen+0x1c>
 8bc:	61 15       	cp	r22, r1
 8be:	71 05       	cpc	r23, r1
 8c0:	19 f4       	brne	.+6      	; 0x8c8 <fdevopen+0x1c>
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	38 c0       	rjmp	.+112    	; 0x938 <fdevopen+0x8c>
 8c8:	6e e0       	ldi	r22, 0x0E	; 14
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 94 b4 06 	call	0xd68	; 0xd68 <calloc>
 8d4:	fc 01       	movw	r30, r24
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	a1 f3       	breq	.-24     	; 0x8c2 <fdevopen+0x16>
 8da:	80 e8       	ldi	r24, 0x80	; 128
 8dc:	83 83       	std	Z+3, r24	; 0x03
 8de:	01 15       	cp	r16, r1
 8e0:	11 05       	cpc	r17, r1
 8e2:	71 f0       	breq	.+28     	; 0x900 <fdevopen+0x54>
 8e4:	13 87       	std	Z+11, r17	; 0x0b
 8e6:	02 87       	std	Z+10, r16	; 0x0a
 8e8:	81 e8       	ldi	r24, 0x81	; 129
 8ea:	83 83       	std	Z+3, r24	; 0x03
 8ec:	80 91 ae 01 	lds	r24, 0x01AE
 8f0:	90 91 af 01 	lds	r25, 0x01AF
 8f4:	89 2b       	or	r24, r25
 8f6:	21 f4       	brne	.+8      	; 0x900 <fdevopen+0x54>
 8f8:	f0 93 af 01 	sts	0x01AF, r31
 8fc:	e0 93 ae 01 	sts	0x01AE, r30
 900:	20 97       	sbiw	r28, 0x00	; 0
 902:	c9 f0       	breq	.+50     	; 0x936 <fdevopen+0x8a>
 904:	d1 87       	std	Z+9, r29	; 0x09
 906:	c0 87       	std	Z+8, r28	; 0x08
 908:	83 81       	ldd	r24, Z+3	; 0x03
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	83 83       	std	Z+3, r24	; 0x03
 90e:	80 91 b0 01 	lds	r24, 0x01B0
 912:	90 91 b1 01 	lds	r25, 0x01B1
 916:	89 2b       	or	r24, r25
 918:	71 f4       	brne	.+28     	; 0x936 <fdevopen+0x8a>
 91a:	f0 93 b1 01 	sts	0x01B1, r31
 91e:	e0 93 b0 01 	sts	0x01B0, r30
 922:	80 91 b2 01 	lds	r24, 0x01B2
 926:	90 91 b3 01 	lds	r25, 0x01B3
 92a:	89 2b       	or	r24, r25
 92c:	21 f4       	brne	.+8      	; 0x936 <fdevopen+0x8a>
 92e:	f0 93 b3 01 	sts	0x01B3, r31
 932:	e0 93 b2 01 	sts	0x01B2, r30
 936:	cf 01       	movw	r24, r30
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <printf>:
 942:	a0 e0       	ldi	r26, 0x00	; 0
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e7 ea       	ldi	r30, 0xA7	; 167
 948:	f4 e0       	ldi	r31, 0x04	; 4
 94a:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__prologue_saves__+0x20>
 94e:	fe 01       	movw	r30, r28
 950:	35 96       	adiw	r30, 0x05	; 5
 952:	61 91       	ld	r22, Z+
 954:	71 91       	ld	r23, Z+
 956:	af 01       	movw	r20, r30
 958:	80 91 b0 01 	lds	r24, 0x01B0
 95c:	90 91 b1 01 	lds	r25, 0x01B1
 960:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vfprintf>
 964:	e2 e0       	ldi	r30, 0x02	; 2
 966:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__epilogue_restores__+0x20>

0000096a <puts>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	e0 91 b0 01 	lds	r30, 0x01B0
 976:	f0 91 b1 01 	lds	r31, 0x01B1
 97a:	23 81       	ldd	r18, Z+3	; 0x03
 97c:	21 ff       	sbrs	r18, 1
 97e:	1b c0       	rjmp	.+54     	; 0x9b6 <puts+0x4c>
 980:	ec 01       	movw	r28, r24
 982:	00 e0       	ldi	r16, 0x00	; 0
 984:	10 e0       	ldi	r17, 0x00	; 0
 986:	89 91       	ld	r24, Y+
 988:	60 91 b0 01 	lds	r22, 0x01B0
 98c:	70 91 b1 01 	lds	r23, 0x01B1
 990:	db 01       	movw	r26, r22
 992:	18 96       	adiw	r26, 0x08	; 8
 994:	ed 91       	ld	r30, X+
 996:	fc 91       	ld	r31, X
 998:	19 97       	sbiw	r26, 0x09	; 9
 99a:	88 23       	and	r24, r24
 99c:	31 f0       	breq	.+12     	; 0x9aa <puts+0x40>
 99e:	09 95       	icall
 9a0:	89 2b       	or	r24, r25
 9a2:	89 f3       	breq	.-30     	; 0x986 <puts+0x1c>
 9a4:	0f ef       	ldi	r16, 0xFF	; 255
 9a6:	1f ef       	ldi	r17, 0xFF	; 255
 9a8:	ee cf       	rjmp	.-36     	; 0x986 <puts+0x1c>
 9aa:	8a e0       	ldi	r24, 0x0A	; 10
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <puts+0x4c>
 9b2:	c8 01       	movw	r24, r16
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <puts+0x50>
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	9f ef       	ldi	r25, 0xFF	; 255
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <vfprintf>:
 9c4:	ac e0       	ldi	r26, 0x0C	; 12
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	e8 ee       	ldi	r30, 0xE8	; 232
 9ca:	f4 e0       	ldi	r31, 0x04	; 4
 9cc:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__prologue_saves__>
 9d0:	7c 01       	movw	r14, r24
 9d2:	6b 01       	movw	r12, r22
 9d4:	8a 01       	movw	r16, r20
 9d6:	fc 01       	movw	r30, r24
 9d8:	17 82       	std	Z+7, r1	; 0x07
 9da:	16 82       	std	Z+6, r1	; 0x06
 9dc:	83 81       	ldd	r24, Z+3	; 0x03
 9de:	81 ff       	sbrs	r24, 1
 9e0:	bd c1       	rjmp	.+890    	; 0xd5c <vfprintf+0x398>
 9e2:	ce 01       	movw	r24, r28
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	4c 01       	movw	r8, r24
 9e8:	f7 01       	movw	r30, r14
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	f6 01       	movw	r30, r12
 9ee:	93 fd       	sbrc	r25, 3
 9f0:	85 91       	lpm	r24, Z+
 9f2:	93 ff       	sbrs	r25, 3
 9f4:	81 91       	ld	r24, Z+
 9f6:	6f 01       	movw	r12, r30
 9f8:	88 23       	and	r24, r24
 9fa:	09 f4       	brne	.+2      	; 0x9fe <vfprintf+0x3a>
 9fc:	ab c1       	rjmp	.+854    	; 0xd54 <vfprintf+0x390>
 9fe:	85 32       	cpi	r24, 0x25	; 37
 a00:	39 f4       	brne	.+14     	; 0xa10 <vfprintf+0x4c>
 a02:	93 fd       	sbrc	r25, 3
 a04:	85 91       	lpm	r24, Z+
 a06:	93 ff       	sbrs	r25, 3
 a08:	81 91       	ld	r24, Z+
 a0a:	6f 01       	movw	r12, r30
 a0c:	85 32       	cpi	r24, 0x25	; 37
 a0e:	29 f4       	brne	.+10     	; 0xa1a <vfprintf+0x56>
 a10:	b7 01       	movw	r22, r14
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 a18:	e7 cf       	rjmp	.-50     	; 0x9e8 <vfprintf+0x24>
 a1a:	51 2c       	mov	r5, r1
 a1c:	31 2c       	mov	r3, r1
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	20 32       	cpi	r18, 0x20	; 32
 a22:	a0 f4       	brcc	.+40     	; 0xa4c <vfprintf+0x88>
 a24:	8b 32       	cpi	r24, 0x2B	; 43
 a26:	69 f0       	breq	.+26     	; 0xa42 <vfprintf+0x7e>
 a28:	30 f4       	brcc	.+12     	; 0xa36 <vfprintf+0x72>
 a2a:	80 32       	cpi	r24, 0x20	; 32
 a2c:	59 f0       	breq	.+22     	; 0xa44 <vfprintf+0x80>
 a2e:	83 32       	cpi	r24, 0x23	; 35
 a30:	69 f4       	brne	.+26     	; 0xa4c <vfprintf+0x88>
 a32:	20 61       	ori	r18, 0x10	; 16
 a34:	2c c0       	rjmp	.+88     	; 0xa8e <vfprintf+0xca>
 a36:	8d 32       	cpi	r24, 0x2D	; 45
 a38:	39 f0       	breq	.+14     	; 0xa48 <vfprintf+0x84>
 a3a:	80 33       	cpi	r24, 0x30	; 48
 a3c:	39 f4       	brne	.+14     	; 0xa4c <vfprintf+0x88>
 a3e:	21 60       	ori	r18, 0x01	; 1
 a40:	26 c0       	rjmp	.+76     	; 0xa8e <vfprintf+0xca>
 a42:	22 60       	ori	r18, 0x02	; 2
 a44:	24 60       	ori	r18, 0x04	; 4
 a46:	23 c0       	rjmp	.+70     	; 0xa8e <vfprintf+0xca>
 a48:	28 60       	ori	r18, 0x08	; 8
 a4a:	21 c0       	rjmp	.+66     	; 0xa8e <vfprintf+0xca>
 a4c:	27 fd       	sbrc	r18, 7
 a4e:	27 c0       	rjmp	.+78     	; 0xa9e <vfprintf+0xda>
 a50:	30 ed       	ldi	r19, 0xD0	; 208
 a52:	38 0f       	add	r19, r24
 a54:	3a 30       	cpi	r19, 0x0A	; 10
 a56:	78 f4       	brcc	.+30     	; 0xa76 <vfprintf+0xb2>
 a58:	26 ff       	sbrs	r18, 6
 a5a:	06 c0       	rjmp	.+12     	; 0xa68 <vfprintf+0xa4>
 a5c:	fa e0       	ldi	r31, 0x0A	; 10
 a5e:	5f 9e       	mul	r5, r31
 a60:	30 0d       	add	r19, r0
 a62:	11 24       	eor	r1, r1
 a64:	53 2e       	mov	r5, r19
 a66:	13 c0       	rjmp	.+38     	; 0xa8e <vfprintf+0xca>
 a68:	8a e0       	ldi	r24, 0x0A	; 10
 a6a:	38 9e       	mul	r3, r24
 a6c:	30 0d       	add	r19, r0
 a6e:	11 24       	eor	r1, r1
 a70:	33 2e       	mov	r3, r19
 a72:	20 62       	ori	r18, 0x20	; 32
 a74:	0c c0       	rjmp	.+24     	; 0xa8e <vfprintf+0xca>
 a76:	8e 32       	cpi	r24, 0x2E	; 46
 a78:	21 f4       	brne	.+8      	; 0xa82 <vfprintf+0xbe>
 a7a:	26 fd       	sbrc	r18, 6
 a7c:	6b c1       	rjmp	.+726    	; 0xd54 <vfprintf+0x390>
 a7e:	20 64       	ori	r18, 0x40	; 64
 a80:	06 c0       	rjmp	.+12     	; 0xa8e <vfprintf+0xca>
 a82:	8c 36       	cpi	r24, 0x6C	; 108
 a84:	11 f4       	brne	.+4      	; 0xa8a <vfprintf+0xc6>
 a86:	20 68       	ori	r18, 0x80	; 128
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <vfprintf+0xca>
 a8a:	88 36       	cpi	r24, 0x68	; 104
 a8c:	41 f4       	brne	.+16     	; 0xa9e <vfprintf+0xda>
 a8e:	f6 01       	movw	r30, r12
 a90:	93 fd       	sbrc	r25, 3
 a92:	85 91       	lpm	r24, Z+
 a94:	93 ff       	sbrs	r25, 3
 a96:	81 91       	ld	r24, Z+
 a98:	6f 01       	movw	r12, r30
 a9a:	81 11       	cpse	r24, r1
 a9c:	c1 cf       	rjmp	.-126    	; 0xa20 <vfprintf+0x5c>
 a9e:	98 2f       	mov	r25, r24
 aa0:	9f 7d       	andi	r25, 0xDF	; 223
 aa2:	95 54       	subi	r25, 0x45	; 69
 aa4:	93 30       	cpi	r25, 0x03	; 3
 aa6:	28 f4       	brcc	.+10     	; 0xab2 <vfprintf+0xee>
 aa8:	0c 5f       	subi	r16, 0xFC	; 252
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	ff e3       	ldi	r31, 0x3F	; 63
 aae:	f9 83       	std	Y+1, r31	; 0x01
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <vfprintf+0x108>
 ab2:	83 36       	cpi	r24, 0x63	; 99
 ab4:	31 f0       	breq	.+12     	; 0xac2 <vfprintf+0xfe>
 ab6:	83 37       	cpi	r24, 0x73	; 115
 ab8:	71 f0       	breq	.+28     	; 0xad6 <vfprintf+0x112>
 aba:	83 35       	cpi	r24, 0x53	; 83
 abc:	09 f0       	breq	.+2      	; 0xac0 <vfprintf+0xfc>
 abe:	5b c0       	rjmp	.+182    	; 0xb76 <vfprintf+0x1b2>
 ac0:	22 c0       	rjmp	.+68     	; 0xb06 <vfprintf+0x142>
 ac2:	f8 01       	movw	r30, r16
 ac4:	80 81       	ld	r24, Z
 ac6:	89 83       	std	Y+1, r24	; 0x01
 ac8:	0e 5f       	subi	r16, 0xFE	; 254
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	44 24       	eor	r4, r4
 ace:	43 94       	inc	r4
 ad0:	51 2c       	mov	r5, r1
 ad2:	54 01       	movw	r10, r8
 ad4:	15 c0       	rjmp	.+42     	; 0xb00 <vfprintf+0x13c>
 ad6:	38 01       	movw	r6, r16
 ad8:	f2 e0       	ldi	r31, 0x02	; 2
 ada:	6f 0e       	add	r6, r31
 adc:	71 1c       	adc	r7, r1
 ade:	f8 01       	movw	r30, r16
 ae0:	a0 80       	ld	r10, Z
 ae2:	b1 80       	ldd	r11, Z+1	; 0x01
 ae4:	26 ff       	sbrs	r18, 6
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <vfprintf+0x12a>
 ae8:	65 2d       	mov	r22, r5
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <vfprintf+0x12e>
 aee:	6f ef       	ldi	r22, 0xFF	; 255
 af0:	7f ef       	ldi	r23, 0xFF	; 255
 af2:	c5 01       	movw	r24, r10
 af4:	2c 87       	std	Y+12, r18	; 0x0c
 af6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strnlen>
 afa:	2c 01       	movw	r4, r24
 afc:	83 01       	movw	r16, r6
 afe:	2c 85       	ldd	r18, Y+12	; 0x0c
 b00:	2f 77       	andi	r18, 0x7F	; 127
 b02:	22 2e       	mov	r2, r18
 b04:	17 c0       	rjmp	.+46     	; 0xb34 <vfprintf+0x170>
 b06:	38 01       	movw	r6, r16
 b08:	f2 e0       	ldi	r31, 0x02	; 2
 b0a:	6f 0e       	add	r6, r31
 b0c:	71 1c       	adc	r7, r1
 b0e:	f8 01       	movw	r30, r16
 b10:	a0 80       	ld	r10, Z
 b12:	b1 80       	ldd	r11, Z+1	; 0x01
 b14:	26 ff       	sbrs	r18, 6
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <vfprintf+0x15a>
 b18:	65 2d       	mov	r22, r5
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x15e>
 b1e:	6f ef       	ldi	r22, 0xFF	; 255
 b20:	7f ef       	ldi	r23, 0xFF	; 255
 b22:	c5 01       	movw	r24, r10
 b24:	2c 87       	std	Y+12, r18	; 0x0c
 b26:	0e 94 d0 06 	call	0xda0	; 0xda0 <strnlen_P>
 b2a:	2c 01       	movw	r4, r24
 b2c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b2e:	20 68       	ori	r18, 0x80	; 128
 b30:	22 2e       	mov	r2, r18
 b32:	83 01       	movw	r16, r6
 b34:	23 fc       	sbrc	r2, 3
 b36:	1b c0       	rjmp	.+54     	; 0xb6e <vfprintf+0x1aa>
 b38:	83 2d       	mov	r24, r3
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	48 16       	cp	r4, r24
 b3e:	59 06       	cpc	r5, r25
 b40:	b0 f4       	brcc	.+44     	; 0xb6e <vfprintf+0x1aa>
 b42:	b7 01       	movw	r22, r14
 b44:	80 e2       	ldi	r24, 0x20	; 32
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 b4c:	3a 94       	dec	r3
 b4e:	f4 cf       	rjmp	.-24     	; 0xb38 <vfprintf+0x174>
 b50:	f5 01       	movw	r30, r10
 b52:	27 fc       	sbrc	r2, 7
 b54:	85 91       	lpm	r24, Z+
 b56:	27 fe       	sbrs	r2, 7
 b58:	81 91       	ld	r24, Z+
 b5a:	5f 01       	movw	r10, r30
 b5c:	b7 01       	movw	r22, r14
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 b64:	31 10       	cpse	r3, r1
 b66:	3a 94       	dec	r3
 b68:	f1 e0       	ldi	r31, 0x01	; 1
 b6a:	4f 1a       	sub	r4, r31
 b6c:	51 08       	sbc	r5, r1
 b6e:	41 14       	cp	r4, r1
 b70:	51 04       	cpc	r5, r1
 b72:	71 f7       	brne	.-36     	; 0xb50 <vfprintf+0x18c>
 b74:	e5 c0       	rjmp	.+458    	; 0xd40 <vfprintf+0x37c>
 b76:	84 36       	cpi	r24, 0x64	; 100
 b78:	11 f0       	breq	.+4      	; 0xb7e <vfprintf+0x1ba>
 b7a:	89 36       	cpi	r24, 0x69	; 105
 b7c:	39 f5       	brne	.+78     	; 0xbcc <vfprintf+0x208>
 b7e:	f8 01       	movw	r30, r16
 b80:	27 ff       	sbrs	r18, 7
 b82:	07 c0       	rjmp	.+14     	; 0xb92 <vfprintf+0x1ce>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	93 81       	ldd	r25, Z+3	; 0x03
 b8c:	0c 5f       	subi	r16, 0xFC	; 252
 b8e:	1f 4f       	sbci	r17, 0xFF	; 255
 b90:	08 c0       	rjmp	.+16     	; 0xba2 <vfprintf+0x1de>
 b92:	60 81       	ld	r22, Z
 b94:	71 81       	ldd	r23, Z+1	; 0x01
 b96:	88 27       	eor	r24, r24
 b98:	77 fd       	sbrc	r23, 7
 b9a:	80 95       	com	r24
 b9c:	98 2f       	mov	r25, r24
 b9e:	0e 5f       	subi	r16, 0xFE	; 254
 ba0:	1f 4f       	sbci	r17, 0xFF	; 255
 ba2:	2f 76       	andi	r18, 0x6F	; 111
 ba4:	b2 2e       	mov	r11, r18
 ba6:	97 ff       	sbrs	r25, 7
 ba8:	09 c0       	rjmp	.+18     	; 0xbbc <vfprintf+0x1f8>
 baa:	90 95       	com	r25
 bac:	80 95       	com	r24
 bae:	70 95       	com	r23
 bb0:	61 95       	neg	r22
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	20 68       	ori	r18, 0x80	; 128
 bba:	b2 2e       	mov	r11, r18
 bbc:	2a e0       	ldi	r18, 0x0A	; 10
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	a4 01       	movw	r20, r8
 bc2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 bc6:	a8 2e       	mov	r10, r24
 bc8:	a8 18       	sub	r10, r8
 bca:	44 c0       	rjmp	.+136    	; 0xc54 <vfprintf+0x290>
 bcc:	85 37       	cpi	r24, 0x75	; 117
 bce:	29 f4       	brne	.+10     	; 0xbda <vfprintf+0x216>
 bd0:	2f 7e       	andi	r18, 0xEF	; 239
 bd2:	b2 2e       	mov	r11, r18
 bd4:	2a e0       	ldi	r18, 0x0A	; 10
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	25 c0       	rjmp	.+74     	; 0xc24 <vfprintf+0x260>
 bda:	f2 2f       	mov	r31, r18
 bdc:	f9 7f       	andi	r31, 0xF9	; 249
 bde:	bf 2e       	mov	r11, r31
 be0:	8f 36       	cpi	r24, 0x6F	; 111
 be2:	c1 f0       	breq	.+48     	; 0xc14 <vfprintf+0x250>
 be4:	18 f4       	brcc	.+6      	; 0xbec <vfprintf+0x228>
 be6:	88 35       	cpi	r24, 0x58	; 88
 be8:	79 f0       	breq	.+30     	; 0xc08 <vfprintf+0x244>
 bea:	b4 c0       	rjmp	.+360    	; 0xd54 <vfprintf+0x390>
 bec:	80 37       	cpi	r24, 0x70	; 112
 bee:	19 f0       	breq	.+6      	; 0xbf6 <vfprintf+0x232>
 bf0:	88 37       	cpi	r24, 0x78	; 120
 bf2:	21 f0       	breq	.+8      	; 0xbfc <vfprintf+0x238>
 bf4:	af c0       	rjmp	.+350    	; 0xd54 <vfprintf+0x390>
 bf6:	2f 2f       	mov	r18, r31
 bf8:	20 61       	ori	r18, 0x10	; 16
 bfa:	b2 2e       	mov	r11, r18
 bfc:	b4 fe       	sbrs	r11, 4
 bfe:	0d c0       	rjmp	.+26     	; 0xc1a <vfprintf+0x256>
 c00:	8b 2d       	mov	r24, r11
 c02:	84 60       	ori	r24, 0x04	; 4
 c04:	b8 2e       	mov	r11, r24
 c06:	09 c0       	rjmp	.+18     	; 0xc1a <vfprintf+0x256>
 c08:	24 ff       	sbrs	r18, 4
 c0a:	0a c0       	rjmp	.+20     	; 0xc20 <vfprintf+0x25c>
 c0c:	9f 2f       	mov	r25, r31
 c0e:	96 60       	ori	r25, 0x06	; 6
 c10:	b9 2e       	mov	r11, r25
 c12:	06 c0       	rjmp	.+12     	; 0xc20 <vfprintf+0x25c>
 c14:	28 e0       	ldi	r18, 0x08	; 8
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	05 c0       	rjmp	.+10     	; 0xc24 <vfprintf+0x260>
 c1a:	20 e1       	ldi	r18, 0x10	; 16
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x260>
 c20:	20 e1       	ldi	r18, 0x10	; 16
 c22:	32 e0       	ldi	r19, 0x02	; 2
 c24:	f8 01       	movw	r30, r16
 c26:	b7 fe       	sbrs	r11, 7
 c28:	07 c0       	rjmp	.+14     	; 0xc38 <vfprintf+0x274>
 c2a:	60 81       	ld	r22, Z
 c2c:	71 81       	ldd	r23, Z+1	; 0x01
 c2e:	82 81       	ldd	r24, Z+2	; 0x02
 c30:	93 81       	ldd	r25, Z+3	; 0x03
 c32:	0c 5f       	subi	r16, 0xFC	; 252
 c34:	1f 4f       	sbci	r17, 0xFF	; 255
 c36:	06 c0       	rjmp	.+12     	; 0xc44 <vfprintf+0x280>
 c38:	60 81       	ld	r22, Z
 c3a:	71 81       	ldd	r23, Z+1	; 0x01
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0e 5f       	subi	r16, 0xFE	; 254
 c42:	1f 4f       	sbci	r17, 0xFF	; 255
 c44:	a4 01       	movw	r20, r8
 c46:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__ultoa_invert>
 c4a:	a8 2e       	mov	r10, r24
 c4c:	a8 18       	sub	r10, r8
 c4e:	fb 2d       	mov	r31, r11
 c50:	ff 77       	andi	r31, 0x7F	; 127
 c52:	bf 2e       	mov	r11, r31
 c54:	b6 fe       	sbrs	r11, 6
 c56:	0b c0       	rjmp	.+22     	; 0xc6e <vfprintf+0x2aa>
 c58:	2b 2d       	mov	r18, r11
 c5a:	2e 7f       	andi	r18, 0xFE	; 254
 c5c:	a5 14       	cp	r10, r5
 c5e:	50 f4       	brcc	.+20     	; 0xc74 <vfprintf+0x2b0>
 c60:	b4 fe       	sbrs	r11, 4
 c62:	0a c0       	rjmp	.+20     	; 0xc78 <vfprintf+0x2b4>
 c64:	b2 fc       	sbrc	r11, 2
 c66:	08 c0       	rjmp	.+16     	; 0xc78 <vfprintf+0x2b4>
 c68:	2b 2d       	mov	r18, r11
 c6a:	2e 7e       	andi	r18, 0xEE	; 238
 c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x2b4>
 c6e:	7a 2c       	mov	r7, r10
 c70:	2b 2d       	mov	r18, r11
 c72:	03 c0       	rjmp	.+6      	; 0xc7a <vfprintf+0x2b6>
 c74:	7a 2c       	mov	r7, r10
 c76:	01 c0       	rjmp	.+2      	; 0xc7a <vfprintf+0x2b6>
 c78:	75 2c       	mov	r7, r5
 c7a:	24 ff       	sbrs	r18, 4
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x2d4>
 c7e:	fe 01       	movw	r30, r28
 c80:	ea 0d       	add	r30, r10
 c82:	f1 1d       	adc	r31, r1
 c84:	80 81       	ld	r24, Z
 c86:	80 33       	cpi	r24, 0x30	; 48
 c88:	11 f4       	brne	.+4      	; 0xc8e <vfprintf+0x2ca>
 c8a:	29 7e       	andi	r18, 0xE9	; 233
 c8c:	09 c0       	rjmp	.+18     	; 0xca0 <vfprintf+0x2dc>
 c8e:	22 ff       	sbrs	r18, 2
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x2da>
 c92:	73 94       	inc	r7
 c94:	73 94       	inc	r7
 c96:	04 c0       	rjmp	.+8      	; 0xca0 <vfprintf+0x2dc>
 c98:	82 2f       	mov	r24, r18
 c9a:	86 78       	andi	r24, 0x86	; 134
 c9c:	09 f0       	breq	.+2      	; 0xca0 <vfprintf+0x2dc>
 c9e:	73 94       	inc	r7
 ca0:	23 fd       	sbrc	r18, 3
 ca2:	13 c0       	rjmp	.+38     	; 0xcca <vfprintf+0x306>
 ca4:	20 ff       	sbrs	r18, 0
 ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <vfprintf+0x2f0>
 ca8:	5a 2c       	mov	r5, r10
 caa:	73 14       	cp	r7, r3
 cac:	18 f4       	brcc	.+6      	; 0xcb4 <vfprintf+0x2f0>
 cae:	53 0c       	add	r5, r3
 cb0:	57 18       	sub	r5, r7
 cb2:	73 2c       	mov	r7, r3
 cb4:	73 14       	cp	r7, r3
 cb6:	68 f4       	brcc	.+26     	; 0xcd2 <vfprintf+0x30e>
 cb8:	b7 01       	movw	r22, r14
 cba:	80 e2       	ldi	r24, 0x20	; 32
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	2c 87       	std	Y+12, r18	; 0x0c
 cc0:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 cc4:	73 94       	inc	r7
 cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
 cc8:	f5 cf       	rjmp	.-22     	; 0xcb4 <vfprintf+0x2f0>
 cca:	73 14       	cp	r7, r3
 ccc:	10 f4       	brcc	.+4      	; 0xcd2 <vfprintf+0x30e>
 cce:	37 18       	sub	r3, r7
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <vfprintf+0x310>
 cd2:	31 2c       	mov	r3, r1
 cd4:	24 ff       	sbrs	r18, 4
 cd6:	12 c0       	rjmp	.+36     	; 0xcfc <vfprintf+0x338>
 cd8:	b7 01       	movw	r22, r14
 cda:	80 e3       	ldi	r24, 0x30	; 48
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	2c 87       	std	Y+12, r18	; 0x0c
 ce0:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
 ce6:	22 ff       	sbrs	r18, 2
 ce8:	17 c0       	rjmp	.+46     	; 0xd18 <vfprintf+0x354>
 cea:	21 ff       	sbrs	r18, 1
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x330>
 cee:	88 e5       	ldi	r24, 0x58	; 88
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x334>
 cf4:	88 e7       	ldi	r24, 0x78	; 120
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	b7 01       	movw	r22, r14
 cfa:	0c c0       	rjmp	.+24     	; 0xd14 <vfprintf+0x350>
 cfc:	82 2f       	mov	r24, r18
 cfe:	86 78       	andi	r24, 0x86	; 134
 d00:	59 f0       	breq	.+22     	; 0xd18 <vfprintf+0x354>
 d02:	21 fd       	sbrc	r18, 1
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0x346>
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x348>
 d0a:	8b e2       	ldi	r24, 0x2B	; 43
 d0c:	27 fd       	sbrc	r18, 7
 d0e:	8d e2       	ldi	r24, 0x2D	; 45
 d10:	b7 01       	movw	r22, r14
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d18:	a5 14       	cp	r10, r5
 d1a:	38 f4       	brcc	.+14     	; 0xd2a <vfprintf+0x366>
 d1c:	b7 01       	movw	r22, r14
 d1e:	80 e3       	ldi	r24, 0x30	; 48
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d26:	5a 94       	dec	r5
 d28:	f7 cf       	rjmp	.-18     	; 0xd18 <vfprintf+0x354>
 d2a:	aa 94       	dec	r10
 d2c:	f4 01       	movw	r30, r8
 d2e:	ea 0d       	add	r30, r10
 d30:	f1 1d       	adc	r31, r1
 d32:	80 81       	ld	r24, Z
 d34:	b7 01       	movw	r22, r14
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d3c:	a1 10       	cpse	r10, r1
 d3e:	f5 cf       	rjmp	.-22     	; 0xd2a <vfprintf+0x366>
 d40:	33 20       	and	r3, r3
 d42:	09 f4       	brne	.+2      	; 0xd46 <vfprintf+0x382>
 d44:	51 ce       	rjmp	.-862    	; 0x9e8 <vfprintf+0x24>
 d46:	b7 01       	movw	r22, r14
 d48:	80 e2       	ldi	r24, 0x20	; 32
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 ed 06 	call	0xdda	; 0xdda <fputc>
 d50:	3a 94       	dec	r3
 d52:	f6 cf       	rjmp	.-20     	; 0xd40 <vfprintf+0x37c>
 d54:	f7 01       	movw	r30, r14
 d56:	86 81       	ldd	r24, Z+6	; 0x06
 d58:	97 81       	ldd	r25, Z+7	; 0x07
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x39c>
 d5c:	8f ef       	ldi	r24, 0xFF	; 255
 d5e:	9f ef       	ldi	r25, 0xFF	; 255
 d60:	2c 96       	adiw	r28, 0x0c	; 12
 d62:	e2 e1       	ldi	r30, 0x12	; 18
 d64:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__epilogue_restores__>

00000d68 <calloc>:
 d68:	0f 93       	push	r16
 d6a:	1f 93       	push	r17
 d6c:	cf 93       	push	r28
 d6e:	df 93       	push	r29
 d70:	86 9f       	mul	r24, r22
 d72:	80 01       	movw	r16, r0
 d74:	87 9f       	mul	r24, r23
 d76:	10 0d       	add	r17, r0
 d78:	96 9f       	mul	r25, r22
 d7a:	10 0d       	add	r17, r0
 d7c:	11 24       	eor	r1, r1
 d7e:	c8 01       	movw	r24, r16
 d80:	0e 94 2f 03 	call	0x65e	; 0x65e <malloc>
 d84:	ec 01       	movw	r28, r24
 d86:	00 97       	sbiw	r24, 0x00	; 0
 d88:	29 f0       	breq	.+10     	; 0xd94 <calloc+0x2c>
 d8a:	a8 01       	movw	r20, r16
 d8c:	60 e0       	ldi	r22, 0x00	; 0
 d8e:	70 e0       	ldi	r23, 0x00	; 0
 d90:	0e 94 db 06 	call	0xdb6	; 0xdb6 <memset>
 d94:	ce 01       	movw	r24, r28
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	1f 91       	pop	r17
 d9c:	0f 91       	pop	r16
 d9e:	08 95       	ret

00000da0 <strnlen_P>:
 da0:	fc 01       	movw	r30, r24
 da2:	05 90       	lpm	r0, Z+
 da4:	61 50       	subi	r22, 0x01	; 1
 da6:	70 40       	sbci	r23, 0x00	; 0
 da8:	01 10       	cpse	r0, r1
 daa:	d8 f7       	brcc	.-10     	; 0xda2 <strnlen_P+0x2>
 dac:	80 95       	com	r24
 dae:	90 95       	com	r25
 db0:	8e 0f       	add	r24, r30
 db2:	9f 1f       	adc	r25, r31
 db4:	08 95       	ret

00000db6 <memset>:
 db6:	dc 01       	movw	r26, r24
 db8:	01 c0       	rjmp	.+2      	; 0xdbc <memset+0x6>
 dba:	6d 93       	st	X+, r22
 dbc:	41 50       	subi	r20, 0x01	; 1
 dbe:	50 40       	sbci	r21, 0x00	; 0
 dc0:	e0 f7       	brcc	.-8      	; 0xdba <memset+0x4>
 dc2:	08 95       	ret

00000dc4 <strnlen>:
 dc4:	fc 01       	movw	r30, r24
 dc6:	61 50       	subi	r22, 0x01	; 1
 dc8:	70 40       	sbci	r23, 0x00	; 0
 dca:	01 90       	ld	r0, Z+
 dcc:	01 10       	cpse	r0, r1
 dce:	d8 f7       	brcc	.-10     	; 0xdc6 <strnlen+0x2>
 dd0:	80 95       	com	r24
 dd2:	90 95       	com	r25
 dd4:	8e 0f       	add	r24, r30
 dd6:	9f 1f       	adc	r25, r31
 dd8:	08 95       	ret

00000dda <fputc>:
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	18 2f       	mov	r17, r24
 de4:	09 2f       	mov	r16, r25
 de6:	eb 01       	movw	r28, r22
 de8:	8b 81       	ldd	r24, Y+3	; 0x03
 dea:	81 fd       	sbrc	r24, 1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <fputc+0x1a>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	20 c0       	rjmp	.+64     	; 0xe34 <fputc+0x5a>
 df4:	82 ff       	sbrs	r24, 2
 df6:	10 c0       	rjmp	.+32     	; 0xe18 <fputc+0x3e>
 df8:	4e 81       	ldd	r20, Y+6	; 0x06
 dfa:	5f 81       	ldd	r21, Y+7	; 0x07
 dfc:	2c 81       	ldd	r18, Y+4	; 0x04
 dfe:	3d 81       	ldd	r19, Y+5	; 0x05
 e00:	42 17       	cp	r20, r18
 e02:	53 07       	cpc	r21, r19
 e04:	7c f4       	brge	.+30     	; 0xe24 <fputc+0x4a>
 e06:	e8 81       	ld	r30, Y
 e08:	f9 81       	ldd	r31, Y+1	; 0x01
 e0a:	9f 01       	movw	r18, r30
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
 e0e:	3f 4f       	sbci	r19, 0xFF	; 255
 e10:	39 83       	std	Y+1, r19	; 0x01
 e12:	28 83       	st	Y, r18
 e14:	10 83       	st	Z, r17
 e16:	06 c0       	rjmp	.+12     	; 0xe24 <fputc+0x4a>
 e18:	e8 85       	ldd	r30, Y+8	; 0x08
 e1a:	f9 85       	ldd	r31, Y+9	; 0x09
 e1c:	81 2f       	mov	r24, r17
 e1e:	09 95       	icall
 e20:	89 2b       	or	r24, r25
 e22:	29 f7       	brne	.-54     	; 0xdee <fputc+0x14>
 e24:	2e 81       	ldd	r18, Y+6	; 0x06
 e26:	3f 81       	ldd	r19, Y+7	; 0x07
 e28:	2f 5f       	subi	r18, 0xFF	; 255
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	3f 83       	std	Y+7, r19	; 0x07
 e2e:	2e 83       	std	Y+6, r18	; 0x06
 e30:	81 2f       	mov	r24, r17
 e32:	90 2f       	mov	r25, r16
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	1f 91       	pop	r17
 e3a:	0f 91       	pop	r16
 e3c:	08 95       	ret

00000e3e <__ultoa_invert>:
 e3e:	fa 01       	movw	r30, r20
 e40:	aa 27       	eor	r26, r26
 e42:	28 30       	cpi	r18, 0x08	; 8
 e44:	51 f1       	breq	.+84     	; 0xe9a <__ultoa_invert+0x5c>
 e46:	20 31       	cpi	r18, 0x10	; 16
 e48:	81 f1       	breq	.+96     	; 0xeaa <__ultoa_invert+0x6c>
 e4a:	e8 94       	clt
 e4c:	6f 93       	push	r22
 e4e:	6e 7f       	andi	r22, 0xFE	; 254
 e50:	6e 5f       	subi	r22, 0xFE	; 254
 e52:	7f 4f       	sbci	r23, 0xFF	; 255
 e54:	8f 4f       	sbci	r24, 0xFF	; 255
 e56:	9f 4f       	sbci	r25, 0xFF	; 255
 e58:	af 4f       	sbci	r26, 0xFF	; 255
 e5a:	b1 e0       	ldi	r27, 0x01	; 1
 e5c:	3e d0       	rcall	.+124    	; 0xeda <__ultoa_invert+0x9c>
 e5e:	b4 e0       	ldi	r27, 0x04	; 4
 e60:	3c d0       	rcall	.+120    	; 0xeda <__ultoa_invert+0x9c>
 e62:	67 0f       	add	r22, r23
 e64:	78 1f       	adc	r23, r24
 e66:	89 1f       	adc	r24, r25
 e68:	9a 1f       	adc	r25, r26
 e6a:	a1 1d       	adc	r26, r1
 e6c:	68 0f       	add	r22, r24
 e6e:	79 1f       	adc	r23, r25
 e70:	8a 1f       	adc	r24, r26
 e72:	91 1d       	adc	r25, r1
 e74:	a1 1d       	adc	r26, r1
 e76:	6a 0f       	add	r22, r26
 e78:	71 1d       	adc	r23, r1
 e7a:	81 1d       	adc	r24, r1
 e7c:	91 1d       	adc	r25, r1
 e7e:	a1 1d       	adc	r26, r1
 e80:	20 d0       	rcall	.+64     	; 0xec2 <__ultoa_invert+0x84>
 e82:	09 f4       	brne	.+2      	; 0xe86 <__ultoa_invert+0x48>
 e84:	68 94       	set
 e86:	3f 91       	pop	r19
 e88:	2a e0       	ldi	r18, 0x0A	; 10
 e8a:	26 9f       	mul	r18, r22
 e8c:	11 24       	eor	r1, r1
 e8e:	30 19       	sub	r19, r0
 e90:	30 5d       	subi	r19, 0xD0	; 208
 e92:	31 93       	st	Z+, r19
 e94:	de f6       	brtc	.-74     	; 0xe4c <__ultoa_invert+0xe>
 e96:	cf 01       	movw	r24, r30
 e98:	08 95       	ret
 e9a:	46 2f       	mov	r20, r22
 e9c:	47 70       	andi	r20, 0x07	; 7
 e9e:	40 5d       	subi	r20, 0xD0	; 208
 ea0:	41 93       	st	Z+, r20
 ea2:	b3 e0       	ldi	r27, 0x03	; 3
 ea4:	0f d0       	rcall	.+30     	; 0xec4 <__ultoa_invert+0x86>
 ea6:	c9 f7       	brne	.-14     	; 0xe9a <__ultoa_invert+0x5c>
 ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <__ultoa_invert+0x58>
 eaa:	46 2f       	mov	r20, r22
 eac:	4f 70       	andi	r20, 0x0F	; 15
 eae:	40 5d       	subi	r20, 0xD0	; 208
 eb0:	4a 33       	cpi	r20, 0x3A	; 58
 eb2:	18 f0       	brcs	.+6      	; 0xeba <__ultoa_invert+0x7c>
 eb4:	49 5d       	subi	r20, 0xD9	; 217
 eb6:	31 fd       	sbrc	r19, 1
 eb8:	40 52       	subi	r20, 0x20	; 32
 eba:	41 93       	st	Z+, r20
 ebc:	02 d0       	rcall	.+4      	; 0xec2 <__ultoa_invert+0x84>
 ebe:	a9 f7       	brne	.-22     	; 0xeaa <__ultoa_invert+0x6c>
 ec0:	ea cf       	rjmp	.-44     	; 0xe96 <__ultoa_invert+0x58>
 ec2:	b4 e0       	ldi	r27, 0x04	; 4
 ec4:	a6 95       	lsr	r26
 ec6:	97 95       	ror	r25
 ec8:	87 95       	ror	r24
 eca:	77 95       	ror	r23
 ecc:	67 95       	ror	r22
 ece:	ba 95       	dec	r27
 ed0:	c9 f7       	brne	.-14     	; 0xec4 <__ultoa_invert+0x86>
 ed2:	00 97       	sbiw	r24, 0x00	; 0
 ed4:	61 05       	cpc	r22, r1
 ed6:	71 05       	cpc	r23, r1
 ed8:	08 95       	ret
 eda:	9b 01       	movw	r18, r22
 edc:	ac 01       	movw	r20, r24
 ede:	0a 2e       	mov	r0, r26
 ee0:	06 94       	lsr	r0
 ee2:	57 95       	ror	r21
 ee4:	47 95       	ror	r20
 ee6:	37 95       	ror	r19
 ee8:	27 95       	ror	r18
 eea:	ba 95       	dec	r27
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0xa2>
 eee:	62 0f       	add	r22, r18
 ef0:	73 1f       	adc	r23, r19
 ef2:	84 1f       	adc	r24, r20
 ef4:	95 1f       	adc	r25, r21
 ef6:	a0 1d       	adc	r26, r0
 ef8:	08 95       	ret

00000efa <__prologue_saves__>:
 efa:	2f 92       	push	r2
 efc:	3f 92       	push	r3
 efe:	4f 92       	push	r4
 f00:	5f 92       	push	r5
 f02:	6f 92       	push	r6
 f04:	7f 92       	push	r7
 f06:	8f 92       	push	r8
 f08:	9f 92       	push	r9
 f0a:	af 92       	push	r10
 f0c:	bf 92       	push	r11
 f0e:	cf 92       	push	r12
 f10:	df 92       	push	r13
 f12:	ef 92       	push	r14
 f14:	ff 92       	push	r15
 f16:	0f 93       	push	r16
 f18:	1f 93       	push	r17
 f1a:	cf 93       	push	r28
 f1c:	df 93       	push	r29
 f1e:	cd b7       	in	r28, 0x3d	; 61
 f20:	de b7       	in	r29, 0x3e	; 62
 f22:	ca 1b       	sub	r28, r26
 f24:	db 0b       	sbc	r29, r27
 f26:	0f b6       	in	r0, 0x3f	; 63
 f28:	f8 94       	cli
 f2a:	de bf       	out	0x3e, r29	; 62
 f2c:	0f be       	out	0x3f, r0	; 63
 f2e:	cd bf       	out	0x3d, r28	; 61
 f30:	09 94       	ijmp

00000f32 <__epilogue_restores__>:
 f32:	2a 88       	ldd	r2, Y+18	; 0x12
 f34:	39 88       	ldd	r3, Y+17	; 0x11
 f36:	48 88       	ldd	r4, Y+16	; 0x10
 f38:	5f 84       	ldd	r5, Y+15	; 0x0f
 f3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f40:	9b 84       	ldd	r9, Y+11	; 0x0b
 f42:	aa 84       	ldd	r10, Y+10	; 0x0a
 f44:	b9 84       	ldd	r11, Y+9	; 0x09
 f46:	c8 84       	ldd	r12, Y+8	; 0x08
 f48:	df 80       	ldd	r13, Y+7	; 0x07
 f4a:	ee 80       	ldd	r14, Y+6	; 0x06
 f4c:	fd 80       	ldd	r15, Y+5	; 0x05
 f4e:	0c 81       	ldd	r16, Y+4	; 0x04
 f50:	1b 81       	ldd	r17, Y+3	; 0x03
 f52:	aa 81       	ldd	r26, Y+2	; 0x02
 f54:	b9 81       	ldd	r27, Y+1	; 0x01
 f56:	ce 0f       	add	r28, r30
 f58:	d1 1d       	adc	r29, r1
 f5a:	0f b6       	in	r0, 0x3f	; 63
 f5c:	f8 94       	cli
 f5e:	de bf       	out	0x3e, r29	; 62
 f60:	0f be       	out	0x3f, r0	; 63
 f62:	cd bf       	out	0x3d, r28	; 61
 f64:	ed 01       	movw	r28, r26
 f66:	08 95       	ret

00000f68 <_exit>:
 f68:	f8 94       	cli

00000f6a <__stop_program>:
 f6a:	ff cf       	rjmp	.-2      	; 0xf6a <__stop_program>

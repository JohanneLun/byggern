
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800152  00800152  00000d12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001875  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b77  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5d  00000000  00000000  0000336e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000568  00000000  00000000  00003ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b7  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f5d  00000000  00000000  000049eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  00005948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e2       	ldi	r30, 0x2C	; 44
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 35       	cpi	r26, 0x52	; 82
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e5       	ldi	r26, 0x52	; 82
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 36       	cpi	r26, 0x60	; 96
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 a8 02 	call	0x550	; 0x550 <main>
  a6:	0c 94 14 06 	jmp	0xc28	; 0xc28 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  dc:	80 91 53 01 	lds	r24, 0x0153
  e0:	88 23       	and	r24, r24
  e2:	e1 f3       	breq	.-8      	; 0xdc <ADC_read+0x6>
		
	return *adc;
  e4:	80 91 00 14 	lds	r24, 0x1400
}
  e8:	08 95       	ret

000000ea <__vector_3>:


ISR(INT2_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	ADC_ready = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 53 01 	sts	0x0153, r24
	//wake up the CPU
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <CAN_init>:
#include <util/delay.h>
#include <stdio.h>

extern volatile uint8_t rx_int_flag; 

int CAN_init(){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 112:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <CAN_init+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <CAN_init+0x18>
 120:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 128:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	80 7e       	andi	r24, 0xE0	; 224
 12e:	80 38       	cpi	r24, 0x80	; 128
 130:	39 f0       	breq	.+14     	; 0x140 <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 c4 05 	call	0xb88	; 0xb88 <puts>
		return 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	1f c0       	rjmp	.+62     	; 0x17e <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	60 e6       	ldi	r22, 0x60	; 96
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 ee       	ldi	r22, 0xE0	; 224
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 164:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 7e       	andi	r24, 0xE0	; 224
 16a:	39 f0       	breq	.+14     	; 0x17a <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 c4 05 	call	0xb88	; 0xb88 <puts>
		return 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <CAN_init+0x76>
	}
	
	return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 196:	81 70       	andi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1aa:	0e 94 c3 00 	call	0x186	; 0x186 <CAN_transmit_complete>
 1ae:	89 2b       	or	r24, r25
 1b0:	d9 f1       	breq	.+118    	; 0x228 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1b2:	f7 01       	movw	r30, r14
 1b4:	60 81       	ld	r22, Z
 1b6:	66 95       	lsr	r22
 1b8:	66 95       	lsr	r22
 1ba:	66 95       	lsr	r22
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1c2:	f7 01       	movw	r30, r14
 1c4:	60 81       	ld	r22, Z
 1c6:	62 95       	swap	r22
 1c8:	66 0f       	add	r22, r22
 1ca:	60 7e       	andi	r22, 0xE0	; 224
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1d2:	f7 01       	movw	r30, r14
 1d4:	62 81       	ldd	r22, Z+2	; 0x02
 1d6:	6f 70       	andi	r22, 0x0F	; 15
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1de:	f7 01       	movw	r30, r14
 1e0:	82 81       	ldd	r24, Z+2	; 0x02
 1e2:	93 81       	ldd	r25, Z+3	; 0x03
 1e4:	89 30       	cpi	r24, 0x09	; 9
 1e6:	91 05       	cpc	r25, r1
 1e8:	54 f0       	brlt	.+20     	; 0x1fe <CAN_send+0x62>
			msg->length = 8;
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	93 83       	std	Z+3, r25	; 0x03
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	87 01       	movw	r16, r14
 1f4:	0c 5f       	subi	r16, 0xFC	; 252
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 1fe:	18 16       	cp	r1, r24
 200:	19 06       	cpc	r1, r25
 202:	bc f3       	brlt	.-18     	; 0x1f2 <CAN_send+0x56>
 204:	0e c0       	rjmp	.+28     	; 0x222 <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 206:	f8 01       	movw	r30, r16
 208:	61 91       	ld	r22, Z+
 20a:	8f 01       	movw	r16, r30
 20c:	8c 2f       	mov	r24, r28
 20e:	8a 5c       	subi	r24, 0xCA	; 202
 210:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	f7 01       	movw	r30, r14
 218:	22 81       	ldd	r18, Z+2	; 0x02
 21a:	33 81       	ldd	r19, Z+3	; 0x03
 21c:	c2 17       	cp	r28, r18
 21e:	d3 07       	cpc	r29, r19
 220:	94 f3       	brlt	.-28     	; 0x206 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 81 01 	call	0x302	; 0x302 <MCP2515_request_to_send>
		
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	rx_int_flag = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 52 01 	sts	0x0152, r24
 250:	08 95       	ret

00000252 <__vector_1>:
	msg.ID = ID;
	
	return msg;
}

ISR(INT0_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 274:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_int_vect>
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 29a:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_deactivate_SS();
 2a4:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
 2a8:	08 95       	ret

000002aa <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 2aa:	0e 94 8e 02 	call	0x51c	; 0x51c <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 2ae:	0e 94 4d 01 	call	0x29a	; 0x29a <MCP2515_reset>
 2b2:	08 95       	ret

000002b4 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 2b8:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(address);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	data = SPI_read_write(0x00);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
 2ce:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 2d0:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
	return data;
}
 2d4:	8c 2f       	mov	r24, r28
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	d8 2f       	mov	r29, r24
 2e0:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 2e2:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(address);
 2ec:	8d 2f       	mov	r24, r29
 2ee:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(data);
 2f2:	8c 2f       	mov	r24, r28
 2f4:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_deactivate_SS();
 2f8:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 306:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_activate_SS>
	if (command <= 7){
 30a:	c8 30       	cpi	r28, 0x08	; 8
 30c:	28 f4       	brcc	.+10     	; 0x318 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 30e:	8c 2f       	mov	r24, r28
 310:	80 68       	ori	r24, 0x80	; 128
 312:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
 316:	03 c0       	rjmp	.+6      	; 0x31e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	}
	SPI_deactivate_SS();
 31e:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	18 2f       	mov	r17, r24
 32e:	d6 2f       	mov	r29, r22
 330:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 332:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(address);
 33c:	81 2f       	mov	r24, r17
 33e:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(mask_byte);
 342:	8d 2f       	mov	r24, r29
 344:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_read_write(data_byte);
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 85 02 	call	0x50a	; 0x50a <SPI_read_write>
	SPI_deactivate_SS();
 34e:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 35a:	5d 9b       	sbis	0x0b, 5	; 11
 35c:	fe cf       	rjmp	.-4      	; 0x35a <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 35e:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret

00000366 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 366:	5f 9b       	sbis	0x0b, 7	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 36a:	8c b1       	in	r24, 0x0c	; 12
}
 36c:	08 95       	ret

0000036e <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 36e:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 370:	88 e1       	ldi	r24, 0x18	; 24
 372:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 374:	63 eb       	ldi	r22, 0xB3	; 179
 376:	71 e0       	ldi	r23, 0x01	; 1
 378:	8d ea       	ldi	r24, 0xAD	; 173
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fdevopen>
 380:	90 93 55 01 	sts	0x0155, r25
 384:	80 93 54 01 	sts	0x0154, r24
	
	return 0; 
}
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret

0000038e <slider_read>:
	}
}


int slider_read(int channel){
	double pos = ADC_read(channel);
 38e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 392:	68 2f       	mov	r22, r24
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__floatunsisf>
	return pos/255*100;
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	4f e7       	ldi	r20, 0x7F	; 127
 3a4:	53 e4       	ldi	r21, 0x43	; 67
 3a6:	0e 94 c8 02 	call	0x590	; 0x590 <__divsf3>
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	48 ec       	ldi	r20, 0xC8	; 200
 3b0:	52 e4       	ldi	r21, 0x42	; 66
 3b2:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 3b6:	0e 94 30 03 	call	0x660	; 0x660 <__fixsfsi>
}
 3ba:	cb 01       	movw	r24, r22
 3bc:	08 95       	ret

000003be <send_slider_pos>:
	msg.ID = 0;
	
	CAN_send(&msg);
}

void send_slider_pos(void){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	2c 97       	sbiw	r28, 0x0c	; 12
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
	int joy_pos = slider_read(6);
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 c7 01 	call	0x38e	; 0x38e <slider_read>
	Message msg;
	
	msg.length = 1;
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	3c 83       	std	Y+4, r19	; 0x04
 3e0:	2b 83       	std	Y+3, r18	; 0x03
	msg.data[0] = (uint8_t)joy_pos;
 3e2:	8d 83       	std	Y+5, r24	; 0x05
	msg.ID = 0;
 3e4:	1a 82       	std	Y+2, r1	; 0x02
 3e6:	19 82       	std	Y+1, r1	; 0x01
	
	CAN_send(&msg);
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 ce 00 	call	0x19c	; 0x19c <CAN_send>
}
 3f0:	2c 96       	adiw	r28, 0x0c	; 12
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 402:	e0 91 06 01 	lds	r30, 0x0106
 406:	f0 91 07 01 	lds	r31, 0x0107
 40a:	8e ea       	ldi	r24, 0xAE	; 174
 40c:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 40e:	e0 91 06 01 	lds	r30, 0x0106
 412:	f0 91 07 01 	lds	r31, 0x0107
 416:	81 ea       	ldi	r24, 0xA1	; 161
 418:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 41a:	e0 91 06 01 	lds	r30, 0x0106
 41e:	f0 91 07 01 	lds	r31, 0x0107
 422:	8a ed       	ldi	r24, 0xDA	; 218
 424:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 426:	e0 91 06 01 	lds	r30, 0x0106
 42a:	f0 91 07 01 	lds	r31, 0x0107
 42e:	82 e1       	ldi	r24, 0x12	; 18
 430:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 432:	e0 91 06 01 	lds	r30, 0x0106
 436:	f0 91 07 01 	lds	r31, 0x0107
 43a:	88 ec       	ldi	r24, 0xC8	; 200
 43c:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 43e:	e0 91 06 01 	lds	r30, 0x0106
 442:	f0 91 07 01 	lds	r31, 0x0107
 446:	88 ea       	ldi	r24, 0xA8	; 168
 448:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 44a:	e0 91 06 01 	lds	r30, 0x0106
 44e:	f0 91 07 01 	lds	r31, 0x0107
 452:	8f e3       	ldi	r24, 0x3F	; 63
 454:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 456:	e0 91 06 01 	lds	r30, 0x0106
 45a:	f0 91 07 01 	lds	r31, 0x0107
 45e:	85 ed       	ldi	r24, 0xD5	; 213
 460:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 462:	e0 91 06 01 	lds	r30, 0x0106
 466:	f0 91 07 01 	lds	r31, 0x0107
 46a:	80 e8       	ldi	r24, 0x80	; 128
 46c:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 46e:	e0 91 06 01 	lds	r30, 0x0106
 472:	f0 91 07 01 	lds	r31, 0x0107
 476:	81 e8       	ldi	r24, 0x81	; 129
 478:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 47a:	e0 91 06 01 	lds	r30, 0x0106
 47e:	f0 91 07 01 	lds	r31, 0x0107
 482:	80 e5       	ldi	r24, 0x50	; 80
 484:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 486:	e0 91 06 01 	lds	r30, 0x0106
 48a:	f0 91 07 01 	lds	r31, 0x0107
 48e:	89 ed       	ldi	r24, 0xD9	; 217
 490:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 492:	e0 91 06 01 	lds	r30, 0x0106
 496:	f0 91 07 01 	lds	r31, 0x0107
 49a:	81 e2       	ldi	r24, 0x21	; 33
 49c:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 49e:	e0 91 06 01 	lds	r30, 0x0106
 4a2:	f0 91 07 01 	lds	r31, 0x0107
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 4aa:	e0 91 06 01 	lds	r30, 0x0106
 4ae:	f0 91 07 01 	lds	r31, 0x0107
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 4b6:	e0 91 06 01 	lds	r30, 0x0106
 4ba:	f0 91 07 01 	lds	r31, 0x0107
 4be:	8b ed       	ldi	r24, 0xDB	; 219
 4c0:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 4c2:	e0 91 06 01 	lds	r30, 0x0106
 4c6:	f0 91 07 01 	lds	r31, 0x0107
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 4ce:	e0 91 06 01 	lds	r30, 0x0106
 4d2:	f0 91 07 01 	lds	r31, 0x0107
 4d6:	8d ea       	ldi	r24, 0xAD	; 173
 4d8:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 4da:	e0 91 06 01 	lds	r30, 0x0106
 4de:	f0 91 07 01 	lds	r31, 0x0107
 4e2:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 4e4:	e0 91 06 01 	lds	r30, 0x0106
 4e8:	f0 91 07 01 	lds	r31, 0x0107
 4ec:	84 ea       	ldi	r24, 0xA4	; 164
 4ee:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 4f0:	e0 91 06 01 	lds	r30, 0x0106
 4f4:	f0 91 07 01 	lds	r31, 0x0107
 4f8:	86 ea       	ldi	r24, 0xA6	; 166
 4fa:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 4fc:	e0 91 06 01 	lds	r30, 0x0106
 500:	f0 91 07 01 	lds	r31, 0x0107
 504:	8f ea       	ldi	r24, 0xAF	; 175
 506:	80 83       	st	Z, r24
 508:	08 95       	ret

0000050a <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 50a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 50c:	77 9b       	sbis	0x0e, 7	; 14
 50e:	fe cf       	rjmp	.-4      	; 0x50c <SPI_read_write+0x2>
	return SPDR;
 510:	8f b1       	in	r24, 0x0f	; 15
}
 512:	08 95       	ret

00000514 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 514:	c4 98       	cbi	0x18, 4	; 24
 516:	08 95       	ret

00000518 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 518:	c4 9a       	sbi	0x18, 4	; 24
 51a:	08 95       	ret

0000051c <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 51c:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 51e:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/16
	set_bit(SPCR, SPR0);
 520:	68 9a       	sbi	0x0d, 0	; 13
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 522:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 524:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 526:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 528:	0e 94 8c 02 	call	0x518	; 0x518 <SPI_deactivate_SS>
 52c:	08 95       	ret

0000052e <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 52e:	85 b7       	in	r24, 0x35	; 53
 530:	80 68       	ori	r24, 0x80	; 128
 532:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 534:	80 b7       	in	r24, 0x30	; 48
 536:	80 62       	ori	r24, 0x20	; 32
 538:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 53a:	85 b7       	in	r24, 0x35	; 53
 53c:	8e 7f       	andi	r24, 0xFE	; 254
 53e:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 540:	85 b7       	in	r24, 0x35	; 53
 542:	82 60       	ori	r24, 0x02	; 2
 544:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 546:	8b b7       	in	r24, 0x3b	; 59
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 54c:	8a 98       	cbi	0x11, 2	; 17
 54e:	08 95       	ret

00000550 <main>:
volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 550:	f8 94       	cli
	UART_init(31);
 552:	8f e1       	ldi	r24, 0x1F	; 31
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_init>
	register_init();
 55a:	0e 94 97 02 	call	0x52e	; 0x52e <register_init>
	oled_init();
 55e:	0e 94 01 02 	call	0x402	; 0x402 <oled_init>
	ADC_init();
 562:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	CAN_init();
 566:	0e 94 84 00 	call	0x108	; 0x108 <CAN_init>
	//Enable global interrupts
	sei();
 56a:	78 94       	sei

	while(1){
		send_slider_pos();
 56c:	0e 94 df 01 	call	0x3be	; 0x3be <send_slider_pos>
 570:	2f ef       	ldi	r18, 0xFF	; 255
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	9e e0       	ldi	r25, 0x0E	; 14
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <main+0x26>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x30>
 580:	00 00       	nop
		_delay_ms(1000);
		
		if(ADC_ready){
 582:	80 91 53 01 	lds	r24, 0x0153
 586:	88 23       	and	r24, r24
 588:	89 f3       	breq	.-30     	; 0x56c <main+0x1c>
			ADC_ready = 0;
 58a:	10 92 53 01 	sts	0x0153, r1
 58e:	ee cf       	rjmp	.-36     	; 0x56c <main+0x1c>

00000590 <__divsf3>:
 590:	0c d0       	rcall	.+24     	; 0x5aa <__divsf3x>
 592:	eb c0       	rjmp	.+470    	; 0x76a <__fp_round>
 594:	e3 d0       	rcall	.+454    	; 0x75c <__fp_pscB>
 596:	40 f0       	brcs	.+16     	; 0x5a8 <__divsf3+0x18>
 598:	da d0       	rcall	.+436    	; 0x74e <__fp_pscA>
 59a:	30 f0       	brcs	.+12     	; 0x5a8 <__divsf3+0x18>
 59c:	21 f4       	brne	.+8      	; 0x5a6 <__divsf3+0x16>
 59e:	5f 3f       	cpi	r21, 0xFF	; 255
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <__divsf3+0x18>
 5a2:	cc c0       	rjmp	.+408    	; 0x73c <__fp_inf>
 5a4:	51 11       	cpse	r21, r1
 5a6:	15 c1       	rjmp	.+554    	; 0x7d2 <__fp_szero>
 5a8:	cf c0       	rjmp	.+414    	; 0x748 <__fp_nan>

000005aa <__divsf3x>:
 5aa:	f0 d0       	rcall	.+480    	; 0x78c <__fp_split3>
 5ac:	98 f3       	brcs	.-26     	; 0x594 <__divsf3+0x4>

000005ae <__divsf3_pse>:
 5ae:	99 23       	and	r25, r25
 5b0:	c9 f3       	breq	.-14     	; 0x5a4 <__divsf3+0x14>
 5b2:	55 23       	and	r21, r21
 5b4:	b1 f3       	breq	.-20     	; 0x5a2 <__divsf3+0x12>
 5b6:	95 1b       	sub	r25, r21
 5b8:	55 0b       	sbc	r21, r21
 5ba:	bb 27       	eor	r27, r27
 5bc:	aa 27       	eor	r26, r26
 5be:	62 17       	cp	r22, r18
 5c0:	73 07       	cpc	r23, r19
 5c2:	84 07       	cpc	r24, r20
 5c4:	38 f0       	brcs	.+14     	; 0x5d4 <__divsf3_pse+0x26>
 5c6:	9f 5f       	subi	r25, 0xFF	; 255
 5c8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	44 1f       	adc	r20, r20
 5d0:	aa 1f       	adc	r26, r26
 5d2:	a9 f3       	breq	.-22     	; 0x5be <__divsf3_pse+0x10>
 5d4:	33 d0       	rcall	.+102    	; 0x63c <__divsf3_pse+0x8e>
 5d6:	0e 2e       	mov	r0, r30
 5d8:	3a f0       	brmi	.+14     	; 0x5e8 <__divsf3_pse+0x3a>
 5da:	e0 e8       	ldi	r30, 0x80	; 128
 5dc:	30 d0       	rcall	.+96     	; 0x63e <__divsf3_pse+0x90>
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	e6 95       	lsr	r30
 5e4:	00 1c       	adc	r0, r0
 5e6:	ca f7       	brpl	.-14     	; 0x5da <__divsf3_pse+0x2c>
 5e8:	29 d0       	rcall	.+82     	; 0x63c <__divsf3_pse+0x8e>
 5ea:	fe 2f       	mov	r31, r30
 5ec:	27 d0       	rcall	.+78     	; 0x63c <__divsf3_pse+0x8e>
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	bb 1f       	adc	r27, r27
 5f6:	26 17       	cp	r18, r22
 5f8:	37 07       	cpc	r19, r23
 5fa:	48 07       	cpc	r20, r24
 5fc:	ab 07       	cpc	r26, r27
 5fe:	b0 e8       	ldi	r27, 0x80	; 128
 600:	09 f0       	breq	.+2      	; 0x604 <__divsf3_pse+0x56>
 602:	bb 0b       	sbc	r27, r27
 604:	80 2d       	mov	r24, r0
 606:	bf 01       	movw	r22, r30
 608:	ff 27       	eor	r31, r31
 60a:	93 58       	subi	r25, 0x83	; 131
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	2a f0       	brmi	.+10     	; 0x61a <__divsf3_pse+0x6c>
 610:	9e 3f       	cpi	r25, 0xFE	; 254
 612:	51 05       	cpc	r21, r1
 614:	68 f0       	brcs	.+26     	; 0x630 <__divsf3_pse+0x82>
 616:	92 c0       	rjmp	.+292    	; 0x73c <__fp_inf>
 618:	dc c0       	rjmp	.+440    	; 0x7d2 <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	ec f3       	brlt	.-6      	; 0x618 <__divsf3_pse+0x6a>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	dc f3       	brlt	.-10     	; 0x618 <__divsf3_pse+0x6a>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	c9 f7       	brne	.-14     	; 0x622 <__divsf3_pse+0x74>
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret
 63c:	e1 e0       	ldi	r30, 0x01	; 1
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	bb 1f       	adc	r27, r27
 646:	62 17       	cp	r22, r18
 648:	73 07       	cpc	r23, r19
 64a:	84 07       	cpc	r24, r20
 64c:	ba 07       	cpc	r27, r26
 64e:	20 f0       	brcs	.+8      	; 0x658 <__divsf3_pse+0xaa>
 650:	62 1b       	sub	r22, r18
 652:	73 0b       	sbc	r23, r19
 654:	84 0b       	sbc	r24, r20
 656:	ba 0b       	sbc	r27, r26
 658:	ee 1f       	adc	r30, r30
 65a:	88 f7       	brcc	.-30     	; 0x63e <__divsf3_pse+0x90>
 65c:	e0 95       	com	r30
 65e:	08 95       	ret

00000660 <__fixsfsi>:
 660:	04 d0       	rcall	.+8      	; 0x66a <__fixunssfsi>
 662:	68 94       	set
 664:	b1 11       	cpse	r27, r1
 666:	b5 c0       	rjmp	.+362    	; 0x7d2 <__fp_szero>
 668:	08 95       	ret

0000066a <__fixunssfsi>:
 66a:	98 d0       	rcall	.+304    	; 0x79c <__fp_splitA>
 66c:	88 f0       	brcs	.+34     	; 0x690 <__fixunssfsi+0x26>
 66e:	9f 57       	subi	r25, 0x7F	; 127
 670:	90 f0       	brcs	.+36     	; 0x696 <__fixunssfsi+0x2c>
 672:	b9 2f       	mov	r27, r25
 674:	99 27       	eor	r25, r25
 676:	b7 51       	subi	r27, 0x17	; 23
 678:	a0 f0       	brcs	.+40     	; 0x6a2 <__fixunssfsi+0x38>
 67a:	d1 f0       	breq	.+52     	; 0x6b0 <__fixunssfsi+0x46>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a f0       	brmi	.+6      	; 0x68c <__fixunssfsi+0x22>
 686:	ba 95       	dec	r27
 688:	c9 f7       	brne	.-14     	; 0x67c <__fixunssfsi+0x12>
 68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__fixunssfsi+0x46>
 68c:	b1 30       	cpi	r27, 0x01	; 1
 68e:	81 f0       	breq	.+32     	; 0x6b0 <__fixunssfsi+0x46>
 690:	9f d0       	rcall	.+318    	; 0x7d0 <__fp_zero>
 692:	b1 e0       	ldi	r27, 0x01	; 1
 694:	08 95       	ret
 696:	9c c0       	rjmp	.+312    	; 0x7d0 <__fp_zero>
 698:	67 2f       	mov	r22, r23
 69a:	78 2f       	mov	r23, r24
 69c:	88 27       	eor	r24, r24
 69e:	b8 5f       	subi	r27, 0xF8	; 248
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <__fixunssfsi+0x46>
 6a2:	b9 3f       	cpi	r27, 0xF9	; 249
 6a4:	cc f3       	brlt	.-14     	; 0x698 <__fixunssfsi+0x2e>
 6a6:	86 95       	lsr	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b3 95       	inc	r27
 6ae:	d9 f7       	brne	.-10     	; 0x6a6 <__fixunssfsi+0x3c>
 6b0:	3e f4       	brtc	.+14     	; 0x6c0 <__fixunssfsi+0x56>
 6b2:	90 95       	com	r25
 6b4:	80 95       	com	r24
 6b6:	70 95       	com	r23
 6b8:	61 95       	neg	r22
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__floatunsisf>:
 6c2:	e8 94       	clt
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <__floatsisf+0x12>

000006c6 <__floatsisf>:
 6c6:	97 fb       	bst	r25, 7
 6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__floatsisf+0x12>
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	99 23       	and	r25, r25
 6da:	a9 f0       	breq	.+42     	; 0x706 <__floatsisf+0x40>
 6dc:	f9 2f       	mov	r31, r25
 6de:	96 e9       	ldi	r25, 0x96	; 150
 6e0:	bb 27       	eor	r27, r27
 6e2:	93 95       	inc	r25
 6e4:	f6 95       	lsr	r31
 6e6:	87 95       	ror	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f1 11       	cpse	r31, r1
 6f0:	f8 cf       	rjmp	.-16     	; 0x6e2 <__floatsisf+0x1c>
 6f2:	fa f4       	brpl	.+62     	; 0x732 <__floatsisf+0x6c>
 6f4:	bb 0f       	add	r27, r27
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__floatsisf+0x36>
 6f8:	60 ff       	sbrs	r22, 0
 6fa:	1b c0       	rjmp	.+54     	; 0x732 <__floatsisf+0x6c>
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	16 c0       	rjmp	.+44     	; 0x732 <__floatsisf+0x6c>
 706:	88 23       	and	r24, r24
 708:	11 f0       	breq	.+4      	; 0x70e <__floatsisf+0x48>
 70a:	96 e9       	ldi	r25, 0x96	; 150
 70c:	11 c0       	rjmp	.+34     	; 0x730 <__floatsisf+0x6a>
 70e:	77 23       	and	r23, r23
 710:	21 f0       	breq	.+8      	; 0x71a <__floatsisf+0x54>
 712:	9e e8       	ldi	r25, 0x8E	; 142
 714:	87 2f       	mov	r24, r23
 716:	76 2f       	mov	r23, r22
 718:	05 c0       	rjmp	.+10     	; 0x724 <__floatsisf+0x5e>
 71a:	66 23       	and	r22, r22
 71c:	71 f0       	breq	.+28     	; 0x73a <__floatsisf+0x74>
 71e:	96 e8       	ldi	r25, 0x86	; 134
 720:	86 2f       	mov	r24, r22
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	2a f0       	brmi	.+10     	; 0x732 <__floatsisf+0x6c>
 728:	9a 95       	dec	r25
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	da f7       	brpl	.-10     	; 0x728 <__floatsisf+0x62>
 732:	88 0f       	add	r24, r24
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__fp_inf>:
 73c:	97 f9       	bld	r25, 7
 73e:	9f 67       	ori	r25, 0x7F	; 127
 740:	80 e8       	ldi	r24, 0x80	; 128
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	08 95       	ret

00000748 <__fp_nan>:
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	80 ec       	ldi	r24, 0xC0	; 192
 74c:	08 95       	ret

0000074e <__fp_pscA>:
 74e:	00 24       	eor	r0, r0
 750:	0a 94       	dec	r0
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	18 06       	cpc	r1, r24
 758:	09 06       	cpc	r0, r25
 75a:	08 95       	ret

0000075c <__fp_pscB>:
 75c:	00 24       	eor	r0, r0
 75e:	0a 94       	dec	r0
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	05 06       	cpc	r0, r21
 768:	08 95       	ret

0000076a <__fp_round>:
 76a:	09 2e       	mov	r0, r25
 76c:	03 94       	inc	r0
 76e:	00 0c       	add	r0, r0
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0xc>
 772:	88 23       	and	r24, r24
 774:	52 f0       	brmi	.+20     	; 0x78a <__fp_round+0x20>
 776:	bb 0f       	add	r27, r27
 778:	40 f4       	brcc	.+16     	; 0x78a <__fp_round+0x20>
 77a:	bf 2b       	or	r27, r31
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0x18>
 77e:	60 ff       	sbrs	r22, 0
 780:	04 c0       	rjmp	.+8      	; 0x78a <__fp_round+0x20>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__fp_split3>:
 78c:	57 fd       	sbrc	r21, 7
 78e:	90 58       	subi	r25, 0x80	; 128
 790:	44 0f       	add	r20, r20
 792:	55 1f       	adc	r21, r21
 794:	59 f0       	breq	.+22     	; 0x7ac <__fp_splitA+0x10>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	71 f0       	breq	.+28     	; 0x7b6 <__fp_splitA+0x1a>
 79a:	47 95       	ror	r20

0000079c <__fp_splitA>:
 79c:	88 0f       	add	r24, r24
 79e:	97 fb       	bst	r25, 7
 7a0:	99 1f       	adc	r25, r25
 7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_splitA+0x20>
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	79 f0       	breq	.+30     	; 0x7c6 <__fp_splitA+0x2a>
 7a8:	87 95       	ror	r24
 7aa:	08 95       	ret
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	14 06       	cpc	r1, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	f2 cf       	rjmp	.-28     	; 0x79a <__fp_split3+0xe>
 7b6:	46 95       	lsr	r20
 7b8:	f1 df       	rcall	.-30     	; 0x79c <__fp_splitA>
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <__fp_splitA+0x30>
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	f1 cf       	rjmp	.-30     	; 0x7a8 <__fp_splitA+0xc>
 7c6:	86 95       	lsr	r24
 7c8:	71 05       	cpc	r23, r1
 7ca:	61 05       	cpc	r22, r1
 7cc:	08 94       	sec
 7ce:	08 95       	ret

000007d0 <__fp_zero>:
 7d0:	e8 94       	clt

000007d2 <__fp_szero>:
 7d2:	bb 27       	eor	r27, r27
 7d4:	66 27       	eor	r22, r22
 7d6:	77 27       	eor	r23, r23
 7d8:	cb 01       	movw	r24, r22
 7da:	97 f9       	bld	r25, 7
 7dc:	08 95       	ret

000007de <__mulsf3>:
 7de:	0b d0       	rcall	.+22     	; 0x7f6 <__mulsf3x>
 7e0:	c4 cf       	rjmp	.-120    	; 0x76a <__fp_round>
 7e2:	b5 df       	rcall	.-150    	; 0x74e <__fp_pscA>
 7e4:	28 f0       	brcs	.+10     	; 0x7f0 <__mulsf3+0x12>
 7e6:	ba df       	rcall	.-140    	; 0x75c <__fp_pscB>
 7e8:	18 f0       	brcs	.+6      	; 0x7f0 <__mulsf3+0x12>
 7ea:	95 23       	and	r25, r21
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__mulsf3+0x12>
 7ee:	a6 cf       	rjmp	.-180    	; 0x73c <__fp_inf>
 7f0:	ab cf       	rjmp	.-170    	; 0x748 <__fp_nan>
 7f2:	11 24       	eor	r1, r1
 7f4:	ee cf       	rjmp	.-36     	; 0x7d2 <__fp_szero>

000007f6 <__mulsf3x>:
 7f6:	ca df       	rcall	.-108    	; 0x78c <__fp_split3>
 7f8:	a0 f3       	brcs	.-24     	; 0x7e2 <__mulsf3+0x4>

000007fa <__mulsf3_pse>:
 7fa:	95 9f       	mul	r25, r21
 7fc:	d1 f3       	breq	.-12     	; 0x7f2 <__mulsf3+0x14>
 7fe:	95 0f       	add	r25, r21
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	55 1f       	adc	r21, r21
 804:	62 9f       	mul	r22, r18
 806:	f0 01       	movw	r30, r0
 808:	72 9f       	mul	r23, r18
 80a:	bb 27       	eor	r27, r27
 80c:	f0 0d       	add	r31, r0
 80e:	b1 1d       	adc	r27, r1
 810:	63 9f       	mul	r22, r19
 812:	aa 27       	eor	r26, r26
 814:	f0 0d       	add	r31, r0
 816:	b1 1d       	adc	r27, r1
 818:	aa 1f       	adc	r26, r26
 81a:	64 9f       	mul	r22, r20
 81c:	66 27       	eor	r22, r22
 81e:	b0 0d       	add	r27, r0
 820:	a1 1d       	adc	r26, r1
 822:	66 1f       	adc	r22, r22
 824:	82 9f       	mul	r24, r18
 826:	22 27       	eor	r18, r18
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	62 1f       	adc	r22, r18
 82e:	73 9f       	mul	r23, r19
 830:	b0 0d       	add	r27, r0
 832:	a1 1d       	adc	r26, r1
 834:	62 1f       	adc	r22, r18
 836:	83 9f       	mul	r24, r19
 838:	a0 0d       	add	r26, r0
 83a:	61 1d       	adc	r22, r1
 83c:	22 1f       	adc	r18, r18
 83e:	74 9f       	mul	r23, r20
 840:	33 27       	eor	r19, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	23 1f       	adc	r18, r19
 848:	84 9f       	mul	r24, r20
 84a:	60 0d       	add	r22, r0
 84c:	21 1d       	adc	r18, r1
 84e:	82 2f       	mov	r24, r18
 850:	76 2f       	mov	r23, r22
 852:	6a 2f       	mov	r22, r26
 854:	11 24       	eor	r1, r1
 856:	9f 57       	subi	r25, 0x7F	; 127
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	8a f0       	brmi	.+34     	; 0x87e <__mulsf3_pse+0x84>
 85c:	e1 f0       	breq	.+56     	; 0x896 <__mulsf3_pse+0x9c>
 85e:	88 23       	and	r24, r24
 860:	4a f0       	brmi	.+18     	; 0x874 <__mulsf3_pse+0x7a>
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	bb 1f       	adc	r27, r27
 868:	66 1f       	adc	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	91 50       	subi	r25, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	a9 f7       	brne	.-22     	; 0x85e <__mulsf3_pse+0x64>
 874:	9e 3f       	cpi	r25, 0xFE	; 254
 876:	51 05       	cpc	r21, r1
 878:	70 f0       	brcs	.+28     	; 0x896 <__mulsf3_pse+0x9c>
 87a:	60 cf       	rjmp	.-320    	; 0x73c <__fp_inf>
 87c:	aa cf       	rjmp	.-172    	; 0x7d2 <__fp_szero>
 87e:	5f 3f       	cpi	r21, 0xFF	; 255
 880:	ec f3       	brlt	.-6      	; 0x87c <__mulsf3_pse+0x82>
 882:	98 3e       	cpi	r25, 0xE8	; 232
 884:	dc f3       	brlt	.-10     	; 0x87c <__mulsf3_pse+0x82>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	e7 95       	ror	r30
 892:	9f 5f       	subi	r25, 0xFF	; 255
 894:	c1 f7       	brne	.-16     	; 0x886 <__mulsf3_pse+0x8c>
 896:	fe 2b       	or	r31, r30
 898:	88 0f       	add	r24, r24
 89a:	91 1d       	adc	r25, r1
 89c:	96 95       	lsr	r25
 89e:	87 95       	ror	r24
 8a0:	97 f9       	bld	r25, 7
 8a2:	08 95       	ret

000008a4 <malloc>:
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	82 30       	cpi	r24, 0x02	; 2
 8aa:	91 05       	cpc	r25, r1
 8ac:	10 f4       	brcc	.+4      	; 0x8b2 <malloc+0xe>
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	e0 91 58 01 	lds	r30, 0x0158
 8b6:	f0 91 59 01 	lds	r31, 0x0159
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	a0 e0       	ldi	r26, 0x00	; 0
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	30 97       	sbiw	r30, 0x00	; 0
 8c4:	39 f1       	breq	.+78     	; 0x914 <malloc+0x70>
 8c6:	40 81       	ld	r20, Z
 8c8:	51 81       	ldd	r21, Z+1	; 0x01
 8ca:	48 17       	cp	r20, r24
 8cc:	59 07       	cpc	r21, r25
 8ce:	b8 f0       	brcs	.+46     	; 0x8fe <malloc+0x5a>
 8d0:	48 17       	cp	r20, r24
 8d2:	59 07       	cpc	r21, r25
 8d4:	71 f4       	brne	.+28     	; 0x8f2 <malloc+0x4e>
 8d6:	82 81       	ldd	r24, Z+2	; 0x02
 8d8:	93 81       	ldd	r25, Z+3	; 0x03
 8da:	10 97       	sbiw	r26, 0x00	; 0
 8dc:	29 f0       	breq	.+10     	; 0x8e8 <malloc+0x44>
 8de:	13 96       	adiw	r26, 0x03	; 3
 8e0:	9c 93       	st	X, r25
 8e2:	8e 93       	st	-X, r24
 8e4:	12 97       	sbiw	r26, 0x02	; 2
 8e6:	2c c0       	rjmp	.+88     	; 0x940 <malloc+0x9c>
 8e8:	90 93 59 01 	sts	0x0159, r25
 8ec:	80 93 58 01 	sts	0x0158, r24
 8f0:	27 c0       	rjmp	.+78     	; 0x940 <malloc+0x9c>
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	31 f0       	breq	.+12     	; 0x904 <malloc+0x60>
 8f8:	42 17       	cp	r20, r18
 8fa:	53 07       	cpc	r21, r19
 8fc:	18 f0       	brcs	.+6      	; 0x904 <malloc+0x60>
 8fe:	a9 01       	movw	r20, r18
 900:	db 01       	movw	r26, r22
 902:	01 c0       	rjmp	.+2      	; 0x906 <malloc+0x62>
 904:	ef 01       	movw	r28, r30
 906:	9a 01       	movw	r18, r20
 908:	bd 01       	movw	r22, r26
 90a:	df 01       	movw	r26, r30
 90c:	02 80       	ldd	r0, Z+2	; 0x02
 90e:	f3 81       	ldd	r31, Z+3	; 0x03
 910:	e0 2d       	mov	r30, r0
 912:	d7 cf       	rjmp	.-82     	; 0x8c2 <malloc+0x1e>
 914:	21 15       	cp	r18, r1
 916:	31 05       	cpc	r19, r1
 918:	f9 f0       	breq	.+62     	; 0x958 <malloc+0xb4>
 91a:	28 1b       	sub	r18, r24
 91c:	39 0b       	sbc	r19, r25
 91e:	24 30       	cpi	r18, 0x04	; 4
 920:	31 05       	cpc	r19, r1
 922:	80 f4       	brcc	.+32     	; 0x944 <malloc+0xa0>
 924:	8a 81       	ldd	r24, Y+2	; 0x02
 926:	9b 81       	ldd	r25, Y+3	; 0x03
 928:	61 15       	cp	r22, r1
 92a:	71 05       	cpc	r23, r1
 92c:	21 f0       	breq	.+8      	; 0x936 <malloc+0x92>
 92e:	fb 01       	movw	r30, r22
 930:	93 83       	std	Z+3, r25	; 0x03
 932:	82 83       	std	Z+2, r24	; 0x02
 934:	04 c0       	rjmp	.+8      	; 0x93e <malloc+0x9a>
 936:	90 93 59 01 	sts	0x0159, r25
 93a:	80 93 58 01 	sts	0x0158, r24
 93e:	fe 01       	movw	r30, r28
 940:	32 96       	adiw	r30, 0x02	; 2
 942:	44 c0       	rjmp	.+136    	; 0x9cc <malloc+0x128>
 944:	fe 01       	movw	r30, r28
 946:	e2 0f       	add	r30, r18
 948:	f3 1f       	adc	r31, r19
 94a:	81 93       	st	Z+, r24
 94c:	91 93       	st	Z+, r25
 94e:	22 50       	subi	r18, 0x02	; 2
 950:	31 09       	sbc	r19, r1
 952:	39 83       	std	Y+1, r19	; 0x01
 954:	28 83       	st	Y, r18
 956:	3a c0       	rjmp	.+116    	; 0x9cc <malloc+0x128>
 958:	20 91 56 01 	lds	r18, 0x0156
 95c:	30 91 57 01 	lds	r19, 0x0157
 960:	23 2b       	or	r18, r19
 962:	41 f4       	brne	.+16     	; 0x974 <malloc+0xd0>
 964:	20 91 02 01 	lds	r18, 0x0102
 968:	30 91 03 01 	lds	r19, 0x0103
 96c:	30 93 57 01 	sts	0x0157, r19
 970:	20 93 56 01 	sts	0x0156, r18
 974:	20 91 00 01 	lds	r18, 0x0100
 978:	30 91 01 01 	lds	r19, 0x0101
 97c:	21 15       	cp	r18, r1
 97e:	31 05       	cpc	r19, r1
 980:	41 f4       	brne	.+16     	; 0x992 <malloc+0xee>
 982:	2d b7       	in	r18, 0x3d	; 61
 984:	3e b7       	in	r19, 0x3e	; 62
 986:	40 91 04 01 	lds	r20, 0x0104
 98a:	50 91 05 01 	lds	r21, 0x0105
 98e:	24 1b       	sub	r18, r20
 990:	35 0b       	sbc	r19, r21
 992:	e0 91 56 01 	lds	r30, 0x0156
 996:	f0 91 57 01 	lds	r31, 0x0157
 99a:	e2 17       	cp	r30, r18
 99c:	f3 07       	cpc	r31, r19
 99e:	a0 f4       	brcc	.+40     	; 0x9c8 <malloc+0x124>
 9a0:	2e 1b       	sub	r18, r30
 9a2:	3f 0b       	sbc	r19, r31
 9a4:	28 17       	cp	r18, r24
 9a6:	39 07       	cpc	r19, r25
 9a8:	78 f0       	brcs	.+30     	; 0x9c8 <malloc+0x124>
 9aa:	ac 01       	movw	r20, r24
 9ac:	4e 5f       	subi	r20, 0xFE	; 254
 9ae:	5f 4f       	sbci	r21, 0xFF	; 255
 9b0:	24 17       	cp	r18, r20
 9b2:	35 07       	cpc	r19, r21
 9b4:	48 f0       	brcs	.+18     	; 0x9c8 <malloc+0x124>
 9b6:	4e 0f       	add	r20, r30
 9b8:	5f 1f       	adc	r21, r31
 9ba:	50 93 57 01 	sts	0x0157, r21
 9be:	40 93 56 01 	sts	0x0156, r20
 9c2:	81 93       	st	Z+, r24
 9c4:	91 93       	st	Z+, r25
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <malloc+0x128>
 9c8:	e0 e0       	ldi	r30, 0x00	; 0
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	cf 01       	movw	r24, r30
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	08 95       	ret

000009d4 <free>:
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	09 f4       	brne	.+2      	; 0x9de <free+0xa>
 9dc:	87 c0       	rjmp	.+270    	; 0xaec <free+0x118>
 9de:	fc 01       	movw	r30, r24
 9e0:	32 97       	sbiw	r30, 0x02	; 2
 9e2:	13 82       	std	Z+3, r1	; 0x03
 9e4:	12 82       	std	Z+2, r1	; 0x02
 9e6:	c0 91 58 01 	lds	r28, 0x0158
 9ea:	d0 91 59 01 	lds	r29, 0x0159
 9ee:	20 97       	sbiw	r28, 0x00	; 0
 9f0:	81 f4       	brne	.+32     	; 0xa12 <free+0x3e>
 9f2:	20 81       	ld	r18, Z
 9f4:	31 81       	ldd	r19, Z+1	; 0x01
 9f6:	28 0f       	add	r18, r24
 9f8:	39 1f       	adc	r19, r25
 9fa:	80 91 56 01 	lds	r24, 0x0156
 9fe:	90 91 57 01 	lds	r25, 0x0157
 a02:	82 17       	cp	r24, r18
 a04:	93 07       	cpc	r25, r19
 a06:	79 f5       	brne	.+94     	; 0xa66 <free+0x92>
 a08:	f0 93 57 01 	sts	0x0157, r31
 a0c:	e0 93 56 01 	sts	0x0156, r30
 a10:	6d c0       	rjmp	.+218    	; 0xaec <free+0x118>
 a12:	de 01       	movw	r26, r28
 a14:	20 e0       	ldi	r18, 0x00	; 0
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	ae 17       	cp	r26, r30
 a1a:	bf 07       	cpc	r27, r31
 a1c:	50 f4       	brcc	.+20     	; 0xa32 <free+0x5e>
 a1e:	12 96       	adiw	r26, 0x02	; 2
 a20:	4d 91       	ld	r20, X+
 a22:	5c 91       	ld	r21, X
 a24:	13 97       	sbiw	r26, 0x03	; 3
 a26:	9d 01       	movw	r18, r26
 a28:	41 15       	cp	r20, r1
 a2a:	51 05       	cpc	r21, r1
 a2c:	09 f1       	breq	.+66     	; 0xa70 <free+0x9c>
 a2e:	da 01       	movw	r26, r20
 a30:	f3 cf       	rjmp	.-26     	; 0xa18 <free+0x44>
 a32:	b3 83       	std	Z+3, r27	; 0x03
 a34:	a2 83       	std	Z+2, r26	; 0x02
 a36:	40 81       	ld	r20, Z
 a38:	51 81       	ldd	r21, Z+1	; 0x01
 a3a:	84 0f       	add	r24, r20
 a3c:	95 1f       	adc	r25, r21
 a3e:	8a 17       	cp	r24, r26
 a40:	9b 07       	cpc	r25, r27
 a42:	71 f4       	brne	.+28     	; 0xa60 <free+0x8c>
 a44:	8d 91       	ld	r24, X+
 a46:	9c 91       	ld	r25, X
 a48:	11 97       	sbiw	r26, 0x01	; 1
 a4a:	84 0f       	add	r24, r20
 a4c:	95 1f       	adc	r25, r21
 a4e:	02 96       	adiw	r24, 0x02	; 2
 a50:	91 83       	std	Z+1, r25	; 0x01
 a52:	80 83       	st	Z, r24
 a54:	12 96       	adiw	r26, 0x02	; 2
 a56:	8d 91       	ld	r24, X+
 a58:	9c 91       	ld	r25, X
 a5a:	13 97       	sbiw	r26, 0x03	; 3
 a5c:	93 83       	std	Z+3, r25	; 0x03
 a5e:	82 83       	std	Z+2, r24	; 0x02
 a60:	21 15       	cp	r18, r1
 a62:	31 05       	cpc	r19, r1
 a64:	29 f4       	brne	.+10     	; 0xa70 <free+0x9c>
 a66:	f0 93 59 01 	sts	0x0159, r31
 a6a:	e0 93 58 01 	sts	0x0158, r30
 a6e:	3e c0       	rjmp	.+124    	; 0xaec <free+0x118>
 a70:	d9 01       	movw	r26, r18
 a72:	13 96       	adiw	r26, 0x03	; 3
 a74:	fc 93       	st	X, r31
 a76:	ee 93       	st	-X, r30
 a78:	12 97       	sbiw	r26, 0x02	; 2
 a7a:	4d 91       	ld	r20, X+
 a7c:	5d 91       	ld	r21, X+
 a7e:	a4 0f       	add	r26, r20
 a80:	b5 1f       	adc	r27, r21
 a82:	ea 17       	cp	r30, r26
 a84:	fb 07       	cpc	r31, r27
 a86:	79 f4       	brne	.+30     	; 0xaa6 <free+0xd2>
 a88:	80 81       	ld	r24, Z
 a8a:	91 81       	ldd	r25, Z+1	; 0x01
 a8c:	84 0f       	add	r24, r20
 a8e:	95 1f       	adc	r25, r21
 a90:	02 96       	adiw	r24, 0x02	; 2
 a92:	d9 01       	movw	r26, r18
 a94:	11 96       	adiw	r26, 0x01	; 1
 a96:	9c 93       	st	X, r25
 a98:	8e 93       	st	-X, r24
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	13 96       	adiw	r26, 0x03	; 3
 aa0:	9c 93       	st	X, r25
 aa2:	8e 93       	st	-X, r24
 aa4:	12 97       	sbiw	r26, 0x02	; 2
 aa6:	e0 e0       	ldi	r30, 0x00	; 0
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	8a 81       	ldd	r24, Y+2	; 0x02
 aac:	9b 81       	ldd	r25, Y+3	; 0x03
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	19 f0       	breq	.+6      	; 0xab8 <free+0xe4>
 ab2:	fe 01       	movw	r30, r28
 ab4:	ec 01       	movw	r28, r24
 ab6:	f9 cf       	rjmp	.-14     	; 0xaaa <free+0xd6>
 ab8:	ce 01       	movw	r24, r28
 aba:	02 96       	adiw	r24, 0x02	; 2
 abc:	28 81       	ld	r18, Y
 abe:	39 81       	ldd	r19, Y+1	; 0x01
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	20 91 56 01 	lds	r18, 0x0156
 ac8:	30 91 57 01 	lds	r19, 0x0157
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	69 f4       	brne	.+26     	; 0xaec <free+0x118>
 ad2:	30 97       	sbiw	r30, 0x00	; 0
 ad4:	29 f4       	brne	.+10     	; 0xae0 <free+0x10c>
 ad6:	10 92 59 01 	sts	0x0159, r1
 ada:	10 92 58 01 	sts	0x0158, r1
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <free+0x110>
 ae0:	13 82       	std	Z+3, r1	; 0x03
 ae2:	12 82       	std	Z+2, r1	; 0x02
 ae4:	d0 93 57 01 	sts	0x0157, r29
 ae8:	c0 93 56 01 	sts	0x0156, r28
 aec:	df 91       	pop	r29
 aee:	cf 91       	pop	r28
 af0:	08 95       	ret

00000af2 <fdevopen>:
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	ec 01       	movw	r28, r24
 afc:	8b 01       	movw	r16, r22
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	31 f4       	brne	.+12     	; 0xb0e <fdevopen+0x1c>
 b02:	61 15       	cp	r22, r1
 b04:	71 05       	cpc	r23, r1
 b06:	19 f4       	brne	.+6      	; 0xb0e <fdevopen+0x1c>
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	38 c0       	rjmp	.+112    	; 0xb7e <fdevopen+0x8c>
 b0e:	6e e0       	ldi	r22, 0x0E	; 14
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <calloc>
 b1a:	fc 01       	movw	r30, r24
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	a1 f3       	breq	.-24     	; 0xb08 <fdevopen+0x16>
 b20:	80 e8       	ldi	r24, 0x80	; 128
 b22:	83 83       	std	Z+3, r24	; 0x03
 b24:	01 15       	cp	r16, r1
 b26:	11 05       	cpc	r17, r1
 b28:	71 f0       	breq	.+28     	; 0xb46 <fdevopen+0x54>
 b2a:	13 87       	std	Z+11, r17	; 0x0b
 b2c:	02 87       	std	Z+10, r16	; 0x0a
 b2e:	81 e8       	ldi	r24, 0x81	; 129
 b30:	83 83       	std	Z+3, r24	; 0x03
 b32:	80 91 5a 01 	lds	r24, 0x015A
 b36:	90 91 5b 01 	lds	r25, 0x015B
 b3a:	89 2b       	or	r24, r25
 b3c:	21 f4       	brne	.+8      	; 0xb46 <fdevopen+0x54>
 b3e:	f0 93 5b 01 	sts	0x015B, r31
 b42:	e0 93 5a 01 	sts	0x015A, r30
 b46:	20 97       	sbiw	r28, 0x00	; 0
 b48:	c9 f0       	breq	.+50     	; 0xb7c <fdevopen+0x8a>
 b4a:	d1 87       	std	Z+9, r29	; 0x09
 b4c:	c0 87       	std	Z+8, r28	; 0x08
 b4e:	83 81       	ldd	r24, Z+3	; 0x03
 b50:	82 60       	ori	r24, 0x02	; 2
 b52:	83 83       	std	Z+3, r24	; 0x03
 b54:	80 91 5c 01 	lds	r24, 0x015C
 b58:	90 91 5d 01 	lds	r25, 0x015D
 b5c:	89 2b       	or	r24, r25
 b5e:	71 f4       	brne	.+28     	; 0xb7c <fdevopen+0x8a>
 b60:	f0 93 5d 01 	sts	0x015D, r31
 b64:	e0 93 5c 01 	sts	0x015C, r30
 b68:	80 91 5e 01 	lds	r24, 0x015E
 b6c:	90 91 5f 01 	lds	r25, 0x015F
 b70:	89 2b       	or	r24, r25
 b72:	21 f4       	brne	.+8      	; 0xb7c <fdevopen+0x8a>
 b74:	f0 93 5f 01 	sts	0x015F, r31
 b78:	e0 93 5e 01 	sts	0x015E, r30
 b7c:	cf 01       	movw	r24, r30
 b7e:	df 91       	pop	r29
 b80:	cf 91       	pop	r28
 b82:	1f 91       	pop	r17
 b84:	0f 91       	pop	r16
 b86:	08 95       	ret

00000b88 <puts>:
 b88:	0f 93       	push	r16
 b8a:	1f 93       	push	r17
 b8c:	cf 93       	push	r28
 b8e:	df 93       	push	r29
 b90:	e0 91 5c 01 	lds	r30, 0x015C
 b94:	f0 91 5d 01 	lds	r31, 0x015D
 b98:	23 81       	ldd	r18, Z+3	; 0x03
 b9a:	21 ff       	sbrs	r18, 1
 b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <puts+0x4c>
 b9e:	ec 01       	movw	r28, r24
 ba0:	00 e0       	ldi	r16, 0x00	; 0
 ba2:	10 e0       	ldi	r17, 0x00	; 0
 ba4:	89 91       	ld	r24, Y+
 ba6:	60 91 5c 01 	lds	r22, 0x015C
 baa:	70 91 5d 01 	lds	r23, 0x015D
 bae:	db 01       	movw	r26, r22
 bb0:	18 96       	adiw	r26, 0x08	; 8
 bb2:	ed 91       	ld	r30, X+
 bb4:	fc 91       	ld	r31, X
 bb6:	19 97       	sbiw	r26, 0x09	; 9
 bb8:	88 23       	and	r24, r24
 bba:	31 f0       	breq	.+12     	; 0xbc8 <puts+0x40>
 bbc:	09 95       	icall
 bbe:	89 2b       	or	r24, r25
 bc0:	89 f3       	breq	.-30     	; 0xba4 <puts+0x1c>
 bc2:	0f ef       	ldi	r16, 0xFF	; 255
 bc4:	1f ef       	ldi	r17, 0xFF	; 255
 bc6:	ee cf       	rjmp	.-36     	; 0xba4 <puts+0x1c>
 bc8:	8a e0       	ldi	r24, 0x0A	; 10
 bca:	09 95       	icall
 bcc:	89 2b       	or	r24, r25
 bce:	11 f4       	brne	.+4      	; 0xbd4 <puts+0x4c>
 bd0:	c8 01       	movw	r24, r16
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <puts+0x50>
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	1f 91       	pop	r17
 bde:	0f 91       	pop	r16
 be0:	08 95       	ret

00000be2 <calloc>:
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	86 9f       	mul	r24, r22
 bec:	80 01       	movw	r16, r0
 bee:	87 9f       	mul	r24, r23
 bf0:	10 0d       	add	r17, r0
 bf2:	96 9f       	mul	r25, r22
 bf4:	10 0d       	add	r17, r0
 bf6:	11 24       	eor	r1, r1
 bf8:	c8 01       	movw	r24, r16
 bfa:	0e 94 52 04 	call	0x8a4	; 0x8a4 <malloc>
 bfe:	ec 01       	movw	r28, r24
 c00:	00 97       	sbiw	r24, 0x00	; 0
 c02:	29 f0       	breq	.+10     	; 0xc0e <calloc+0x2c>
 c04:	a8 01       	movw	r20, r16
 c06:	60 e0       	ldi	r22, 0x00	; 0
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <memset>
 c0e:	ce 01       	movw	r24, r28
 c10:	df 91       	pop	r29
 c12:	cf 91       	pop	r28
 c14:	1f 91       	pop	r17
 c16:	0f 91       	pop	r16
 c18:	08 95       	ret

00000c1a <memset>:
 c1a:	dc 01       	movw	r26, r24
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <memset+0x6>
 c1e:	6d 93       	st	X+, r22
 c20:	41 50       	subi	r20, 0x01	; 1
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	e0 f7       	brcc	.-8      	; 0xc1e <memset+0x4>
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>

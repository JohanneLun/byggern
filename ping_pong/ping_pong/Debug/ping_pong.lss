
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800152  00800152  00000ed6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001810  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b77  00000000  00000000  0000294e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b47  00000000  00000000  000034c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000548  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a7  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eed  00000000  00000000  00004afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  000059e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ef       	ldi	r30, 0xF0	; 240
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 35       	cpi	r26, 0x52	; 82
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e5       	ldi	r26, 0x52	; 82
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 36       	cpi	r26, 0x60	; 96
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 00 03 	call	0x600	; 0x600 <main>
  a6:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  dc:	80 91 53 01 	lds	r24, 0x0153
  e0:	88 23       	and	r24, r24
  e2:	e1 f3       	breq	.-8      	; 0xdc <ADC_read+0x6>
		
	return *adc;
  e4:	80 91 00 14 	lds	r24, 0x1400
}
  e8:	08 95       	ret

000000ea <__vector_3>:


ISR(INT2_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	ADC_ready = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 53 01 	sts	0x0153, r24
	//wake up the CPU
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <CAN_init>:
#include <util/delay.h>
#include <stdio.h>

extern volatile uint8_t rx_int_flag; 

int CAN_init(){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 112:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <CAN_init+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <CAN_init+0x18>
 120:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 128:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	80 7e       	andi	r24, 0xE0	; 224
 12e:	80 38       	cpi	r24, 0x80	; 128
 130:	39 f0       	breq	.+14     	; 0x140 <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 a6 06 	call	0xd4c	; 0xd4c <puts>
		return 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	1f c0       	rjmp	.+62     	; 0x17e <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	60 e6       	ldi	r22, 0x60	; 96
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 ee       	ldi	r22, 0xE0	; 224
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 164:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 7e       	andi	r24, 0xE0	; 224
 16a:	39 f0       	breq	.+14     	; 0x17a <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 a6 06 	call	0xd4c	; 0xd4c <puts>
		return 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <CAN_init+0x76>
	}
	
	return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 196:	81 70       	andi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1aa:	0e 94 c3 00 	call	0x186	; 0x186 <CAN_transmit_complete>
 1ae:	89 2b       	or	r24, r25
 1b0:	d9 f1       	breq	.+118    	; 0x228 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1b2:	f7 01       	movw	r30, r14
 1b4:	60 81       	ld	r22, Z
 1b6:	66 95       	lsr	r22
 1b8:	66 95       	lsr	r22
 1ba:	66 95       	lsr	r22
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1c2:	f7 01       	movw	r30, r14
 1c4:	60 81       	ld	r22, Z
 1c6:	62 95       	swap	r22
 1c8:	66 0f       	add	r22, r22
 1ca:	60 7e       	andi	r22, 0xE0	; 224
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1d2:	f7 01       	movw	r30, r14
 1d4:	62 81       	ldd	r22, Z+2	; 0x02
 1d6:	6f 70       	andi	r22, 0x0F	; 15
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1de:	f7 01       	movw	r30, r14
 1e0:	82 81       	ldd	r24, Z+2	; 0x02
 1e2:	93 81       	ldd	r25, Z+3	; 0x03
 1e4:	89 30       	cpi	r24, 0x09	; 9
 1e6:	91 05       	cpc	r25, r1
 1e8:	54 f0       	brlt	.+20     	; 0x1fe <CAN_send+0x62>
			msg->length = 8;
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	93 83       	std	Z+3, r25	; 0x03
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	87 01       	movw	r16, r14
 1f4:	0c 5f       	subi	r16, 0xFC	; 252
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 1fe:	18 16       	cp	r1, r24
 200:	19 06       	cpc	r1, r25
 202:	bc f3       	brlt	.-18     	; 0x1f2 <CAN_send+0x56>
 204:	0e c0       	rjmp	.+28     	; 0x222 <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 206:	f8 01       	movw	r30, r16
 208:	61 91       	ld	r22, Z+
 20a:	8f 01       	movw	r16, r30
 20c:	8c 2f       	mov	r24, r28
 20e:	8a 5c       	subi	r24, 0xCA	; 202
 210:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	f7 01       	movw	r30, r14
 218:	22 81       	ldd	r18, Z+2	; 0x02
 21a:	33 81       	ldd	r19, Z+3	; 0x03
 21c:	c2 17       	cp	r28, r18
 21e:	d3 07       	cpc	r29, r19
 220:	94 f3       	brlt	.-28     	; 0x206 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 81 01 	call	0x302	; 0x302 <MCP2515_request_to_send>
		
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	rx_int_flag = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 52 01 	sts	0x0152, r24
 250:	08 95       	ret

00000252 <__vector_1>:
	msg.ID = ID;
	
	return msg;
}

ISR(INT0_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 274:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_int_vect>
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 29a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_deactivate_SS();
 2a4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
 2a8:	08 95       	ret

000002aa <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 2aa:	0e 94 e6 02 	call	0x5cc	; 0x5cc <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 2ae:	0e 94 4d 01 	call	0x29a	; 0x29a <MCP2515_reset>
 2b2:	08 95       	ret

000002b4 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 2b8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(address);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	data = SPI_read_write(0x00);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
 2ce:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 2d0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
	return data;
}
 2d4:	8c 2f       	mov	r24, r28
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	d8 2f       	mov	r29, r24
 2e0:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 2e2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(address);
 2ec:	8d 2f       	mov	r24, r29
 2ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(data);
 2f2:	8c 2f       	mov	r24, r28
 2f4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_deactivate_SS();
 2f8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 306:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_activate_SS>
	if (command <= 7){
 30a:	c8 30       	cpi	r28, 0x08	; 8
 30c:	28 f4       	brcc	.+10     	; 0x318 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 30e:	8c 2f       	mov	r24, r28
 310:	80 68       	ori	r24, 0x80	; 128
 312:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
 316:	03 c0       	rjmp	.+6      	; 0x31e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	}
	SPI_deactivate_SS();
 31e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	18 2f       	mov	r17, r24
 32e:	d6 2f       	mov	r29, r22
 330:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 332:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(address);
 33c:	81 2f       	mov	r24, r17
 33e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(mask_byte);
 342:	8d 2f       	mov	r24, r29
 344:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_read_write(data_byte);
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_read_write>
	SPI_deactivate_SS();
 34e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 35a:	5d 9b       	sbis	0x0b, 5	; 11
 35c:	fe cf       	rjmp	.-4      	; 0x35a <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 35e:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret

00000366 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 366:	5f 9b       	sbis	0x0b, 7	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 36a:	8c b1       	in	r24, 0x0c	; 12
}
 36c:	08 95       	ret

0000036e <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 36e:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 370:	88 e1       	ldi	r24, 0x18	; 24
 372:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 374:	63 eb       	ldi	r22, 0xB3	; 179
 376:	71 e0       	ldi	r23, 0x01	; 1
 378:	8d ea       	ldi	r24, 0xAD	; 173
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <fdevopen>
 380:	90 93 55 01 	sts	0x0155, r25
 384:	80 93 54 01 	sts	0x0154, r24
	
	return 0; 
}
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret

0000038e <joystick_read>:
channel 4 = y
channel 5 = x
*/


int joystick_read(int channel){
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
	double pos = ADC_read(channel);
 396:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 39a:	68 2f       	mov	r22, r24
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 1f 04 	call	0x83e	; 0x83e <__floatunsisf>
 3a6:	6b 01       	movw	r12, r22
 3a8:	7c 01       	movw	r14, r24
	
	if (pos < 132){
		double a = (100-(pos/(132)*100));
	}

	if (pos < 132){
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	44 e0       	ldi	r20, 0x04	; 4
 3b0:	53 e4       	ldi	r21, 0x43	; 67
 3b2:	0e 94 82 03 	call	0x704	; 0x704 <__cmpsf2>
 3b6:	88 23       	and	r24, r24
 3b8:	ec f4       	brge	.+58     	; 0x3f4 <joystick_read+0x66>
		double a = (100-(pos/(132)*100));
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	44 e0       	ldi	r20, 0x04	; 4
 3c0:	53 e4       	ldi	r21, 0x43	; 67
 3c2:	c7 01       	movw	r24, r14
 3c4:	b6 01       	movw	r22, r12
 3c6:	0e 94 86 03 	call	0x70c	; 0x70c <__divsf3>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	48 ec       	ldi	r20, 0xC8	; 200
 3d0:	52 e4       	ldi	r21, 0x42	; 66
 3d2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__mulsf3>
 3d6:	9b 01       	movw	r18, r22
 3d8:	ac 01       	movw	r20, r24
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	88 ec       	ldi	r24, 0xC8	; 200
 3e0:	92 e4       	ldi	r25, 0x42	; 66
 3e2:	0e 94 1d 03 	call	0x63a	; 0x63a <__subsf3>
	

		return -(int)a;
 3e6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fixsfsi>
 3ea:	88 27       	eor	r24, r24
 3ec:	99 27       	eor	r25, r25
 3ee:	86 1b       	sub	r24, r22
 3f0:	97 0b       	sbc	r25, r23
 3f2:	17 c0       	rjmp	.+46     	; 0x422 <joystick_read+0x94>
	}
	else{
		double a = (pos-132)/(255-132)*100;
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	44 e0       	ldi	r20, 0x04	; 4
 3fa:	53 e4       	ldi	r21, 0x43	; 67
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	0e 94 1d 03 	call	0x63a	; 0x63a <__subsf3>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	46 ef       	ldi	r20, 0xF6	; 246
 40a:	52 e4       	ldi	r21, 0x42	; 66
 40c:	0e 94 86 03 	call	0x70c	; 0x70c <__divsf3>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	48 ec       	ldi	r20, 0xC8	; 200
 416:	52 e4       	ldi	r21, 0x42	; 66
 418:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__mulsf3>

		return (int)a;
 41c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fixsfsi>
 420:	cb 01       	movw	r24, r22
	}
}
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	08 95       	ret

0000042c <find_joystick_dir>:
		return test_bit(PINB, PINB0);
	}
	return -1;
}

joystick_dir find_joystick_dir(void){
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
	int joystick_x = joystick_read(4);
 430:	84 e0       	ldi	r24, 0x04	; 4
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 c7 01 	call	0x38e	; 0x38e <joystick_read>
 438:	ec 01       	movw	r28, r24
	int joystick_y = joystick_read(5);
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 c7 01 	call	0x38e	; 0x38e <joystick_read>
	//printf("x = %d\n", joystick_x); 
	//printf("y = %d\n", joystick_y); 
	
	if (joystick_y > 80){
 442:	81 35       	cpi	r24, 0x51	; 81
 444:	91 05       	cpc	r25, r1
 446:	5c f4       	brge	.+22     	; 0x45e <find_joystick_dir+0x32>
		return UP;
	}
	else if (joystick_y < -80){
 448:	80 3b       	cpi	r24, 0xB0	; 176
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	54 f0       	brlt	.+20     	; 0x462 <find_joystick_dir+0x36>
		return DOWN;
	}
	else if(joystick_x > 80){
 44e:	c1 35       	cpi	r28, 0x51	; 81
 450:	d1 05       	cpc	r29, r1
 452:	4c f4       	brge	.+18     	; 0x466 <find_joystick_dir+0x3a>
		return RIGHT;
	}
	else if(joystick_x < -80){
 454:	c0 3b       	cpi	r28, 0xB0	; 176
 456:	df 4f       	sbci	r29, 0xFF	; 255
 458:	44 f4       	brge	.+16     	; 0x46a <find_joystick_dir+0x3e>
		return LEFT;
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	07 c0       	rjmp	.+14     	; 0x46c <find_joystick_dir+0x40>
	int joystick_y = joystick_read(5);
	//printf("x = %d\n", joystick_x); 
	//printf("y = %d\n", joystick_y); 
	
	if (joystick_y > 80){
		return UP;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <find_joystick_dir+0x40>
	}
	else if (joystick_y < -80){
		return DOWN;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	03 c0       	rjmp	.+6      	; 0x46c <find_joystick_dir+0x40>
	}
	else if(joystick_x > 80){
		return RIGHT;
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	01 c0       	rjmp	.+2      	; 0x46c <find_joystick_dir+0x40>
	}
	else if(joystick_x < -80){
		return LEFT;
	}
	return CENTER;
 46a:	84 e0       	ldi	r24, 0x04	; 4
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <send_joystick_pos>:

void send_joystick_pos(void){
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	2c 97       	sbiw	r28, 0x0c	; 12
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
	joystick_dir joy_pos = find_joystick_dir();
 486:	0e 94 16 02 	call	0x42c	; 0x42c <find_joystick_dir>
	Message msg;
		
	msg.length = 1;
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	3c 83       	std	Y+4, r19	; 0x04
 490:	2b 83       	std	Y+3, r18	; 0x03
	msg.data[0] = (uint8_t)joy_pos;
 492:	8d 83       	std	Y+5, r24	; 0x05
	msg.ID = 0;
 494:	1a 82       	std	Y+2, r1	; 0x02
 496:	19 82       	std	Y+1, r1	; 0x01
	
	CAN_send(&msg);
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	0e 94 ce 00 	call	0x19c	; 0x19c <CAN_send>
}
 4a0:	2c 96       	adiw	r28, 0x0c	; 12
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 4b2:	e0 91 06 01 	lds	r30, 0x0106
 4b6:	f0 91 07 01 	lds	r31, 0x0107
 4ba:	8e ea       	ldi	r24, 0xAE	; 174
 4bc:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 4be:	e0 91 06 01 	lds	r30, 0x0106
 4c2:	f0 91 07 01 	lds	r31, 0x0107
 4c6:	81 ea       	ldi	r24, 0xA1	; 161
 4c8:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 4ca:	e0 91 06 01 	lds	r30, 0x0106
 4ce:	f0 91 07 01 	lds	r31, 0x0107
 4d2:	8a ed       	ldi	r24, 0xDA	; 218
 4d4:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 4d6:	e0 91 06 01 	lds	r30, 0x0106
 4da:	f0 91 07 01 	lds	r31, 0x0107
 4de:	82 e1       	ldi	r24, 0x12	; 18
 4e0:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 4e2:	e0 91 06 01 	lds	r30, 0x0106
 4e6:	f0 91 07 01 	lds	r31, 0x0107
 4ea:	88 ec       	ldi	r24, 0xC8	; 200
 4ec:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 4ee:	e0 91 06 01 	lds	r30, 0x0106
 4f2:	f0 91 07 01 	lds	r31, 0x0107
 4f6:	88 ea       	ldi	r24, 0xA8	; 168
 4f8:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 4fa:	e0 91 06 01 	lds	r30, 0x0106
 4fe:	f0 91 07 01 	lds	r31, 0x0107
 502:	8f e3       	ldi	r24, 0x3F	; 63
 504:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 506:	e0 91 06 01 	lds	r30, 0x0106
 50a:	f0 91 07 01 	lds	r31, 0x0107
 50e:	85 ed       	ldi	r24, 0xD5	; 213
 510:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 512:	e0 91 06 01 	lds	r30, 0x0106
 516:	f0 91 07 01 	lds	r31, 0x0107
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 51e:	e0 91 06 01 	lds	r30, 0x0106
 522:	f0 91 07 01 	lds	r31, 0x0107
 526:	81 e8       	ldi	r24, 0x81	; 129
 528:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 52a:	e0 91 06 01 	lds	r30, 0x0106
 52e:	f0 91 07 01 	lds	r31, 0x0107
 532:	80 e5       	ldi	r24, 0x50	; 80
 534:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 536:	e0 91 06 01 	lds	r30, 0x0106
 53a:	f0 91 07 01 	lds	r31, 0x0107
 53e:	89 ed       	ldi	r24, 0xD9	; 217
 540:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 542:	e0 91 06 01 	lds	r30, 0x0106
 546:	f0 91 07 01 	lds	r31, 0x0107
 54a:	81 e2       	ldi	r24, 0x21	; 33
 54c:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 54e:	e0 91 06 01 	lds	r30, 0x0106
 552:	f0 91 07 01 	lds	r31, 0x0107
 556:	80 e2       	ldi	r24, 0x20	; 32
 558:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 55a:	e0 91 06 01 	lds	r30, 0x0106
 55e:	f0 91 07 01 	lds	r31, 0x0107
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 566:	e0 91 06 01 	lds	r30, 0x0106
 56a:	f0 91 07 01 	lds	r31, 0x0107
 56e:	8b ed       	ldi	r24, 0xDB	; 219
 570:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 572:	e0 91 06 01 	lds	r30, 0x0106
 576:	f0 91 07 01 	lds	r31, 0x0107
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 57e:	e0 91 06 01 	lds	r30, 0x0106
 582:	f0 91 07 01 	lds	r31, 0x0107
 586:	8d ea       	ldi	r24, 0xAD	; 173
 588:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 58a:	e0 91 06 01 	lds	r30, 0x0106
 58e:	f0 91 07 01 	lds	r31, 0x0107
 592:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 594:	e0 91 06 01 	lds	r30, 0x0106
 598:	f0 91 07 01 	lds	r31, 0x0107
 59c:	84 ea       	ldi	r24, 0xA4	; 164
 59e:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 5a0:	e0 91 06 01 	lds	r30, 0x0106
 5a4:	f0 91 07 01 	lds	r31, 0x0107
 5a8:	86 ea       	ldi	r24, 0xA6	; 166
 5aa:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 5ac:	e0 91 06 01 	lds	r30, 0x0106
 5b0:	f0 91 07 01 	lds	r31, 0x0107
 5b4:	8f ea       	ldi	r24, 0xAF	; 175
 5b6:	80 83       	st	Z, r24
 5b8:	08 95       	ret

000005ba <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 5ba:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <SPI_read_write+0x2>
	return SPDR;
 5c0:	8f b1       	in	r24, 0x0f	; 15
}
 5c2:	08 95       	ret

000005c4 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 5c4:	c4 98       	cbi	0x18, 4	; 24
 5c6:	08 95       	ret

000005c8 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 5c8:	c4 9a       	sbi	0x18, 4	; 24
 5ca:	08 95       	ret

000005cc <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 5cc:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 5ce:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/16
	set_bit(SPCR, SPR0);
 5d0:	68 9a       	sbi	0x0d, 0	; 13
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 5d2:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 5d4:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 5d6:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 5d8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_deactivate_SS>
 5dc:	08 95       	ret

000005de <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 5de:	85 b7       	in	r24, 0x35	; 53
 5e0:	80 68       	ori	r24, 0x80	; 128
 5e2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 5e4:	80 b7       	in	r24, 0x30	; 48
 5e6:	80 62       	ori	r24, 0x20	; 32
 5e8:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 5ea:	85 b7       	in	r24, 0x35	; 53
 5ec:	8e 7f       	andi	r24, 0xFE	; 254
 5ee:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 5f0:	85 b7       	in	r24, 0x35	; 53
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 5f6:	8b b7       	in	r24, 0x3b	; 59
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 5fc:	8a 98       	cbi	0x11, 2	; 17
 5fe:	08 95       	ret

00000600 <main>:
volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 600:	f8 94       	cli
	UART_init(31);
 602:	8f e1       	ldi	r24, 0x1F	; 31
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_init>
	register_init();
 60a:	0e 94 ef 02 	call	0x5de	; 0x5de <register_init>
	oled_init();
 60e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <oled_init>
	ADC_init();
 612:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	CAN_init();
 616:	0e 94 84 00 	call	0x108	; 0x108 <CAN_init>
	//Enable global interrupts
	sei();
 61a:	78 94       	sei

	while(1){
		send_joystick_pos();
 61c:	0e 94 39 02 	call	0x472	; 0x472 <send_joystick_pos>
 620:	8f e1       	ldi	r24, 0x1F	; 31
 622:	9e e4       	ldi	r25, 0x4E	; 78
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x24>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x2a>
 62a:	00 00       	nop
		_delay_ms(80);
		
		if(ADC_ready){
 62c:	80 91 53 01 	lds	r24, 0x0153
 630:	88 23       	and	r24, r24
 632:	a1 f3       	breq	.-24     	; 0x61c <main+0x1c>
			ADC_ready = 0;
 634:	10 92 53 01 	sts	0x0153, r1
 638:	f1 cf       	rjmp	.-30     	; 0x61c <main+0x1c>

0000063a <__subsf3>:
 63a:	50 58       	subi	r21, 0x80	; 128

0000063c <__addsf3>:
 63c:	bb 27       	eor	r27, r27
 63e:	aa 27       	eor	r26, r26
 640:	0e d0       	rcall	.+28     	; 0x65e <__addsf3x>
 642:	75 c1       	rjmp	.+746    	; 0x92e <__fp_round>
 644:	66 d1       	rcall	.+716    	; 0x912 <__fp_pscA>
 646:	30 f0       	brcs	.+12     	; 0x654 <__addsf3+0x18>
 648:	6b d1       	rcall	.+726    	; 0x920 <__fp_pscB>
 64a:	20 f0       	brcs	.+8      	; 0x654 <__addsf3+0x18>
 64c:	31 f4       	brne	.+12     	; 0x65a <__addsf3+0x1e>
 64e:	9f 3f       	cpi	r25, 0xFF	; 255
 650:	11 f4       	brne	.+4      	; 0x656 <__addsf3+0x1a>
 652:	1e f4       	brtc	.+6      	; 0x65a <__addsf3+0x1e>
 654:	5b c1       	rjmp	.+694    	; 0x90c <__fp_nan>
 656:	0e f4       	brtc	.+2      	; 0x65a <__addsf3+0x1e>
 658:	e0 95       	com	r30
 65a:	e7 fb       	bst	r30, 7
 65c:	51 c1       	rjmp	.+674    	; 0x900 <__fp_inf>

0000065e <__addsf3x>:
 65e:	e9 2f       	mov	r30, r25
 660:	77 d1       	rcall	.+750    	; 0x950 <__fp_split3>
 662:	80 f3       	brcs	.-32     	; 0x644 <__addsf3+0x8>
 664:	ba 17       	cp	r27, r26
 666:	62 07       	cpc	r22, r18
 668:	73 07       	cpc	r23, r19
 66a:	84 07       	cpc	r24, r20
 66c:	95 07       	cpc	r25, r21
 66e:	18 f0       	brcs	.+6      	; 0x676 <__addsf3x+0x18>
 670:	71 f4       	brne	.+28     	; 0x68e <__addsf3x+0x30>
 672:	9e f5       	brtc	.+102    	; 0x6da <__addsf3x+0x7c>
 674:	8f c1       	rjmp	.+798    	; 0x994 <__fp_zero>
 676:	0e f4       	brtc	.+2      	; 0x67a <__addsf3x+0x1c>
 678:	e0 95       	com	r30
 67a:	0b 2e       	mov	r0, r27
 67c:	ba 2f       	mov	r27, r26
 67e:	a0 2d       	mov	r26, r0
 680:	0b 01       	movw	r0, r22
 682:	b9 01       	movw	r22, r18
 684:	90 01       	movw	r18, r0
 686:	0c 01       	movw	r0, r24
 688:	ca 01       	movw	r24, r20
 68a:	a0 01       	movw	r20, r0
 68c:	11 24       	eor	r1, r1
 68e:	ff 27       	eor	r31, r31
 690:	59 1b       	sub	r21, r25
 692:	99 f0       	breq	.+38     	; 0x6ba <__addsf3x+0x5c>
 694:	59 3f       	cpi	r21, 0xF9	; 249
 696:	50 f4       	brcc	.+20     	; 0x6ac <__addsf3x+0x4e>
 698:	50 3e       	cpi	r21, 0xE0	; 224
 69a:	68 f1       	brcs	.+90     	; 0x6f6 <__addsf3x+0x98>
 69c:	1a 16       	cp	r1, r26
 69e:	f0 40       	sbci	r31, 0x00	; 0
 6a0:	a2 2f       	mov	r26, r18
 6a2:	23 2f       	mov	r18, r19
 6a4:	34 2f       	mov	r19, r20
 6a6:	44 27       	eor	r20, r20
 6a8:	58 5f       	subi	r21, 0xF8	; 248
 6aa:	f3 cf       	rjmp	.-26     	; 0x692 <__addsf3x+0x34>
 6ac:	46 95       	lsr	r20
 6ae:	37 95       	ror	r19
 6b0:	27 95       	ror	r18
 6b2:	a7 95       	ror	r26
 6b4:	f0 40       	sbci	r31, 0x00	; 0
 6b6:	53 95       	inc	r21
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <__addsf3x+0x4e>
 6ba:	7e f4       	brtc	.+30     	; 0x6da <__addsf3x+0x7c>
 6bc:	1f 16       	cp	r1, r31
 6be:	ba 0b       	sbc	r27, r26
 6c0:	62 0b       	sbc	r22, r18
 6c2:	73 0b       	sbc	r23, r19
 6c4:	84 0b       	sbc	r24, r20
 6c6:	ba f0       	brmi	.+46     	; 0x6f6 <__addsf3x+0x98>
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	a1 f0       	breq	.+40     	; 0x6f4 <__addsf3x+0x96>
 6cc:	ff 0f       	add	r31, r31
 6ce:	bb 1f       	adc	r27, r27
 6d0:	66 1f       	adc	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	c2 f7       	brpl	.-16     	; 0x6c8 <__addsf3x+0x6a>
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <__addsf3x+0x98>
 6da:	ba 0f       	add	r27, r26
 6dc:	62 1f       	adc	r22, r18
 6de:	73 1f       	adc	r23, r19
 6e0:	84 1f       	adc	r24, r20
 6e2:	48 f4       	brcc	.+18     	; 0x6f6 <__addsf3x+0x98>
 6e4:	87 95       	ror	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	9e 3f       	cpi	r25, 0xFE	; 254
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <__addsf3x+0x96>
 6f2:	b3 cf       	rjmp	.-154    	; 0x65a <__addsf3+0x1e>
 6f4:	93 95       	inc	r25
 6f6:	88 0f       	add	r24, r24
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <__addsf3x+0x9e>
 6fa:	99 27       	eor	r25, r25
 6fc:	ee 0f       	add	r30, r30
 6fe:	97 95       	ror	r25
 700:	87 95       	ror	r24
 702:	08 95       	ret

00000704 <__cmpsf2>:
 704:	d9 d0       	rcall	.+434    	; 0x8b8 <__fp_cmp>
 706:	08 f4       	brcc	.+2      	; 0x70a <__cmpsf2+0x6>
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret

0000070c <__divsf3>:
 70c:	0c d0       	rcall	.+24     	; 0x726 <__divsf3x>
 70e:	0f c1       	rjmp	.+542    	; 0x92e <__fp_round>
 710:	07 d1       	rcall	.+526    	; 0x920 <__fp_pscB>
 712:	40 f0       	brcs	.+16     	; 0x724 <__divsf3+0x18>
 714:	fe d0       	rcall	.+508    	; 0x912 <__fp_pscA>
 716:	30 f0       	brcs	.+12     	; 0x724 <__divsf3+0x18>
 718:	21 f4       	brne	.+8      	; 0x722 <__divsf3+0x16>
 71a:	5f 3f       	cpi	r21, 0xFF	; 255
 71c:	19 f0       	breq	.+6      	; 0x724 <__divsf3+0x18>
 71e:	f0 c0       	rjmp	.+480    	; 0x900 <__fp_inf>
 720:	51 11       	cpse	r21, r1
 722:	39 c1       	rjmp	.+626    	; 0x996 <__fp_szero>
 724:	f3 c0       	rjmp	.+486    	; 0x90c <__fp_nan>

00000726 <__divsf3x>:
 726:	14 d1       	rcall	.+552    	; 0x950 <__fp_split3>
 728:	98 f3       	brcs	.-26     	; 0x710 <__divsf3+0x4>

0000072a <__divsf3_pse>:
 72a:	99 23       	and	r25, r25
 72c:	c9 f3       	breq	.-14     	; 0x720 <__divsf3+0x14>
 72e:	55 23       	and	r21, r21
 730:	b1 f3       	breq	.-20     	; 0x71e <__divsf3+0x12>
 732:	95 1b       	sub	r25, r21
 734:	55 0b       	sbc	r21, r21
 736:	bb 27       	eor	r27, r27
 738:	aa 27       	eor	r26, r26
 73a:	62 17       	cp	r22, r18
 73c:	73 07       	cpc	r23, r19
 73e:	84 07       	cpc	r24, r20
 740:	38 f0       	brcs	.+14     	; 0x750 <__divsf3_pse+0x26>
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	22 0f       	add	r18, r18
 748:	33 1f       	adc	r19, r19
 74a:	44 1f       	adc	r20, r20
 74c:	aa 1f       	adc	r26, r26
 74e:	a9 f3       	breq	.-22     	; 0x73a <__divsf3_pse+0x10>
 750:	33 d0       	rcall	.+102    	; 0x7b8 <__divsf3_pse+0x8e>
 752:	0e 2e       	mov	r0, r30
 754:	3a f0       	brmi	.+14     	; 0x764 <__divsf3_pse+0x3a>
 756:	e0 e8       	ldi	r30, 0x80	; 128
 758:	30 d0       	rcall	.+96     	; 0x7ba <__divsf3_pse+0x90>
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	e6 95       	lsr	r30
 760:	00 1c       	adc	r0, r0
 762:	ca f7       	brpl	.-14     	; 0x756 <__divsf3_pse+0x2c>
 764:	29 d0       	rcall	.+82     	; 0x7b8 <__divsf3_pse+0x8e>
 766:	fe 2f       	mov	r31, r30
 768:	27 d0       	rcall	.+78     	; 0x7b8 <__divsf3_pse+0x8e>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	bb 1f       	adc	r27, r27
 772:	26 17       	cp	r18, r22
 774:	37 07       	cpc	r19, r23
 776:	48 07       	cpc	r20, r24
 778:	ab 07       	cpc	r26, r27
 77a:	b0 e8       	ldi	r27, 0x80	; 128
 77c:	09 f0       	breq	.+2      	; 0x780 <__divsf3_pse+0x56>
 77e:	bb 0b       	sbc	r27, r27
 780:	80 2d       	mov	r24, r0
 782:	bf 01       	movw	r22, r30
 784:	ff 27       	eor	r31, r31
 786:	93 58       	subi	r25, 0x83	; 131
 788:	5f 4f       	sbci	r21, 0xFF	; 255
 78a:	2a f0       	brmi	.+10     	; 0x796 <__divsf3_pse+0x6c>
 78c:	9e 3f       	cpi	r25, 0xFE	; 254
 78e:	51 05       	cpc	r21, r1
 790:	68 f0       	brcs	.+26     	; 0x7ac <__divsf3_pse+0x82>
 792:	b6 c0       	rjmp	.+364    	; 0x900 <__fp_inf>
 794:	00 c1       	rjmp	.+512    	; 0x996 <__fp_szero>
 796:	5f 3f       	cpi	r21, 0xFF	; 255
 798:	ec f3       	brlt	.-6      	; 0x794 <__divsf3_pse+0x6a>
 79a:	98 3e       	cpi	r25, 0xE8	; 232
 79c:	dc f3       	brlt	.-10     	; 0x794 <__divsf3_pse+0x6a>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b7 95       	ror	r27
 7a6:	f7 95       	ror	r31
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	c9 f7       	brne	.-14     	; 0x79e <__divsf3_pse+0x74>
 7ac:	88 0f       	add	r24, r24
 7ae:	91 1d       	adc	r25, r1
 7b0:	96 95       	lsr	r25
 7b2:	87 95       	ror	r24
 7b4:	97 f9       	bld	r25, 7
 7b6:	08 95       	ret
 7b8:	e1 e0       	ldi	r30, 0x01	; 1
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	bb 1f       	adc	r27, r27
 7c2:	62 17       	cp	r22, r18
 7c4:	73 07       	cpc	r23, r19
 7c6:	84 07       	cpc	r24, r20
 7c8:	ba 07       	cpc	r27, r26
 7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__divsf3_pse+0xaa>
 7cc:	62 1b       	sub	r22, r18
 7ce:	73 0b       	sbc	r23, r19
 7d0:	84 0b       	sbc	r24, r20
 7d2:	ba 0b       	sbc	r27, r26
 7d4:	ee 1f       	adc	r30, r30
 7d6:	88 f7       	brcc	.-30     	; 0x7ba <__divsf3_pse+0x90>
 7d8:	e0 95       	com	r30
 7da:	08 95       	ret

000007dc <__fixsfsi>:
 7dc:	04 d0       	rcall	.+8      	; 0x7e6 <__fixunssfsi>
 7de:	68 94       	set
 7e0:	b1 11       	cpse	r27, r1
 7e2:	d9 c0       	rjmp	.+434    	; 0x996 <__fp_szero>
 7e4:	08 95       	ret

000007e6 <__fixunssfsi>:
 7e6:	bc d0       	rcall	.+376    	; 0x960 <__fp_splitA>
 7e8:	88 f0       	brcs	.+34     	; 0x80c <__fixunssfsi+0x26>
 7ea:	9f 57       	subi	r25, 0x7F	; 127
 7ec:	90 f0       	brcs	.+36     	; 0x812 <__fixunssfsi+0x2c>
 7ee:	b9 2f       	mov	r27, r25
 7f0:	99 27       	eor	r25, r25
 7f2:	b7 51       	subi	r27, 0x17	; 23
 7f4:	a0 f0       	brcs	.+40     	; 0x81e <__fixunssfsi+0x38>
 7f6:	d1 f0       	breq	.+52     	; 0x82c <__fixunssfsi+0x46>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	1a f0       	brmi	.+6      	; 0x808 <__fixunssfsi+0x22>
 802:	ba 95       	dec	r27
 804:	c9 f7       	brne	.-14     	; 0x7f8 <__fixunssfsi+0x12>
 806:	12 c0       	rjmp	.+36     	; 0x82c <__fixunssfsi+0x46>
 808:	b1 30       	cpi	r27, 0x01	; 1
 80a:	81 f0       	breq	.+32     	; 0x82c <__fixunssfsi+0x46>
 80c:	c3 d0       	rcall	.+390    	; 0x994 <__fp_zero>
 80e:	b1 e0       	ldi	r27, 0x01	; 1
 810:	08 95       	ret
 812:	c0 c0       	rjmp	.+384    	; 0x994 <__fp_zero>
 814:	67 2f       	mov	r22, r23
 816:	78 2f       	mov	r23, r24
 818:	88 27       	eor	r24, r24
 81a:	b8 5f       	subi	r27, 0xF8	; 248
 81c:	39 f0       	breq	.+14     	; 0x82c <__fixunssfsi+0x46>
 81e:	b9 3f       	cpi	r27, 0xF9	; 249
 820:	cc f3       	brlt	.-14     	; 0x814 <__fixunssfsi+0x2e>
 822:	86 95       	lsr	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b3 95       	inc	r27
 82a:	d9 f7       	brne	.-10     	; 0x822 <__fixunssfsi+0x3c>
 82c:	3e f4       	brtc	.+14     	; 0x83c <__fixunssfsi+0x56>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__floatunsisf>:
 83e:	e8 94       	clt
 840:	09 c0       	rjmp	.+18     	; 0x854 <__floatsisf+0x12>

00000842 <__floatsisf>:
 842:	97 fb       	bst	r25, 7
 844:	3e f4       	brtc	.+14     	; 0x854 <__floatsisf+0x12>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	99 23       	and	r25, r25
 856:	a9 f0       	breq	.+42     	; 0x882 <__floatsisf+0x40>
 858:	f9 2f       	mov	r31, r25
 85a:	96 e9       	ldi	r25, 0x96	; 150
 85c:	bb 27       	eor	r27, r27
 85e:	93 95       	inc	r25
 860:	f6 95       	lsr	r31
 862:	87 95       	ror	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f1 11       	cpse	r31, r1
 86c:	f8 cf       	rjmp	.-16     	; 0x85e <__floatsisf+0x1c>
 86e:	fa f4       	brpl	.+62     	; 0x8ae <__floatsisf+0x6c>
 870:	bb 0f       	add	r27, r27
 872:	11 f4       	brne	.+4      	; 0x878 <__floatsisf+0x36>
 874:	60 ff       	sbrs	r22, 0
 876:	1b c0       	rjmp	.+54     	; 0x8ae <__floatsisf+0x6c>
 878:	6f 5f       	subi	r22, 0xFF	; 255
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	16 c0       	rjmp	.+44     	; 0x8ae <__floatsisf+0x6c>
 882:	88 23       	and	r24, r24
 884:	11 f0       	breq	.+4      	; 0x88a <__floatsisf+0x48>
 886:	96 e9       	ldi	r25, 0x96	; 150
 888:	11 c0       	rjmp	.+34     	; 0x8ac <__floatsisf+0x6a>
 88a:	77 23       	and	r23, r23
 88c:	21 f0       	breq	.+8      	; 0x896 <__floatsisf+0x54>
 88e:	9e e8       	ldi	r25, 0x8E	; 142
 890:	87 2f       	mov	r24, r23
 892:	76 2f       	mov	r23, r22
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <__floatsisf+0x5e>
 896:	66 23       	and	r22, r22
 898:	71 f0       	breq	.+28     	; 0x8b6 <__floatsisf+0x74>
 89a:	96 e8       	ldi	r25, 0x86	; 134
 89c:	86 2f       	mov	r24, r22
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	2a f0       	brmi	.+10     	; 0x8ae <__floatsisf+0x6c>
 8a4:	9a 95       	dec	r25
 8a6:	66 0f       	add	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	88 1f       	adc	r24, r24
 8ac:	da f7       	brpl	.-10     	; 0x8a4 <__floatsisf+0x62>
 8ae:	88 0f       	add	r24, r24
 8b0:	96 95       	lsr	r25
 8b2:	87 95       	ror	r24
 8b4:	97 f9       	bld	r25, 7
 8b6:	08 95       	ret

000008b8 <__fp_cmp>:
 8b8:	99 0f       	add	r25, r25
 8ba:	00 08       	sbc	r0, r0
 8bc:	55 0f       	add	r21, r21
 8be:	aa 0b       	sbc	r26, r26
 8c0:	e0 e8       	ldi	r30, 0x80	; 128
 8c2:	fe ef       	ldi	r31, 0xFE	; 254
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	e8 07       	cpc	r30, r24
 8ca:	f9 07       	cpc	r31, r25
 8cc:	c0 f0       	brcs	.+48     	; 0x8fe <__fp_cmp+0x46>
 8ce:	12 16       	cp	r1, r18
 8d0:	13 06       	cpc	r1, r19
 8d2:	e4 07       	cpc	r30, r20
 8d4:	f5 07       	cpc	r31, r21
 8d6:	98 f0       	brcs	.+38     	; 0x8fe <__fp_cmp+0x46>
 8d8:	62 1b       	sub	r22, r18
 8da:	73 0b       	sbc	r23, r19
 8dc:	84 0b       	sbc	r24, r20
 8de:	95 0b       	sbc	r25, r21
 8e0:	39 f4       	brne	.+14     	; 0x8f0 <__fp_cmp+0x38>
 8e2:	0a 26       	eor	r0, r26
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_cmp+0x46>
 8e6:	23 2b       	or	r18, r19
 8e8:	24 2b       	or	r18, r20
 8ea:	25 2b       	or	r18, r21
 8ec:	21 f4       	brne	.+8      	; 0x8f6 <__fp_cmp+0x3e>
 8ee:	08 95       	ret
 8f0:	0a 26       	eor	r0, r26
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <__fp_cmp+0x3e>
 8f4:	a1 40       	sbci	r26, 0x01	; 1
 8f6:	a6 95       	lsr	r26
 8f8:	8f ef       	ldi	r24, 0xFF	; 255
 8fa:	81 1d       	adc	r24, r1
 8fc:	81 1d       	adc	r24, r1
 8fe:	08 95       	ret

00000900 <__fp_inf>:
 900:	97 f9       	bld	r25, 7
 902:	9f 67       	ori	r25, 0x7F	; 127
 904:	80 e8       	ldi	r24, 0x80	; 128
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	08 95       	ret

0000090c <__fp_nan>:
 90c:	9f ef       	ldi	r25, 0xFF	; 255
 90e:	80 ec       	ldi	r24, 0xC0	; 192
 910:	08 95       	ret

00000912 <__fp_pscA>:
 912:	00 24       	eor	r0, r0
 914:	0a 94       	dec	r0
 916:	16 16       	cp	r1, r22
 918:	17 06       	cpc	r1, r23
 91a:	18 06       	cpc	r1, r24
 91c:	09 06       	cpc	r0, r25
 91e:	08 95       	ret

00000920 <__fp_pscB>:
 920:	00 24       	eor	r0, r0
 922:	0a 94       	dec	r0
 924:	12 16       	cp	r1, r18
 926:	13 06       	cpc	r1, r19
 928:	14 06       	cpc	r1, r20
 92a:	05 06       	cpc	r0, r21
 92c:	08 95       	ret

0000092e <__fp_round>:
 92e:	09 2e       	mov	r0, r25
 930:	03 94       	inc	r0
 932:	00 0c       	add	r0, r0
 934:	11 f4       	brne	.+4      	; 0x93a <__fp_round+0xc>
 936:	88 23       	and	r24, r24
 938:	52 f0       	brmi	.+20     	; 0x94e <__fp_round+0x20>
 93a:	bb 0f       	add	r27, r27
 93c:	40 f4       	brcc	.+16     	; 0x94e <__fp_round+0x20>
 93e:	bf 2b       	or	r27, r31
 940:	11 f4       	brne	.+4      	; 0x946 <__fp_round+0x18>
 942:	60 ff       	sbrs	r22, 0
 944:	04 c0       	rjmp	.+8      	; 0x94e <__fp_round+0x20>
 946:	6f 5f       	subi	r22, 0xFF	; 255
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	08 95       	ret

00000950 <__fp_split3>:
 950:	57 fd       	sbrc	r21, 7
 952:	90 58       	subi	r25, 0x80	; 128
 954:	44 0f       	add	r20, r20
 956:	55 1f       	adc	r21, r21
 958:	59 f0       	breq	.+22     	; 0x970 <__fp_splitA+0x10>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	71 f0       	breq	.+28     	; 0x97a <__fp_splitA+0x1a>
 95e:	47 95       	ror	r20

00000960 <__fp_splitA>:
 960:	88 0f       	add	r24, r24
 962:	97 fb       	bst	r25, 7
 964:	99 1f       	adc	r25, r25
 966:	61 f0       	breq	.+24     	; 0x980 <__fp_splitA+0x20>
 968:	9f 3f       	cpi	r25, 0xFF	; 255
 96a:	79 f0       	breq	.+30     	; 0x98a <__fp_splitA+0x2a>
 96c:	87 95       	ror	r24
 96e:	08 95       	ret
 970:	12 16       	cp	r1, r18
 972:	13 06       	cpc	r1, r19
 974:	14 06       	cpc	r1, r20
 976:	55 1f       	adc	r21, r21
 978:	f2 cf       	rjmp	.-28     	; 0x95e <__fp_split3+0xe>
 97a:	46 95       	lsr	r20
 97c:	f1 df       	rcall	.-30     	; 0x960 <__fp_splitA>
 97e:	08 c0       	rjmp	.+16     	; 0x990 <__fp_splitA+0x30>
 980:	16 16       	cp	r1, r22
 982:	17 06       	cpc	r1, r23
 984:	18 06       	cpc	r1, r24
 986:	99 1f       	adc	r25, r25
 988:	f1 cf       	rjmp	.-30     	; 0x96c <__fp_splitA+0xc>
 98a:	86 95       	lsr	r24
 98c:	71 05       	cpc	r23, r1
 98e:	61 05       	cpc	r22, r1
 990:	08 94       	sec
 992:	08 95       	ret

00000994 <__fp_zero>:
 994:	e8 94       	clt

00000996 <__fp_szero>:
 996:	bb 27       	eor	r27, r27
 998:	66 27       	eor	r22, r22
 99a:	77 27       	eor	r23, r23
 99c:	cb 01       	movw	r24, r22
 99e:	97 f9       	bld	r25, 7
 9a0:	08 95       	ret

000009a2 <__mulsf3>:
 9a2:	0b d0       	rcall	.+22     	; 0x9ba <__mulsf3x>
 9a4:	c4 cf       	rjmp	.-120    	; 0x92e <__fp_round>
 9a6:	b5 df       	rcall	.-150    	; 0x912 <__fp_pscA>
 9a8:	28 f0       	brcs	.+10     	; 0x9b4 <__mulsf3+0x12>
 9aa:	ba df       	rcall	.-140    	; 0x920 <__fp_pscB>
 9ac:	18 f0       	brcs	.+6      	; 0x9b4 <__mulsf3+0x12>
 9ae:	95 23       	and	r25, r21
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <__mulsf3+0x12>
 9b2:	a6 cf       	rjmp	.-180    	; 0x900 <__fp_inf>
 9b4:	ab cf       	rjmp	.-170    	; 0x90c <__fp_nan>
 9b6:	11 24       	eor	r1, r1
 9b8:	ee cf       	rjmp	.-36     	; 0x996 <__fp_szero>

000009ba <__mulsf3x>:
 9ba:	ca df       	rcall	.-108    	; 0x950 <__fp_split3>
 9bc:	a0 f3       	brcs	.-24     	; 0x9a6 <__mulsf3+0x4>

000009be <__mulsf3_pse>:
 9be:	95 9f       	mul	r25, r21
 9c0:	d1 f3       	breq	.-12     	; 0x9b6 <__mulsf3+0x14>
 9c2:	95 0f       	add	r25, r21
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	55 1f       	adc	r21, r21
 9c8:	62 9f       	mul	r22, r18
 9ca:	f0 01       	movw	r30, r0
 9cc:	72 9f       	mul	r23, r18
 9ce:	bb 27       	eor	r27, r27
 9d0:	f0 0d       	add	r31, r0
 9d2:	b1 1d       	adc	r27, r1
 9d4:	63 9f       	mul	r22, r19
 9d6:	aa 27       	eor	r26, r26
 9d8:	f0 0d       	add	r31, r0
 9da:	b1 1d       	adc	r27, r1
 9dc:	aa 1f       	adc	r26, r26
 9de:	64 9f       	mul	r22, r20
 9e0:	66 27       	eor	r22, r22
 9e2:	b0 0d       	add	r27, r0
 9e4:	a1 1d       	adc	r26, r1
 9e6:	66 1f       	adc	r22, r22
 9e8:	82 9f       	mul	r24, r18
 9ea:	22 27       	eor	r18, r18
 9ec:	b0 0d       	add	r27, r0
 9ee:	a1 1d       	adc	r26, r1
 9f0:	62 1f       	adc	r22, r18
 9f2:	73 9f       	mul	r23, r19
 9f4:	b0 0d       	add	r27, r0
 9f6:	a1 1d       	adc	r26, r1
 9f8:	62 1f       	adc	r22, r18
 9fa:	83 9f       	mul	r24, r19
 9fc:	a0 0d       	add	r26, r0
 9fe:	61 1d       	adc	r22, r1
 a00:	22 1f       	adc	r18, r18
 a02:	74 9f       	mul	r23, r20
 a04:	33 27       	eor	r19, r19
 a06:	a0 0d       	add	r26, r0
 a08:	61 1d       	adc	r22, r1
 a0a:	23 1f       	adc	r18, r19
 a0c:	84 9f       	mul	r24, r20
 a0e:	60 0d       	add	r22, r0
 a10:	21 1d       	adc	r18, r1
 a12:	82 2f       	mov	r24, r18
 a14:	76 2f       	mov	r23, r22
 a16:	6a 2f       	mov	r22, r26
 a18:	11 24       	eor	r1, r1
 a1a:	9f 57       	subi	r25, 0x7F	; 127
 a1c:	50 40       	sbci	r21, 0x00	; 0
 a1e:	8a f0       	brmi	.+34     	; 0xa42 <__mulsf3_pse+0x84>
 a20:	e1 f0       	breq	.+56     	; 0xa5a <__mulsf3_pse+0x9c>
 a22:	88 23       	and	r24, r24
 a24:	4a f0       	brmi	.+18     	; 0xa38 <__mulsf3_pse+0x7a>
 a26:	ee 0f       	add	r30, r30
 a28:	ff 1f       	adc	r31, r31
 a2a:	bb 1f       	adc	r27, r27
 a2c:	66 1f       	adc	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	91 50       	subi	r25, 0x01	; 1
 a34:	50 40       	sbci	r21, 0x00	; 0
 a36:	a9 f7       	brne	.-22     	; 0xa22 <__mulsf3_pse+0x64>
 a38:	9e 3f       	cpi	r25, 0xFE	; 254
 a3a:	51 05       	cpc	r21, r1
 a3c:	70 f0       	brcs	.+28     	; 0xa5a <__mulsf3_pse+0x9c>
 a3e:	60 cf       	rjmp	.-320    	; 0x900 <__fp_inf>
 a40:	aa cf       	rjmp	.-172    	; 0x996 <__fp_szero>
 a42:	5f 3f       	cpi	r21, 0xFF	; 255
 a44:	ec f3       	brlt	.-6      	; 0xa40 <__mulsf3_pse+0x82>
 a46:	98 3e       	cpi	r25, 0xE8	; 232
 a48:	dc f3       	brlt	.-10     	; 0xa40 <__mulsf3_pse+0x82>
 a4a:	86 95       	lsr	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b7 95       	ror	r27
 a52:	f7 95       	ror	r31
 a54:	e7 95       	ror	r30
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	c1 f7       	brne	.-16     	; 0xa4a <__mulsf3_pse+0x8c>
 a5a:	fe 2b       	or	r31, r30
 a5c:	88 0f       	add	r24, r24
 a5e:	91 1d       	adc	r25, r1
 a60:	96 95       	lsr	r25
 a62:	87 95       	ror	r24
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <malloc>:
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	82 30       	cpi	r24, 0x02	; 2
 a6e:	91 05       	cpc	r25, r1
 a70:	10 f4       	brcc	.+4      	; 0xa76 <malloc+0xe>
 a72:	82 e0       	ldi	r24, 0x02	; 2
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	e0 91 58 01 	lds	r30, 0x0158
 a7a:	f0 91 59 01 	lds	r31, 0x0159
 a7e:	20 e0       	ldi	r18, 0x00	; 0
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	a0 e0       	ldi	r26, 0x00	; 0
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	30 97       	sbiw	r30, 0x00	; 0
 a88:	39 f1       	breq	.+78     	; 0xad8 <malloc+0x70>
 a8a:	40 81       	ld	r20, Z
 a8c:	51 81       	ldd	r21, Z+1	; 0x01
 a8e:	48 17       	cp	r20, r24
 a90:	59 07       	cpc	r21, r25
 a92:	b8 f0       	brcs	.+46     	; 0xac2 <malloc+0x5a>
 a94:	48 17       	cp	r20, r24
 a96:	59 07       	cpc	r21, r25
 a98:	71 f4       	brne	.+28     	; 0xab6 <malloc+0x4e>
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	10 97       	sbiw	r26, 0x00	; 0
 aa0:	29 f0       	breq	.+10     	; 0xaac <malloc+0x44>
 aa2:	13 96       	adiw	r26, 0x03	; 3
 aa4:	9c 93       	st	X, r25
 aa6:	8e 93       	st	-X, r24
 aa8:	12 97       	sbiw	r26, 0x02	; 2
 aaa:	2c c0       	rjmp	.+88     	; 0xb04 <malloc+0x9c>
 aac:	90 93 59 01 	sts	0x0159, r25
 ab0:	80 93 58 01 	sts	0x0158, r24
 ab4:	27 c0       	rjmp	.+78     	; 0xb04 <malloc+0x9c>
 ab6:	21 15       	cp	r18, r1
 ab8:	31 05       	cpc	r19, r1
 aba:	31 f0       	breq	.+12     	; 0xac8 <malloc+0x60>
 abc:	42 17       	cp	r20, r18
 abe:	53 07       	cpc	r21, r19
 ac0:	18 f0       	brcs	.+6      	; 0xac8 <malloc+0x60>
 ac2:	a9 01       	movw	r20, r18
 ac4:	db 01       	movw	r26, r22
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <malloc+0x62>
 ac8:	ef 01       	movw	r28, r30
 aca:	9a 01       	movw	r18, r20
 acc:	bd 01       	movw	r22, r26
 ace:	df 01       	movw	r26, r30
 ad0:	02 80       	ldd	r0, Z+2	; 0x02
 ad2:	f3 81       	ldd	r31, Z+3	; 0x03
 ad4:	e0 2d       	mov	r30, r0
 ad6:	d7 cf       	rjmp	.-82     	; 0xa86 <malloc+0x1e>
 ad8:	21 15       	cp	r18, r1
 ada:	31 05       	cpc	r19, r1
 adc:	f9 f0       	breq	.+62     	; 0xb1c <malloc+0xb4>
 ade:	28 1b       	sub	r18, r24
 ae0:	39 0b       	sbc	r19, r25
 ae2:	24 30       	cpi	r18, 0x04	; 4
 ae4:	31 05       	cpc	r19, r1
 ae6:	80 f4       	brcc	.+32     	; 0xb08 <malloc+0xa0>
 ae8:	8a 81       	ldd	r24, Y+2	; 0x02
 aea:	9b 81       	ldd	r25, Y+3	; 0x03
 aec:	61 15       	cp	r22, r1
 aee:	71 05       	cpc	r23, r1
 af0:	21 f0       	breq	.+8      	; 0xafa <malloc+0x92>
 af2:	fb 01       	movw	r30, r22
 af4:	93 83       	std	Z+3, r25	; 0x03
 af6:	82 83       	std	Z+2, r24	; 0x02
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <malloc+0x9a>
 afa:	90 93 59 01 	sts	0x0159, r25
 afe:	80 93 58 01 	sts	0x0158, r24
 b02:	fe 01       	movw	r30, r28
 b04:	32 96       	adiw	r30, 0x02	; 2
 b06:	44 c0       	rjmp	.+136    	; 0xb90 <malloc+0x128>
 b08:	fe 01       	movw	r30, r28
 b0a:	e2 0f       	add	r30, r18
 b0c:	f3 1f       	adc	r31, r19
 b0e:	81 93       	st	Z+, r24
 b10:	91 93       	st	Z+, r25
 b12:	22 50       	subi	r18, 0x02	; 2
 b14:	31 09       	sbc	r19, r1
 b16:	39 83       	std	Y+1, r19	; 0x01
 b18:	28 83       	st	Y, r18
 b1a:	3a c0       	rjmp	.+116    	; 0xb90 <malloc+0x128>
 b1c:	20 91 56 01 	lds	r18, 0x0156
 b20:	30 91 57 01 	lds	r19, 0x0157
 b24:	23 2b       	or	r18, r19
 b26:	41 f4       	brne	.+16     	; 0xb38 <malloc+0xd0>
 b28:	20 91 02 01 	lds	r18, 0x0102
 b2c:	30 91 03 01 	lds	r19, 0x0103
 b30:	30 93 57 01 	sts	0x0157, r19
 b34:	20 93 56 01 	sts	0x0156, r18
 b38:	20 91 00 01 	lds	r18, 0x0100
 b3c:	30 91 01 01 	lds	r19, 0x0101
 b40:	21 15       	cp	r18, r1
 b42:	31 05       	cpc	r19, r1
 b44:	41 f4       	brne	.+16     	; 0xb56 <malloc+0xee>
 b46:	2d b7       	in	r18, 0x3d	; 61
 b48:	3e b7       	in	r19, 0x3e	; 62
 b4a:	40 91 04 01 	lds	r20, 0x0104
 b4e:	50 91 05 01 	lds	r21, 0x0105
 b52:	24 1b       	sub	r18, r20
 b54:	35 0b       	sbc	r19, r21
 b56:	e0 91 56 01 	lds	r30, 0x0156
 b5a:	f0 91 57 01 	lds	r31, 0x0157
 b5e:	e2 17       	cp	r30, r18
 b60:	f3 07       	cpc	r31, r19
 b62:	a0 f4       	brcc	.+40     	; 0xb8c <malloc+0x124>
 b64:	2e 1b       	sub	r18, r30
 b66:	3f 0b       	sbc	r19, r31
 b68:	28 17       	cp	r18, r24
 b6a:	39 07       	cpc	r19, r25
 b6c:	78 f0       	brcs	.+30     	; 0xb8c <malloc+0x124>
 b6e:	ac 01       	movw	r20, r24
 b70:	4e 5f       	subi	r20, 0xFE	; 254
 b72:	5f 4f       	sbci	r21, 0xFF	; 255
 b74:	24 17       	cp	r18, r20
 b76:	35 07       	cpc	r19, r21
 b78:	48 f0       	brcs	.+18     	; 0xb8c <malloc+0x124>
 b7a:	4e 0f       	add	r20, r30
 b7c:	5f 1f       	adc	r21, r31
 b7e:	50 93 57 01 	sts	0x0157, r21
 b82:	40 93 56 01 	sts	0x0156, r20
 b86:	81 93       	st	Z+, r24
 b88:	91 93       	st	Z+, r25
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <malloc+0x128>
 b8c:	e0 e0       	ldi	r30, 0x00	; 0
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	cf 01       	movw	r24, r30
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	08 95       	ret

00000b98 <free>:
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	09 f4       	brne	.+2      	; 0xba2 <free+0xa>
 ba0:	87 c0       	rjmp	.+270    	; 0xcb0 <free+0x118>
 ba2:	fc 01       	movw	r30, r24
 ba4:	32 97       	sbiw	r30, 0x02	; 2
 ba6:	13 82       	std	Z+3, r1	; 0x03
 ba8:	12 82       	std	Z+2, r1	; 0x02
 baa:	c0 91 58 01 	lds	r28, 0x0158
 bae:	d0 91 59 01 	lds	r29, 0x0159
 bb2:	20 97       	sbiw	r28, 0x00	; 0
 bb4:	81 f4       	brne	.+32     	; 0xbd6 <free+0x3e>
 bb6:	20 81       	ld	r18, Z
 bb8:	31 81       	ldd	r19, Z+1	; 0x01
 bba:	28 0f       	add	r18, r24
 bbc:	39 1f       	adc	r19, r25
 bbe:	80 91 56 01 	lds	r24, 0x0156
 bc2:	90 91 57 01 	lds	r25, 0x0157
 bc6:	82 17       	cp	r24, r18
 bc8:	93 07       	cpc	r25, r19
 bca:	79 f5       	brne	.+94     	; 0xc2a <free+0x92>
 bcc:	f0 93 57 01 	sts	0x0157, r31
 bd0:	e0 93 56 01 	sts	0x0156, r30
 bd4:	6d c0       	rjmp	.+218    	; 0xcb0 <free+0x118>
 bd6:	de 01       	movw	r26, r28
 bd8:	20 e0       	ldi	r18, 0x00	; 0
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	ae 17       	cp	r26, r30
 bde:	bf 07       	cpc	r27, r31
 be0:	50 f4       	brcc	.+20     	; 0xbf6 <free+0x5e>
 be2:	12 96       	adiw	r26, 0x02	; 2
 be4:	4d 91       	ld	r20, X+
 be6:	5c 91       	ld	r21, X
 be8:	13 97       	sbiw	r26, 0x03	; 3
 bea:	9d 01       	movw	r18, r26
 bec:	41 15       	cp	r20, r1
 bee:	51 05       	cpc	r21, r1
 bf0:	09 f1       	breq	.+66     	; 0xc34 <free+0x9c>
 bf2:	da 01       	movw	r26, r20
 bf4:	f3 cf       	rjmp	.-26     	; 0xbdc <free+0x44>
 bf6:	b3 83       	std	Z+3, r27	; 0x03
 bf8:	a2 83       	std	Z+2, r26	; 0x02
 bfa:	40 81       	ld	r20, Z
 bfc:	51 81       	ldd	r21, Z+1	; 0x01
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	8a 17       	cp	r24, r26
 c04:	9b 07       	cpc	r25, r27
 c06:	71 f4       	brne	.+28     	; 0xc24 <free+0x8c>
 c08:	8d 91       	ld	r24, X+
 c0a:	9c 91       	ld	r25, X
 c0c:	11 97       	sbiw	r26, 0x01	; 1
 c0e:	84 0f       	add	r24, r20
 c10:	95 1f       	adc	r25, r21
 c12:	02 96       	adiw	r24, 0x02	; 2
 c14:	91 83       	std	Z+1, r25	; 0x01
 c16:	80 83       	st	Z, r24
 c18:	12 96       	adiw	r26, 0x02	; 2
 c1a:	8d 91       	ld	r24, X+
 c1c:	9c 91       	ld	r25, X
 c1e:	13 97       	sbiw	r26, 0x03	; 3
 c20:	93 83       	std	Z+3, r25	; 0x03
 c22:	82 83       	std	Z+2, r24	; 0x02
 c24:	21 15       	cp	r18, r1
 c26:	31 05       	cpc	r19, r1
 c28:	29 f4       	brne	.+10     	; 0xc34 <free+0x9c>
 c2a:	f0 93 59 01 	sts	0x0159, r31
 c2e:	e0 93 58 01 	sts	0x0158, r30
 c32:	3e c0       	rjmp	.+124    	; 0xcb0 <free+0x118>
 c34:	d9 01       	movw	r26, r18
 c36:	13 96       	adiw	r26, 0x03	; 3
 c38:	fc 93       	st	X, r31
 c3a:	ee 93       	st	-X, r30
 c3c:	12 97       	sbiw	r26, 0x02	; 2
 c3e:	4d 91       	ld	r20, X+
 c40:	5d 91       	ld	r21, X+
 c42:	a4 0f       	add	r26, r20
 c44:	b5 1f       	adc	r27, r21
 c46:	ea 17       	cp	r30, r26
 c48:	fb 07       	cpc	r31, r27
 c4a:	79 f4       	brne	.+30     	; 0xc6a <free+0xd2>
 c4c:	80 81       	ld	r24, Z
 c4e:	91 81       	ldd	r25, Z+1	; 0x01
 c50:	84 0f       	add	r24, r20
 c52:	95 1f       	adc	r25, r21
 c54:	02 96       	adiw	r24, 0x02	; 2
 c56:	d9 01       	movw	r26, r18
 c58:	11 96       	adiw	r26, 0x01	; 1
 c5a:	9c 93       	st	X, r25
 c5c:	8e 93       	st	-X, r24
 c5e:	82 81       	ldd	r24, Z+2	; 0x02
 c60:	93 81       	ldd	r25, Z+3	; 0x03
 c62:	13 96       	adiw	r26, 0x03	; 3
 c64:	9c 93       	st	X, r25
 c66:	8e 93       	st	-X, r24
 c68:	12 97       	sbiw	r26, 0x02	; 2
 c6a:	e0 e0       	ldi	r30, 0x00	; 0
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	8a 81       	ldd	r24, Y+2	; 0x02
 c70:	9b 81       	ldd	r25, Y+3	; 0x03
 c72:	00 97       	sbiw	r24, 0x00	; 0
 c74:	19 f0       	breq	.+6      	; 0xc7c <free+0xe4>
 c76:	fe 01       	movw	r30, r28
 c78:	ec 01       	movw	r28, r24
 c7a:	f9 cf       	rjmp	.-14     	; 0xc6e <free+0xd6>
 c7c:	ce 01       	movw	r24, r28
 c7e:	02 96       	adiw	r24, 0x02	; 2
 c80:	28 81       	ld	r18, Y
 c82:	39 81       	ldd	r19, Y+1	; 0x01
 c84:	82 0f       	add	r24, r18
 c86:	93 1f       	adc	r25, r19
 c88:	20 91 56 01 	lds	r18, 0x0156
 c8c:	30 91 57 01 	lds	r19, 0x0157
 c90:	28 17       	cp	r18, r24
 c92:	39 07       	cpc	r19, r25
 c94:	69 f4       	brne	.+26     	; 0xcb0 <free+0x118>
 c96:	30 97       	sbiw	r30, 0x00	; 0
 c98:	29 f4       	brne	.+10     	; 0xca4 <free+0x10c>
 c9a:	10 92 59 01 	sts	0x0159, r1
 c9e:	10 92 58 01 	sts	0x0158, r1
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <free+0x110>
 ca4:	13 82       	std	Z+3, r1	; 0x03
 ca6:	12 82       	std	Z+2, r1	; 0x02
 ca8:	d0 93 57 01 	sts	0x0157, r29
 cac:	c0 93 56 01 	sts	0x0156, r28
 cb0:	df 91       	pop	r29
 cb2:	cf 91       	pop	r28
 cb4:	08 95       	ret

00000cb6 <fdevopen>:
 cb6:	0f 93       	push	r16
 cb8:	1f 93       	push	r17
 cba:	cf 93       	push	r28
 cbc:	df 93       	push	r29
 cbe:	ec 01       	movw	r28, r24
 cc0:	8b 01       	movw	r16, r22
 cc2:	00 97       	sbiw	r24, 0x00	; 0
 cc4:	31 f4       	brne	.+12     	; 0xcd2 <fdevopen+0x1c>
 cc6:	61 15       	cp	r22, r1
 cc8:	71 05       	cpc	r23, r1
 cca:	19 f4       	brne	.+6      	; 0xcd2 <fdevopen+0x1c>
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	38 c0       	rjmp	.+112    	; 0xd42 <fdevopen+0x8c>
 cd2:	6e e0       	ldi	r22, 0x0E	; 14
 cd4:	70 e0       	ldi	r23, 0x00	; 0
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 d3 06 	call	0xda6	; 0xda6 <calloc>
 cde:	fc 01       	movw	r30, r24
 ce0:	00 97       	sbiw	r24, 0x00	; 0
 ce2:	a1 f3       	breq	.-24     	; 0xccc <fdevopen+0x16>
 ce4:	80 e8       	ldi	r24, 0x80	; 128
 ce6:	83 83       	std	Z+3, r24	; 0x03
 ce8:	01 15       	cp	r16, r1
 cea:	11 05       	cpc	r17, r1
 cec:	71 f0       	breq	.+28     	; 0xd0a <fdevopen+0x54>
 cee:	13 87       	std	Z+11, r17	; 0x0b
 cf0:	02 87       	std	Z+10, r16	; 0x0a
 cf2:	81 e8       	ldi	r24, 0x81	; 129
 cf4:	83 83       	std	Z+3, r24	; 0x03
 cf6:	80 91 5a 01 	lds	r24, 0x015A
 cfa:	90 91 5b 01 	lds	r25, 0x015B
 cfe:	89 2b       	or	r24, r25
 d00:	21 f4       	brne	.+8      	; 0xd0a <fdevopen+0x54>
 d02:	f0 93 5b 01 	sts	0x015B, r31
 d06:	e0 93 5a 01 	sts	0x015A, r30
 d0a:	20 97       	sbiw	r28, 0x00	; 0
 d0c:	c9 f0       	breq	.+50     	; 0xd40 <fdevopen+0x8a>
 d0e:	d1 87       	std	Z+9, r29	; 0x09
 d10:	c0 87       	std	Z+8, r28	; 0x08
 d12:	83 81       	ldd	r24, Z+3	; 0x03
 d14:	82 60       	ori	r24, 0x02	; 2
 d16:	83 83       	std	Z+3, r24	; 0x03
 d18:	80 91 5c 01 	lds	r24, 0x015C
 d1c:	90 91 5d 01 	lds	r25, 0x015D
 d20:	89 2b       	or	r24, r25
 d22:	71 f4       	brne	.+28     	; 0xd40 <fdevopen+0x8a>
 d24:	f0 93 5d 01 	sts	0x015D, r31
 d28:	e0 93 5c 01 	sts	0x015C, r30
 d2c:	80 91 5e 01 	lds	r24, 0x015E
 d30:	90 91 5f 01 	lds	r25, 0x015F
 d34:	89 2b       	or	r24, r25
 d36:	21 f4       	brne	.+8      	; 0xd40 <fdevopen+0x8a>
 d38:	f0 93 5f 01 	sts	0x015F, r31
 d3c:	e0 93 5e 01 	sts	0x015E, r30
 d40:	cf 01       	movw	r24, r30
 d42:	df 91       	pop	r29
 d44:	cf 91       	pop	r28
 d46:	1f 91       	pop	r17
 d48:	0f 91       	pop	r16
 d4a:	08 95       	ret

00000d4c <puts>:
 d4c:	0f 93       	push	r16
 d4e:	1f 93       	push	r17
 d50:	cf 93       	push	r28
 d52:	df 93       	push	r29
 d54:	e0 91 5c 01 	lds	r30, 0x015C
 d58:	f0 91 5d 01 	lds	r31, 0x015D
 d5c:	23 81       	ldd	r18, Z+3	; 0x03
 d5e:	21 ff       	sbrs	r18, 1
 d60:	1b c0       	rjmp	.+54     	; 0xd98 <puts+0x4c>
 d62:	ec 01       	movw	r28, r24
 d64:	00 e0       	ldi	r16, 0x00	; 0
 d66:	10 e0       	ldi	r17, 0x00	; 0
 d68:	89 91       	ld	r24, Y+
 d6a:	60 91 5c 01 	lds	r22, 0x015C
 d6e:	70 91 5d 01 	lds	r23, 0x015D
 d72:	db 01       	movw	r26, r22
 d74:	18 96       	adiw	r26, 0x08	; 8
 d76:	ed 91       	ld	r30, X+
 d78:	fc 91       	ld	r31, X
 d7a:	19 97       	sbiw	r26, 0x09	; 9
 d7c:	88 23       	and	r24, r24
 d7e:	31 f0       	breq	.+12     	; 0xd8c <puts+0x40>
 d80:	09 95       	icall
 d82:	89 2b       	or	r24, r25
 d84:	89 f3       	breq	.-30     	; 0xd68 <puts+0x1c>
 d86:	0f ef       	ldi	r16, 0xFF	; 255
 d88:	1f ef       	ldi	r17, 0xFF	; 255
 d8a:	ee cf       	rjmp	.-36     	; 0xd68 <puts+0x1c>
 d8c:	8a e0       	ldi	r24, 0x0A	; 10
 d8e:	09 95       	icall
 d90:	89 2b       	or	r24, r25
 d92:	11 f4       	brne	.+4      	; 0xd98 <puts+0x4c>
 d94:	c8 01       	movw	r24, r16
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <puts+0x50>
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	9f ef       	ldi	r25, 0xFF	; 255
 d9c:	df 91       	pop	r29
 d9e:	cf 91       	pop	r28
 da0:	1f 91       	pop	r17
 da2:	0f 91       	pop	r16
 da4:	08 95       	ret

00000da6 <calloc>:
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	86 9f       	mul	r24, r22
 db0:	80 01       	movw	r16, r0
 db2:	87 9f       	mul	r24, r23
 db4:	10 0d       	add	r17, r0
 db6:	96 9f       	mul	r25, r22
 db8:	10 0d       	add	r17, r0
 dba:	11 24       	eor	r1, r1
 dbc:	c8 01       	movw	r24, r16
 dbe:	0e 94 34 05 	call	0xa68	; 0xa68 <malloc>
 dc2:	ec 01       	movw	r28, r24
 dc4:	00 97       	sbiw	r24, 0x00	; 0
 dc6:	29 f0       	breq	.+10     	; 0xdd2 <calloc+0x2c>
 dc8:	a8 01       	movw	r20, r16
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	70 e0       	ldi	r23, 0x00	; 0
 dce:	0e 94 ef 06 	call	0xdde	; 0xdde <memset>
 dd2:	ce 01       	movw	r24, r28
 dd4:	df 91       	pop	r29
 dd6:	cf 91       	pop	r28
 dd8:	1f 91       	pop	r17
 dda:	0f 91       	pop	r16
 ddc:	08 95       	ret

00000dde <memset>:
 dde:	dc 01       	movw	r26, r24
 de0:	01 c0       	rjmp	.+2      	; 0xde4 <memset+0x6>
 de2:	6d 93       	st	X+, r22
 de4:	41 50       	subi	r20, 0x01	; 1
 de6:	50 40       	sbci	r21, 0x00	; 0
 de8:	e0 f7       	brcc	.-8      	; 0xde2 <memset+0x4>
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>


ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800196  00800196  000010d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001988  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b93  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b68  00000000  00000000  00003885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000564  00000000  00000000  000043f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060d  00000000  00000000  00004954  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000db5  00000000  00000000  00004f61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00005d16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ea       	ldi	r30, 0xAC	; 172
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 39       	cpi	r26, 0x96	; 150
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e9       	ldi	r26, 0x96	; 150
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 3a       	cpi	r26, 0xA7	; 167
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 38 03 	call	0x670	; 0x670 <main>
  a6:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e3 ef       	ldi	r30, 0xF3	; 243
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <ADC_read+0x4>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <ADC_read+0xa>
  e0:	00 00       	nop
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	_delay_ms(2);
	//Choose channel in ADC
	*adc = 0x04 | channel;
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  e8:	80 91 9a 01 	lds	r24, 0x019A
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <ADC_read+0x12>
	//ADC_ready = 0; 
	return *adc;
  f0:	80 91 00 14 	lds	r24, 0x1400
}
  f4:	08 95       	ret

000000f6 <__vector_3>:


ISR(INT2_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
	ADC_ready = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 9a 01 	sts	0x019A, r24
	//wake up the CPU
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <CAN_init>:
uint8_t last_slider_pos_r = 0;
uint8_t last_button_l = 0;

Message msg;

int CAN_init(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 11e:	0e 94 05 02 	call	0x40a	; 0x40a <MCP2515_init>
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <CAN_init+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <CAN_init+0x18>
 12c:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 12e:	8e e0       	ldi	r24, 0x0E	; 14
 130:	0e 94 0a 02 	call	0x414	; 0x414 <MCP2515_read>
 134:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	80 7e       	andi	r24, 0xE0	; 224
 13a:	80 38       	cpi	r24, 0x80	; 128
 13c:	39 f0       	breq	.+14     	; 0x14c <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 d5 04 	call	0x9aa	; 0x9aa <puts>
		return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	1f c0       	rjmp	.+62     	; 0x18a <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 156:	4f ef       	ldi	r20, 0xFF	; 255
 158:	60 e6       	ldi	r22, 0x60	; 96
 15a:	80 e6       	ldi	r24, 0x60	; 96
 15c:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 ee       	ldi	r22, 0xE0	; 224
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	0e 94 0a 02 	call	0x414	; 0x414 <MCP2515_read>
 170:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 7e       	andi	r24, 0xE0	; 224
 176:	39 f0       	breq	.+14     	; 0x186 <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <puts>
		return 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <CAN_init+0x76>
	}
	
	return 0;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
}
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	0e 94 0a 02 	call	0x414	; 0x414 <MCP2515_read>
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1b6:	0e 94 c9 00 	call	0x192	; 0x192 <CAN_transmit_complete>
 1ba:	89 2b       	or	r24, r25
 1bc:	d9 f1       	breq	.+118    	; 0x234 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1be:	f7 01       	movw	r30, r14
 1c0:	60 81       	ld	r22, Z
 1c2:	66 95       	lsr	r22
 1c4:	66 95       	lsr	r22
 1c6:	66 95       	lsr	r22
 1c8:	81 e3       	ldi	r24, 0x31	; 49
 1ca:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1ce:	f7 01       	movw	r30, r14
 1d0:	60 81       	ld	r22, Z
 1d2:	62 95       	swap	r22
 1d4:	66 0f       	add	r22, r22
 1d6:	60 7e       	andi	r22, 0xE0	; 224
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1de:	f7 01       	movw	r30, r14
 1e0:	62 81       	ldd	r22, Z+2	; 0x02
 1e2:	6f 70       	andi	r22, 0x0F	; 15
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1ea:	f7 01       	movw	r30, r14
 1ec:	82 81       	ldd	r24, Z+2	; 0x02
 1ee:	93 81       	ldd	r25, Z+3	; 0x03
 1f0:	89 30       	cpi	r24, 0x09	; 9
 1f2:	91 05       	cpc	r25, r1
 1f4:	54 f0       	brlt	.+20     	; 0x20a <CAN_send+0x62>
			msg->length = 8;
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	93 83       	std	Z+3, r25	; 0x03
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	87 01       	movw	r16, r14
 200:	0c 5f       	subi	r16, 0xFC	; 252
 202:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	04 c0       	rjmp	.+8      	; 0x212 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	bc f3       	brlt	.-18     	; 0x1fe <CAN_send+0x56>
 210:	0e c0       	rjmp	.+28     	; 0x22e <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 212:	f8 01       	movw	r30, r16
 214:	61 91       	ld	r22, Z+
 216:	8f 01       	movw	r16, r30
 218:	8c 2f       	mov	r24, r28
 21a:	8a 5c       	subi	r24, 0xCA	; 202
 21c:	0e 94 1d 02 	call	0x43a	; 0x43a <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	f7 01       	movw	r30, r14
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	33 81       	ldd	r19, Z+3	; 0x03
 228:	c2 17       	cp	r28, r18
 22a:	d3 07       	cpc	r29, r19
 22c:	94 f3       	brlt	.-28     	; 0x212 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 31 02 	call	0x462	; 0x462 <MCP2515_request_to_send>
		
	}
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	8c e2       	ldi	r24, 0x2C	; 44
 252:	0e 94 43 02 	call	0x486	; 0x486 <MCP2515_bit_modify>
	rx_int_flag = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 99 01 	sts	0x0199, r24
 25c:	08 95       	ret

0000025e <CAN_send_msg>:
	
}


void CAN_send_msg(void){
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2c 97       	sbiw	r28, 0x0c	; 12
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t joy_pos_x = joystick_read(CHANNEL_X);
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 77 02 	call	0x4ee	; 0x4ee <joystick_read>
 292:	6c 01       	movw	r12, r24
	uint8_t joy_pos_y = joystick_read(CHANNEL_Y);
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 77 02 	call	0x4ee	; 0x4ee <joystick_read>
 29c:	4c 01       	movw	r8, r24
	uint8_t slider_pos_r = slider_read(SLIDER_R);
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <slider_read>
 2a6:	7c 01       	movw	r14, r24
	uint8_t slider_pos_l = slider_read(SLIDER_L);
 2a8:	87 e0       	ldi	r24, 0x07	; 7
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <slider_read>
 2b0:	5c 01       	movw	r10, r24
	int button_l = button_read(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <button_read>
 2ba:	8c 01       	movw	r16, r24
	
	printf("x_pos %d \t ", joy_pos_x);
 2bc:	36 01       	movw	r6, r12
 2be:	77 24       	eor	r7, r7
 2c0:	7f 92       	push	r7
 2c2:	6f 92       	push	r6
 2c4:	82 e5       	ldi	r24, 0x52	; 82
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	0e 94 c1 04 	call	0x982	; 0x982 <printf>
	printf("y_pos %d \t ", joy_pos_y);
 2d0:	99 24       	eor	r9, r9
 2d2:	9f 92       	push	r9
 2d4:	8f 92       	push	r8
 2d6:	8e e5       	ldi	r24, 0x5E	; 94
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	0e 94 c1 04 	call	0x982	; 0x982 <printf>
	printf("slider_l_pos %d \t ", slider_pos_l);
 2e2:	bb 24       	eor	r11, r11
 2e4:	bf 92       	push	r11
 2e6:	af 92       	push	r10
 2e8:	8a e6       	ldi	r24, 0x6A	; 106
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	0e 94 c1 04 	call	0x982	; 0x982 <printf>
	printf("Button %d \t ", button_l);
 2f4:	1f 93       	push	r17
 2f6:	0f 93       	push	r16
 2f8:	8d e7       	ldi	r24, 0x7D	; 125
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	0e 94 c1 04 	call	0x982	; 0x982 <printf>
	printf("slider %d \n", slider_pos_r);
 304:	57 01       	movw	r10, r14
 306:	bb 24       	eor	r11, r11
 308:	bf 92       	push	r11
 30a:	af 92       	push	r10
 30c:	8a e8       	ldi	r24, 0x8A	; 138
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	0e 94 c1 04 	call	0x982	; 0x982 <printf>
	
	if(abs(joy_pos_x - last_joystick_pos_x) > 10 || abs(slider_pos_r - last_slider_pos_r) > 10 || (button_l != last_button_l)){
 318:	80 91 98 01 	lds	r24, 0x0198
 31c:	68 1a       	sub	r6, r24
 31e:	71 08       	sbc	r7, r1
 320:	c3 01       	movw	r24, r6
 322:	99 23       	and	r25, r25
 324:	24 f4       	brge	.+8      	; 0x32e <CAN_send_msg+0xd0>
 326:	88 27       	eor	r24, r24
 328:	99 27       	eor	r25, r25
 32a:	86 19       	sub	r24, r6
 32c:	97 09       	sbc	r25, r7
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	0b 97       	sbiw	r24, 0x0b	; 11
 33a:	9c f4       	brge	.+38     	; 0x362 <CAN_send_msg+0x104>
 33c:	80 91 97 01 	lds	r24, 0x0197
 340:	a8 1a       	sub	r10, r24
 342:	b1 08       	sbc	r11, r1
 344:	c5 01       	movw	r24, r10
 346:	99 23       	and	r25, r25
 348:	24 f4       	brge	.+8      	; 0x352 <CAN_send_msg+0xf4>
 34a:	88 27       	eor	r24, r24
 34c:	99 27       	eor	r25, r25
 34e:	8a 19       	sub	r24, r10
 350:	9b 09       	sbc	r25, r11
 352:	0b 97       	sbiw	r24, 0x0b	; 11
 354:	34 f4       	brge	.+12     	; 0x362 <CAN_send_msg+0x104>
 356:	80 91 96 01 	lds	r24, 0x0196
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	80 17       	cp	r24, r16
 35e:	91 07       	cpc	r25, r17
 360:	99 f0       	breq	.+38     	; 0x388 <CAN_send_msg+0x12a>
		Message msg;
		
		msg.length = 3;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9c 83       	std	Y+4, r25	; 0x04
 368:	8b 83       	std	Y+3, r24	; 0x03
		msg.data[0] = joy_pos_x;
 36a:	cd 82       	std	Y+5, r12	; 0x05
		msg.data[1] = slider_pos_r;
 36c:	ee 82       	std	Y+6, r14	; 0x06
		msg.data[2] = button_l;
 36e:	0f 83       	std	Y+7, r16	; 0x07
		msg.ID = 0;
 370:	1a 82       	std	Y+2, r1	; 0x02
 372:	19 82       	std	Y+1, r1	; 0x01
		
		CAN_send(&msg);
 374:	ce 01       	movw	r24, r28
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CAN_send>
		last_joystick_pos_x = joy_pos_x;
 37c:	c0 92 98 01 	sts	0x0198, r12
		last_slider_pos_r = slider_pos_r;
 380:	e0 92 97 01 	sts	0x0197, r14
		last_button_l = button_l;
 384:	00 93 96 01 	sts	0x0196, r16
		
	}
}
 388:	2c 96       	adiw	r28, 0x0c	; 12
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	08 95       	ret

000003b2 <__vector_1>:

ISR(INT0_vect){
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 3d4:	0e 94 21 01 	call	0x242	; 0x242 <CAN_int_vect>
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 3fa:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_deactivate_SS();
 404:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
 408:	08 95       	ret

0000040a <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 40a:	0e 94 1e 03 	call	0x63c	; 0x63c <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 40e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <MCP2515_reset>
 412:	08 95       	ret

00000414 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 414:	cf 93       	push	r28
 416:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 418:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(address);
 422:	8c 2f       	mov	r24, r28
 424:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	data = SPI_read_write(0x00);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
 42e:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 430:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
	return data;
}
 434:	8c 2f       	mov	r24, r28
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	d8 2f       	mov	r29, r24
 440:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 442:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(address);
 44c:	8d 2f       	mov	r24, r29
 44e:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(data);
 452:	8c 2f       	mov	r24, r28
 454:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_deactivate_SS();
 458:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 462:	cf 93       	push	r28
 464:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 466:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_activate_SS>
	if (command <= 7){
 46a:	c8 30       	cpi	r28, 0x08	; 8
 46c:	28 f4       	brcc	.+10     	; 0x478 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 46e:	8c 2f       	mov	r24, r28
 470:	80 68       	ori	r24, 0x80	; 128
 472:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
 476:	03 c0       	rjmp	.+6      	; 0x47e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	}
	SPI_deactivate_SS();
 47e:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
}
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	18 2f       	mov	r17, r24
 48e:	d6 2f       	mov	r29, r22
 490:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 492:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 496:	85 e0       	ldi	r24, 0x05	; 5
 498:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(address);
 49c:	81 2f       	mov	r24, r17
 49e:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(mask_byte);
 4a2:	8d 2f       	mov	r24, r29
 4a4:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_read_write(data_byte);
 4a8:	8c 2f       	mov	r24, r28
 4aa:	0e 94 15 03 	call	0x62a	; 0x62a <SPI_read_write>
	SPI_deactivate_SS();
 4ae:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	08 95       	ret

000004ba <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 4ba:	5d 9b       	sbis	0x0b, 5	; 11
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 4be:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 4c6:	5f 9b       	sbis	0x0b, 7	; 11
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 4ca:	8c b1       	in	r24, 0x0c	; 12
}
 4cc:	08 95       	ret

000004ce <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 4ce:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 4d0:	88 e1       	ldi	r24, 0x18	; 24
 4d2:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 4d4:	63 e6       	ldi	r22, 0x63	; 99
 4d6:	72 e0       	ldi	r23, 0x02	; 2
 4d8:	8d e5       	ldi	r24, 0x5D	; 93
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	0e 94 76 04 	call	0x8ec	; 0x8ec <fdevopen>
 4e0:	90 93 9c 01 	sts	0x019C, r25
 4e4:	80 93 9b 01 	sts	0x019B, r24
	
	return 0; 
}
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	08 95       	ret

000004ee <joystick_read>:



int joystick_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <slider_read>:


int slider_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 4f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
}
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret

000004fe <button_read>:
	/*
	Left button = 1
	Right button = 2
	*/
	
	if (button == 1){
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	91 05       	cpc	r25, r1
 502:	21 f4       	brne	.+8      	; 0x50c <__stack+0xd>
		return (test_bit(PINB, PINB1));		//returns 2??
 504:	46 b3       	in	r20, 0x16	; 22
 506:	42 70       	andi	r20, 0x02	; 2
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	09 c0       	rjmp	.+18     	; 0x51e <__stack+0x1f>
		}else if(button == 2){
 50c:	02 97       	sbiw	r24, 0x02	; 2
 50e:	29 f4       	brne	.+10     	; 0x51a <__stack+0x1b>
		return test_bit(PINB, PINB0);
 510:	86 b3       	in	r24, 0x16	; 22
 512:	48 2f       	mov	r20, r24
 514:	41 70       	andi	r20, 0x01	; 1
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <__stack+0x1f>
	}
	return -1;
 51a:	4f ef       	ldi	r20, 0xFF	; 255
 51c:	5f ef       	ldi	r21, 0xFF	; 255
}
 51e:	ca 01       	movw	r24, r20
 520:	08 95       	ret

00000522 <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 522:	e0 91 06 01 	lds	r30, 0x0106
 526:	f0 91 07 01 	lds	r31, 0x0107
 52a:	8e ea       	ldi	r24, 0xAE	; 174
 52c:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 52e:	e0 91 06 01 	lds	r30, 0x0106
 532:	f0 91 07 01 	lds	r31, 0x0107
 536:	81 ea       	ldi	r24, 0xA1	; 161
 538:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 53a:	e0 91 06 01 	lds	r30, 0x0106
 53e:	f0 91 07 01 	lds	r31, 0x0107
 542:	8a ed       	ldi	r24, 0xDA	; 218
 544:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 546:	e0 91 06 01 	lds	r30, 0x0106
 54a:	f0 91 07 01 	lds	r31, 0x0107
 54e:	82 e1       	ldi	r24, 0x12	; 18
 550:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 552:	e0 91 06 01 	lds	r30, 0x0106
 556:	f0 91 07 01 	lds	r31, 0x0107
 55a:	88 ec       	ldi	r24, 0xC8	; 200
 55c:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 55e:	e0 91 06 01 	lds	r30, 0x0106
 562:	f0 91 07 01 	lds	r31, 0x0107
 566:	88 ea       	ldi	r24, 0xA8	; 168
 568:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 56a:	e0 91 06 01 	lds	r30, 0x0106
 56e:	f0 91 07 01 	lds	r31, 0x0107
 572:	8f e3       	ldi	r24, 0x3F	; 63
 574:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 576:	e0 91 06 01 	lds	r30, 0x0106
 57a:	f0 91 07 01 	lds	r31, 0x0107
 57e:	85 ed       	ldi	r24, 0xD5	; 213
 580:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 582:	e0 91 06 01 	lds	r30, 0x0106
 586:	f0 91 07 01 	lds	r31, 0x0107
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 58e:	e0 91 06 01 	lds	r30, 0x0106
 592:	f0 91 07 01 	lds	r31, 0x0107
 596:	81 e8       	ldi	r24, 0x81	; 129
 598:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 59a:	e0 91 06 01 	lds	r30, 0x0106
 59e:	f0 91 07 01 	lds	r31, 0x0107
 5a2:	80 e5       	ldi	r24, 0x50	; 80
 5a4:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 5a6:	e0 91 06 01 	lds	r30, 0x0106
 5aa:	f0 91 07 01 	lds	r31, 0x0107
 5ae:	89 ed       	ldi	r24, 0xD9	; 217
 5b0:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 5b2:	e0 91 06 01 	lds	r30, 0x0106
 5b6:	f0 91 07 01 	lds	r31, 0x0107
 5ba:	81 e2       	ldi	r24, 0x21	; 33
 5bc:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 5be:	e0 91 06 01 	lds	r30, 0x0106
 5c2:	f0 91 07 01 	lds	r31, 0x0107
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 5ca:	e0 91 06 01 	lds	r30, 0x0106
 5ce:	f0 91 07 01 	lds	r31, 0x0107
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 5d6:	e0 91 06 01 	lds	r30, 0x0106
 5da:	f0 91 07 01 	lds	r31, 0x0107
 5de:	8b ed       	ldi	r24, 0xDB	; 219
 5e0:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 5e2:	e0 91 06 01 	lds	r30, 0x0106
 5e6:	f0 91 07 01 	lds	r31, 0x0107
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 5ee:	e0 91 06 01 	lds	r30, 0x0106
 5f2:	f0 91 07 01 	lds	r31, 0x0107
 5f6:	8d ea       	ldi	r24, 0xAD	; 173
 5f8:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 5fa:	e0 91 06 01 	lds	r30, 0x0106
 5fe:	f0 91 07 01 	lds	r31, 0x0107
 602:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 604:	e0 91 06 01 	lds	r30, 0x0106
 608:	f0 91 07 01 	lds	r31, 0x0107
 60c:	84 ea       	ldi	r24, 0xA4	; 164
 60e:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 610:	e0 91 06 01 	lds	r30, 0x0106
 614:	f0 91 07 01 	lds	r31, 0x0107
 618:	86 ea       	ldi	r24, 0xA6	; 166
 61a:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 61c:	e0 91 06 01 	lds	r30, 0x0106
 620:	f0 91 07 01 	lds	r31, 0x0107
 624:	8f ea       	ldi	r24, 0xAF	; 175
 626:	80 83       	st	Z, r24
 628:	08 95       	ret

0000062a <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 62a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 62c:	77 9b       	sbis	0x0e, 7	; 14
 62e:	fe cf       	rjmp	.-4      	; 0x62c <SPI_read_write+0x2>
	return SPDR;
 630:	8f b1       	in	r24, 0x0f	; 15
}
 632:	08 95       	ret

00000634 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 634:	c4 98       	cbi	0x18, 4	; 24
 636:	08 95       	ret

00000638 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 638:	c4 9a       	sbi	0x18, 4	; 24
 63a:	08 95       	ret

0000063c <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 63c:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 63e:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/2
	set_bit(SPSR, SPI2X);
 640:	70 9a       	sbi	0x0e, 0	; 14
	
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 642:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 644:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 646:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 648:	0e 94 1c 03 	call	0x638	; 0x638 <SPI_deactivate_SS>
 64c:	08 95       	ret

0000064e <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 64e:	85 b7       	in	r24, 0x35	; 53
 650:	80 68       	ori	r24, 0x80	; 128
 652:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 654:	80 b7       	in	r24, 0x30	; 48
 656:	80 62       	ori	r24, 0x20	; 32
 658:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 65a:	85 b7       	in	r24, 0x35	; 53
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 660:	85 b7       	in	r24, 0x35	; 53
 662:	82 60       	ori	r24, 0x02	; 2
 664:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 666:	8b b7       	in	r24, 0x3b	; 59
 668:	80 64       	ori	r24, 0x40	; 64
 66a:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 66c:	8a 98       	cbi	0x11, 2	; 17
 66e:	08 95       	ret

00000670 <main>:
//volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 670:	f8 94       	cli
	UART_init(31);
 672:	8f e1       	ldi	r24, 0x1F	; 31
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 67 02 	call	0x4ce	; 0x4ce <UART_init>
	register_init();
 67a:	0e 94 27 03 	call	0x64e	; 0x64e <register_init>
	oled_init();
 67e:	0e 94 91 02 	call	0x522	; 0x522 <oled_init>
	ADC_init();
 682:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	CAN_init();
 686:	0e 94 8a 00 	call	0x114	; 0x114 <CAN_init>
	//Enable global interrupts
	sei();
 68a:	78 94       	sei
	

	
	while(1){
		
		CAN_send_msg();
 68c:	0e 94 2f 01 	call	0x25e	; 0x25e <CAN_send_msg>
		
		//printf("Y %d \t", ADC_read(CHANNEL_X));
		//printf("X %d\n", ADC_read(CHANNEL_Y));
	
		if(ADC_ready){
 690:	80 91 9a 01 	lds	r24, 0x019A
 694:	88 23       	and	r24, r24
 696:	d1 f3       	breq	.-12     	; 0x68c <main+0x1c>
			ADC_ready = 0;
 698:	10 92 9a 01 	sts	0x019A, r1
 69c:	f7 cf       	rjmp	.-18     	; 0x68c <main+0x1c>

0000069e <malloc>:
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	91 05       	cpc	r25, r1
 6a6:	10 f4       	brcc	.+4      	; 0x6ac <malloc+0xe>
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	e0 91 9f 01 	lds	r30, 0x019F
 6b0:	f0 91 a0 01 	lds	r31, 0x01A0
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	a0 e0       	ldi	r26, 0x00	; 0
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	39 f1       	breq	.+78     	; 0x70e <malloc+0x70>
 6c0:	40 81       	ld	r20, Z
 6c2:	51 81       	ldd	r21, Z+1	; 0x01
 6c4:	48 17       	cp	r20, r24
 6c6:	59 07       	cpc	r21, r25
 6c8:	b8 f0       	brcs	.+46     	; 0x6f8 <malloc+0x5a>
 6ca:	48 17       	cp	r20, r24
 6cc:	59 07       	cpc	r21, r25
 6ce:	71 f4       	brne	.+28     	; 0x6ec <malloc+0x4e>
 6d0:	82 81       	ldd	r24, Z+2	; 0x02
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	10 97       	sbiw	r26, 0x00	; 0
 6d6:	29 f0       	breq	.+10     	; 0x6e2 <malloc+0x44>
 6d8:	13 96       	adiw	r26, 0x03	; 3
 6da:	9c 93       	st	X, r25
 6dc:	8e 93       	st	-X, r24
 6de:	12 97       	sbiw	r26, 0x02	; 2
 6e0:	2c c0       	rjmp	.+88     	; 0x73a <malloc+0x9c>
 6e2:	90 93 a0 01 	sts	0x01A0, r25
 6e6:	80 93 9f 01 	sts	0x019F, r24
 6ea:	27 c0       	rjmp	.+78     	; 0x73a <malloc+0x9c>
 6ec:	21 15       	cp	r18, r1
 6ee:	31 05       	cpc	r19, r1
 6f0:	31 f0       	breq	.+12     	; 0x6fe <malloc+0x60>
 6f2:	42 17       	cp	r20, r18
 6f4:	53 07       	cpc	r21, r19
 6f6:	18 f0       	brcs	.+6      	; 0x6fe <malloc+0x60>
 6f8:	a9 01       	movw	r20, r18
 6fa:	db 01       	movw	r26, r22
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <malloc+0x62>
 6fe:	ef 01       	movw	r28, r30
 700:	9a 01       	movw	r18, r20
 702:	bd 01       	movw	r22, r26
 704:	df 01       	movw	r26, r30
 706:	02 80       	ldd	r0, Z+2	; 0x02
 708:	f3 81       	ldd	r31, Z+3	; 0x03
 70a:	e0 2d       	mov	r30, r0
 70c:	d7 cf       	rjmp	.-82     	; 0x6bc <malloc+0x1e>
 70e:	21 15       	cp	r18, r1
 710:	31 05       	cpc	r19, r1
 712:	f9 f0       	breq	.+62     	; 0x752 <malloc+0xb4>
 714:	28 1b       	sub	r18, r24
 716:	39 0b       	sbc	r19, r25
 718:	24 30       	cpi	r18, 0x04	; 4
 71a:	31 05       	cpc	r19, r1
 71c:	80 f4       	brcc	.+32     	; 0x73e <malloc+0xa0>
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	61 15       	cp	r22, r1
 724:	71 05       	cpc	r23, r1
 726:	21 f0       	breq	.+8      	; 0x730 <malloc+0x92>
 728:	fb 01       	movw	r30, r22
 72a:	93 83       	std	Z+3, r25	; 0x03
 72c:	82 83       	std	Z+2, r24	; 0x02
 72e:	04 c0       	rjmp	.+8      	; 0x738 <malloc+0x9a>
 730:	90 93 a0 01 	sts	0x01A0, r25
 734:	80 93 9f 01 	sts	0x019F, r24
 738:	fe 01       	movw	r30, r28
 73a:	32 96       	adiw	r30, 0x02	; 2
 73c:	44 c0       	rjmp	.+136    	; 0x7c6 <malloc+0x128>
 73e:	fe 01       	movw	r30, r28
 740:	e2 0f       	add	r30, r18
 742:	f3 1f       	adc	r31, r19
 744:	81 93       	st	Z+, r24
 746:	91 93       	st	Z+, r25
 748:	22 50       	subi	r18, 0x02	; 2
 74a:	31 09       	sbc	r19, r1
 74c:	39 83       	std	Y+1, r19	; 0x01
 74e:	28 83       	st	Y, r18
 750:	3a c0       	rjmp	.+116    	; 0x7c6 <malloc+0x128>
 752:	20 91 9d 01 	lds	r18, 0x019D
 756:	30 91 9e 01 	lds	r19, 0x019E
 75a:	23 2b       	or	r18, r19
 75c:	41 f4       	brne	.+16     	; 0x76e <malloc+0xd0>
 75e:	20 91 02 01 	lds	r18, 0x0102
 762:	30 91 03 01 	lds	r19, 0x0103
 766:	30 93 9e 01 	sts	0x019E, r19
 76a:	20 93 9d 01 	sts	0x019D, r18
 76e:	20 91 00 01 	lds	r18, 0x0100
 772:	30 91 01 01 	lds	r19, 0x0101
 776:	21 15       	cp	r18, r1
 778:	31 05       	cpc	r19, r1
 77a:	41 f4       	brne	.+16     	; 0x78c <malloc+0xee>
 77c:	2d b7       	in	r18, 0x3d	; 61
 77e:	3e b7       	in	r19, 0x3e	; 62
 780:	40 91 04 01 	lds	r20, 0x0104
 784:	50 91 05 01 	lds	r21, 0x0105
 788:	24 1b       	sub	r18, r20
 78a:	35 0b       	sbc	r19, r21
 78c:	e0 91 9d 01 	lds	r30, 0x019D
 790:	f0 91 9e 01 	lds	r31, 0x019E
 794:	e2 17       	cp	r30, r18
 796:	f3 07       	cpc	r31, r19
 798:	a0 f4       	brcc	.+40     	; 0x7c2 <malloc+0x124>
 79a:	2e 1b       	sub	r18, r30
 79c:	3f 0b       	sbc	r19, r31
 79e:	28 17       	cp	r18, r24
 7a0:	39 07       	cpc	r19, r25
 7a2:	78 f0       	brcs	.+30     	; 0x7c2 <malloc+0x124>
 7a4:	ac 01       	movw	r20, r24
 7a6:	4e 5f       	subi	r20, 0xFE	; 254
 7a8:	5f 4f       	sbci	r21, 0xFF	; 255
 7aa:	24 17       	cp	r18, r20
 7ac:	35 07       	cpc	r19, r21
 7ae:	48 f0       	brcs	.+18     	; 0x7c2 <malloc+0x124>
 7b0:	4e 0f       	add	r20, r30
 7b2:	5f 1f       	adc	r21, r31
 7b4:	50 93 9e 01 	sts	0x019E, r21
 7b8:	40 93 9d 01 	sts	0x019D, r20
 7bc:	81 93       	st	Z+, r24
 7be:	91 93       	st	Z+, r25
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <malloc+0x128>
 7c2:	e0 e0       	ldi	r30, 0x00	; 0
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	cf 01       	movw	r24, r30
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <free>:
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <free+0xa>
 7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <free+0x118>
 7d8:	fc 01       	movw	r30, r24
 7da:	32 97       	sbiw	r30, 0x02	; 2
 7dc:	13 82       	std	Z+3, r1	; 0x03
 7de:	12 82       	std	Z+2, r1	; 0x02
 7e0:	c0 91 9f 01 	lds	r28, 0x019F
 7e4:	d0 91 a0 01 	lds	r29, 0x01A0
 7e8:	20 97       	sbiw	r28, 0x00	; 0
 7ea:	81 f4       	brne	.+32     	; 0x80c <free+0x3e>
 7ec:	20 81       	ld	r18, Z
 7ee:	31 81       	ldd	r19, Z+1	; 0x01
 7f0:	28 0f       	add	r18, r24
 7f2:	39 1f       	adc	r19, r25
 7f4:	80 91 9d 01 	lds	r24, 0x019D
 7f8:	90 91 9e 01 	lds	r25, 0x019E
 7fc:	82 17       	cp	r24, r18
 7fe:	93 07       	cpc	r25, r19
 800:	79 f5       	brne	.+94     	; 0x860 <free+0x92>
 802:	f0 93 9e 01 	sts	0x019E, r31
 806:	e0 93 9d 01 	sts	0x019D, r30
 80a:	6d c0       	rjmp	.+218    	; 0x8e6 <free+0x118>
 80c:	de 01       	movw	r26, r28
 80e:	20 e0       	ldi	r18, 0x00	; 0
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	ae 17       	cp	r26, r30
 814:	bf 07       	cpc	r27, r31
 816:	50 f4       	brcc	.+20     	; 0x82c <free+0x5e>
 818:	12 96       	adiw	r26, 0x02	; 2
 81a:	4d 91       	ld	r20, X+
 81c:	5c 91       	ld	r21, X
 81e:	13 97       	sbiw	r26, 0x03	; 3
 820:	9d 01       	movw	r18, r26
 822:	41 15       	cp	r20, r1
 824:	51 05       	cpc	r21, r1
 826:	09 f1       	breq	.+66     	; 0x86a <free+0x9c>
 828:	da 01       	movw	r26, r20
 82a:	f3 cf       	rjmp	.-26     	; 0x812 <free+0x44>
 82c:	b3 83       	std	Z+3, r27	; 0x03
 82e:	a2 83       	std	Z+2, r26	; 0x02
 830:	40 81       	ld	r20, Z
 832:	51 81       	ldd	r21, Z+1	; 0x01
 834:	84 0f       	add	r24, r20
 836:	95 1f       	adc	r25, r21
 838:	8a 17       	cp	r24, r26
 83a:	9b 07       	cpc	r25, r27
 83c:	71 f4       	brne	.+28     	; 0x85a <free+0x8c>
 83e:	8d 91       	ld	r24, X+
 840:	9c 91       	ld	r25, X
 842:	11 97       	sbiw	r26, 0x01	; 1
 844:	84 0f       	add	r24, r20
 846:	95 1f       	adc	r25, r21
 848:	02 96       	adiw	r24, 0x02	; 2
 84a:	91 83       	std	Z+1, r25	; 0x01
 84c:	80 83       	st	Z, r24
 84e:	12 96       	adiw	r26, 0x02	; 2
 850:	8d 91       	ld	r24, X+
 852:	9c 91       	ld	r25, X
 854:	13 97       	sbiw	r26, 0x03	; 3
 856:	93 83       	std	Z+3, r25	; 0x03
 858:	82 83       	std	Z+2, r24	; 0x02
 85a:	21 15       	cp	r18, r1
 85c:	31 05       	cpc	r19, r1
 85e:	29 f4       	brne	.+10     	; 0x86a <free+0x9c>
 860:	f0 93 a0 01 	sts	0x01A0, r31
 864:	e0 93 9f 01 	sts	0x019F, r30
 868:	3e c0       	rjmp	.+124    	; 0x8e6 <free+0x118>
 86a:	d9 01       	movw	r26, r18
 86c:	13 96       	adiw	r26, 0x03	; 3
 86e:	fc 93       	st	X, r31
 870:	ee 93       	st	-X, r30
 872:	12 97       	sbiw	r26, 0x02	; 2
 874:	4d 91       	ld	r20, X+
 876:	5d 91       	ld	r21, X+
 878:	a4 0f       	add	r26, r20
 87a:	b5 1f       	adc	r27, r21
 87c:	ea 17       	cp	r30, r26
 87e:	fb 07       	cpc	r31, r27
 880:	79 f4       	brne	.+30     	; 0x8a0 <free+0xd2>
 882:	80 81       	ld	r24, Z
 884:	91 81       	ldd	r25, Z+1	; 0x01
 886:	84 0f       	add	r24, r20
 888:	95 1f       	adc	r25, r21
 88a:	02 96       	adiw	r24, 0x02	; 2
 88c:	d9 01       	movw	r26, r18
 88e:	11 96       	adiw	r26, 0x01	; 1
 890:	9c 93       	st	X, r25
 892:	8e 93       	st	-X, r24
 894:	82 81       	ldd	r24, Z+2	; 0x02
 896:	93 81       	ldd	r25, Z+3	; 0x03
 898:	13 96       	adiw	r26, 0x03	; 3
 89a:	9c 93       	st	X, r25
 89c:	8e 93       	st	-X, r24
 89e:	12 97       	sbiw	r26, 0x02	; 2
 8a0:	e0 e0       	ldi	r30, 0x00	; 0
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	8a 81       	ldd	r24, Y+2	; 0x02
 8a6:	9b 81       	ldd	r25, Y+3	; 0x03
 8a8:	00 97       	sbiw	r24, 0x00	; 0
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <free+0xe4>
 8ac:	fe 01       	movw	r30, r28
 8ae:	ec 01       	movw	r28, r24
 8b0:	f9 cf       	rjmp	.-14     	; 0x8a4 <free+0xd6>
 8b2:	ce 01       	movw	r24, r28
 8b4:	02 96       	adiw	r24, 0x02	; 2
 8b6:	28 81       	ld	r18, Y
 8b8:	39 81       	ldd	r19, Y+1	; 0x01
 8ba:	82 0f       	add	r24, r18
 8bc:	93 1f       	adc	r25, r19
 8be:	20 91 9d 01 	lds	r18, 0x019D
 8c2:	30 91 9e 01 	lds	r19, 0x019E
 8c6:	28 17       	cp	r18, r24
 8c8:	39 07       	cpc	r19, r25
 8ca:	69 f4       	brne	.+26     	; 0x8e6 <free+0x118>
 8cc:	30 97       	sbiw	r30, 0x00	; 0
 8ce:	29 f4       	brne	.+10     	; 0x8da <free+0x10c>
 8d0:	10 92 a0 01 	sts	0x01A0, r1
 8d4:	10 92 9f 01 	sts	0x019F, r1
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <free+0x110>
 8da:	13 82       	std	Z+3, r1	; 0x03
 8dc:	12 82       	std	Z+2, r1	; 0x02
 8de:	d0 93 9e 01 	sts	0x019E, r29
 8e2:	c0 93 9d 01 	sts	0x019D, r28
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <fdevopen>:
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	ec 01       	movw	r28, r24
 8f6:	8b 01       	movw	r16, r22
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	31 f4       	brne	.+12     	; 0x908 <fdevopen+0x1c>
 8fc:	61 15       	cp	r22, r1
 8fe:	71 05       	cpc	r23, r1
 900:	19 f4       	brne	.+6      	; 0x908 <fdevopen+0x1c>
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	38 c0       	rjmp	.+112    	; 0x978 <fdevopen+0x8c>
 908:	6e e0       	ldi	r22, 0x0E	; 14
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 d4 06 	call	0xda8	; 0xda8 <calloc>
 914:	fc 01       	movw	r30, r24
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	a1 f3       	breq	.-24     	; 0x902 <fdevopen+0x16>
 91a:	80 e8       	ldi	r24, 0x80	; 128
 91c:	83 83       	std	Z+3, r24	; 0x03
 91e:	01 15       	cp	r16, r1
 920:	11 05       	cpc	r17, r1
 922:	71 f0       	breq	.+28     	; 0x940 <fdevopen+0x54>
 924:	13 87       	std	Z+11, r17	; 0x0b
 926:	02 87       	std	Z+10, r16	; 0x0a
 928:	81 e8       	ldi	r24, 0x81	; 129
 92a:	83 83       	std	Z+3, r24	; 0x03
 92c:	80 91 a1 01 	lds	r24, 0x01A1
 930:	90 91 a2 01 	lds	r25, 0x01A2
 934:	89 2b       	or	r24, r25
 936:	21 f4       	brne	.+8      	; 0x940 <fdevopen+0x54>
 938:	f0 93 a2 01 	sts	0x01A2, r31
 93c:	e0 93 a1 01 	sts	0x01A1, r30
 940:	20 97       	sbiw	r28, 0x00	; 0
 942:	c9 f0       	breq	.+50     	; 0x976 <fdevopen+0x8a>
 944:	d1 87       	std	Z+9, r29	; 0x09
 946:	c0 87       	std	Z+8, r28	; 0x08
 948:	83 81       	ldd	r24, Z+3	; 0x03
 94a:	82 60       	ori	r24, 0x02	; 2
 94c:	83 83       	std	Z+3, r24	; 0x03
 94e:	80 91 a3 01 	lds	r24, 0x01A3
 952:	90 91 a4 01 	lds	r25, 0x01A4
 956:	89 2b       	or	r24, r25
 958:	71 f4       	brne	.+28     	; 0x976 <fdevopen+0x8a>
 95a:	f0 93 a4 01 	sts	0x01A4, r31
 95e:	e0 93 a3 01 	sts	0x01A3, r30
 962:	80 91 a5 01 	lds	r24, 0x01A5
 966:	90 91 a6 01 	lds	r25, 0x01A6
 96a:	89 2b       	or	r24, r25
 96c:	21 f4       	brne	.+8      	; 0x976 <fdevopen+0x8a>
 96e:	f0 93 a6 01 	sts	0x01A6, r31
 972:	e0 93 a5 01 	sts	0x01A5, r30
 976:	cf 01       	movw	r24, r30
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

00000982 <printf>:
 982:	a0 e0       	ldi	r26, 0x00	; 0
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	e7 ec       	ldi	r30, 0xC7	; 199
 988:	f4 e0       	ldi	r31, 0x04	; 4
 98a:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__prologue_saves__+0x20>
 98e:	fe 01       	movw	r30, r28
 990:	35 96       	adiw	r30, 0x05	; 5
 992:	61 91       	ld	r22, Z+
 994:	71 91       	ld	r23, Z+
 996:	af 01       	movw	r20, r30
 998:	80 91 a3 01 	lds	r24, 0x01A3
 99c:	90 91 a4 01 	lds	r25, 0x01A4
 9a0:	0e 94 02 05 	call	0xa04	; 0xa04 <vfprintf>
 9a4:	e2 e0       	ldi	r30, 0x02	; 2
 9a6:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__epilogue_restores__+0x20>

000009aa <puts>:
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	e0 91 a3 01 	lds	r30, 0x01A3
 9b6:	f0 91 a4 01 	lds	r31, 0x01A4
 9ba:	23 81       	ldd	r18, Z+3	; 0x03
 9bc:	21 ff       	sbrs	r18, 1
 9be:	1b c0       	rjmp	.+54     	; 0x9f6 <puts+0x4c>
 9c0:	ec 01       	movw	r28, r24
 9c2:	00 e0       	ldi	r16, 0x00	; 0
 9c4:	10 e0       	ldi	r17, 0x00	; 0
 9c6:	89 91       	ld	r24, Y+
 9c8:	60 91 a3 01 	lds	r22, 0x01A3
 9cc:	70 91 a4 01 	lds	r23, 0x01A4
 9d0:	db 01       	movw	r26, r22
 9d2:	18 96       	adiw	r26, 0x08	; 8
 9d4:	ed 91       	ld	r30, X+
 9d6:	fc 91       	ld	r31, X
 9d8:	19 97       	sbiw	r26, 0x09	; 9
 9da:	88 23       	and	r24, r24
 9dc:	31 f0       	breq	.+12     	; 0x9ea <puts+0x40>
 9de:	09 95       	icall
 9e0:	89 2b       	or	r24, r25
 9e2:	89 f3       	breq	.-30     	; 0x9c6 <puts+0x1c>
 9e4:	0f ef       	ldi	r16, 0xFF	; 255
 9e6:	1f ef       	ldi	r17, 0xFF	; 255
 9e8:	ee cf       	rjmp	.-36     	; 0x9c6 <puts+0x1c>
 9ea:	8a e0       	ldi	r24, 0x0A	; 10
 9ec:	09 95       	icall
 9ee:	89 2b       	or	r24, r25
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <puts+0x4c>
 9f2:	c8 01       	movw	r24, r16
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <puts+0x50>
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	9f ef       	ldi	r25, 0xFF	; 255
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <vfprintf>:
 a04:	ac e0       	ldi	r26, 0x0C	; 12
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	e8 e0       	ldi	r30, 0x08	; 8
 a0a:	f5 e0       	ldi	r31, 0x05	; 5
 a0c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__prologue_saves__>
 a10:	7c 01       	movw	r14, r24
 a12:	6b 01       	movw	r12, r22
 a14:	8a 01       	movw	r16, r20
 a16:	fc 01       	movw	r30, r24
 a18:	17 82       	std	Z+7, r1	; 0x07
 a1a:	16 82       	std	Z+6, r1	; 0x06
 a1c:	83 81       	ldd	r24, Z+3	; 0x03
 a1e:	81 ff       	sbrs	r24, 1
 a20:	bd c1       	rjmp	.+890    	; 0xd9c <vfprintf+0x398>
 a22:	ce 01       	movw	r24, r28
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	4c 01       	movw	r8, r24
 a28:	f7 01       	movw	r30, r14
 a2a:	93 81       	ldd	r25, Z+3	; 0x03
 a2c:	f6 01       	movw	r30, r12
 a2e:	93 fd       	sbrc	r25, 3
 a30:	85 91       	lpm	r24, Z+
 a32:	93 ff       	sbrs	r25, 3
 a34:	81 91       	ld	r24, Z+
 a36:	6f 01       	movw	r12, r30
 a38:	88 23       	and	r24, r24
 a3a:	09 f4       	brne	.+2      	; 0xa3e <vfprintf+0x3a>
 a3c:	ab c1       	rjmp	.+854    	; 0xd94 <vfprintf+0x390>
 a3e:	85 32       	cpi	r24, 0x25	; 37
 a40:	39 f4       	brne	.+14     	; 0xa50 <vfprintf+0x4c>
 a42:	93 fd       	sbrc	r25, 3
 a44:	85 91       	lpm	r24, Z+
 a46:	93 ff       	sbrs	r25, 3
 a48:	81 91       	ld	r24, Z+
 a4a:	6f 01       	movw	r12, r30
 a4c:	85 32       	cpi	r24, 0x25	; 37
 a4e:	29 f4       	brne	.+10     	; 0xa5a <vfprintf+0x56>
 a50:	b7 01       	movw	r22, r14
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 a58:	e7 cf       	rjmp	.-50     	; 0xa28 <vfprintf+0x24>
 a5a:	51 2c       	mov	r5, r1
 a5c:	31 2c       	mov	r3, r1
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	20 32       	cpi	r18, 0x20	; 32
 a62:	a0 f4       	brcc	.+40     	; 0xa8c <vfprintf+0x88>
 a64:	8b 32       	cpi	r24, 0x2B	; 43
 a66:	69 f0       	breq	.+26     	; 0xa82 <vfprintf+0x7e>
 a68:	30 f4       	brcc	.+12     	; 0xa76 <vfprintf+0x72>
 a6a:	80 32       	cpi	r24, 0x20	; 32
 a6c:	59 f0       	breq	.+22     	; 0xa84 <vfprintf+0x80>
 a6e:	83 32       	cpi	r24, 0x23	; 35
 a70:	69 f4       	brne	.+26     	; 0xa8c <vfprintf+0x88>
 a72:	20 61       	ori	r18, 0x10	; 16
 a74:	2c c0       	rjmp	.+88     	; 0xace <vfprintf+0xca>
 a76:	8d 32       	cpi	r24, 0x2D	; 45
 a78:	39 f0       	breq	.+14     	; 0xa88 <vfprintf+0x84>
 a7a:	80 33       	cpi	r24, 0x30	; 48
 a7c:	39 f4       	brne	.+14     	; 0xa8c <vfprintf+0x88>
 a7e:	21 60       	ori	r18, 0x01	; 1
 a80:	26 c0       	rjmp	.+76     	; 0xace <vfprintf+0xca>
 a82:	22 60       	ori	r18, 0x02	; 2
 a84:	24 60       	ori	r18, 0x04	; 4
 a86:	23 c0       	rjmp	.+70     	; 0xace <vfprintf+0xca>
 a88:	28 60       	ori	r18, 0x08	; 8
 a8a:	21 c0       	rjmp	.+66     	; 0xace <vfprintf+0xca>
 a8c:	27 fd       	sbrc	r18, 7
 a8e:	27 c0       	rjmp	.+78     	; 0xade <vfprintf+0xda>
 a90:	30 ed       	ldi	r19, 0xD0	; 208
 a92:	38 0f       	add	r19, r24
 a94:	3a 30       	cpi	r19, 0x0A	; 10
 a96:	78 f4       	brcc	.+30     	; 0xab6 <vfprintf+0xb2>
 a98:	26 ff       	sbrs	r18, 6
 a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <vfprintf+0xa4>
 a9c:	fa e0       	ldi	r31, 0x0A	; 10
 a9e:	5f 9e       	mul	r5, r31
 aa0:	30 0d       	add	r19, r0
 aa2:	11 24       	eor	r1, r1
 aa4:	53 2e       	mov	r5, r19
 aa6:	13 c0       	rjmp	.+38     	; 0xace <vfprintf+0xca>
 aa8:	8a e0       	ldi	r24, 0x0A	; 10
 aaa:	38 9e       	mul	r3, r24
 aac:	30 0d       	add	r19, r0
 aae:	11 24       	eor	r1, r1
 ab0:	33 2e       	mov	r3, r19
 ab2:	20 62       	ori	r18, 0x20	; 32
 ab4:	0c c0       	rjmp	.+24     	; 0xace <vfprintf+0xca>
 ab6:	8e 32       	cpi	r24, 0x2E	; 46
 ab8:	21 f4       	brne	.+8      	; 0xac2 <vfprintf+0xbe>
 aba:	26 fd       	sbrc	r18, 6
 abc:	6b c1       	rjmp	.+726    	; 0xd94 <vfprintf+0x390>
 abe:	20 64       	ori	r18, 0x40	; 64
 ac0:	06 c0       	rjmp	.+12     	; 0xace <vfprintf+0xca>
 ac2:	8c 36       	cpi	r24, 0x6C	; 108
 ac4:	11 f4       	brne	.+4      	; 0xaca <vfprintf+0xc6>
 ac6:	20 68       	ori	r18, 0x80	; 128
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0xca>
 aca:	88 36       	cpi	r24, 0x68	; 104
 acc:	41 f4       	brne	.+16     	; 0xade <vfprintf+0xda>
 ace:	f6 01       	movw	r30, r12
 ad0:	93 fd       	sbrc	r25, 3
 ad2:	85 91       	lpm	r24, Z+
 ad4:	93 ff       	sbrs	r25, 3
 ad6:	81 91       	ld	r24, Z+
 ad8:	6f 01       	movw	r12, r30
 ada:	81 11       	cpse	r24, r1
 adc:	c1 cf       	rjmp	.-126    	; 0xa60 <vfprintf+0x5c>
 ade:	98 2f       	mov	r25, r24
 ae0:	9f 7d       	andi	r25, 0xDF	; 223
 ae2:	95 54       	subi	r25, 0x45	; 69
 ae4:	93 30       	cpi	r25, 0x03	; 3
 ae6:	28 f4       	brcc	.+10     	; 0xaf2 <vfprintf+0xee>
 ae8:	0c 5f       	subi	r16, 0xFC	; 252
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	ff e3       	ldi	r31, 0x3F	; 63
 aee:	f9 83       	std	Y+1, r31	; 0x01
 af0:	0d c0       	rjmp	.+26     	; 0xb0c <vfprintf+0x108>
 af2:	83 36       	cpi	r24, 0x63	; 99
 af4:	31 f0       	breq	.+12     	; 0xb02 <vfprintf+0xfe>
 af6:	83 37       	cpi	r24, 0x73	; 115
 af8:	71 f0       	breq	.+28     	; 0xb16 <vfprintf+0x112>
 afa:	83 35       	cpi	r24, 0x53	; 83
 afc:	09 f0       	breq	.+2      	; 0xb00 <vfprintf+0xfc>
 afe:	5b c0       	rjmp	.+182    	; 0xbb6 <vfprintf+0x1b2>
 b00:	22 c0       	rjmp	.+68     	; 0xb46 <vfprintf+0x142>
 b02:	f8 01       	movw	r30, r16
 b04:	80 81       	ld	r24, Z
 b06:	89 83       	std	Y+1, r24	; 0x01
 b08:	0e 5f       	subi	r16, 0xFE	; 254
 b0a:	1f 4f       	sbci	r17, 0xFF	; 255
 b0c:	44 24       	eor	r4, r4
 b0e:	43 94       	inc	r4
 b10:	51 2c       	mov	r5, r1
 b12:	54 01       	movw	r10, r8
 b14:	15 c0       	rjmp	.+42     	; 0xb40 <vfprintf+0x13c>
 b16:	38 01       	movw	r6, r16
 b18:	f2 e0       	ldi	r31, 0x02	; 2
 b1a:	6f 0e       	add	r6, r31
 b1c:	71 1c       	adc	r7, r1
 b1e:	f8 01       	movw	r30, r16
 b20:	a0 80       	ld	r10, Z
 b22:	b1 80       	ldd	r11, Z+1	; 0x01
 b24:	26 ff       	sbrs	r18, 6
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <vfprintf+0x12a>
 b28:	65 2d       	mov	r22, r5
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x12e>
 b2e:	6f ef       	ldi	r22, 0xFF	; 255
 b30:	7f ef       	ldi	r23, 0xFF	; 255
 b32:	c5 01       	movw	r24, r10
 b34:	2c 87       	std	Y+12, r18	; 0x0c
 b36:	0e 94 02 07 	call	0xe04	; 0xe04 <strnlen>
 b3a:	2c 01       	movw	r4, r24
 b3c:	83 01       	movw	r16, r6
 b3e:	2c 85       	ldd	r18, Y+12	; 0x0c
 b40:	2f 77       	andi	r18, 0x7F	; 127
 b42:	22 2e       	mov	r2, r18
 b44:	17 c0       	rjmp	.+46     	; 0xb74 <vfprintf+0x170>
 b46:	38 01       	movw	r6, r16
 b48:	f2 e0       	ldi	r31, 0x02	; 2
 b4a:	6f 0e       	add	r6, r31
 b4c:	71 1c       	adc	r7, r1
 b4e:	f8 01       	movw	r30, r16
 b50:	a0 80       	ld	r10, Z
 b52:	b1 80       	ldd	r11, Z+1	; 0x01
 b54:	26 ff       	sbrs	r18, 6
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <vfprintf+0x15a>
 b58:	65 2d       	mov	r22, r5
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x15e>
 b5e:	6f ef       	ldi	r22, 0xFF	; 255
 b60:	7f ef       	ldi	r23, 0xFF	; 255
 b62:	c5 01       	movw	r24, r10
 b64:	2c 87       	std	Y+12, r18	; 0x0c
 b66:	0e 94 f0 06 	call	0xde0	; 0xde0 <strnlen_P>
 b6a:	2c 01       	movw	r4, r24
 b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b6e:	20 68       	ori	r18, 0x80	; 128
 b70:	22 2e       	mov	r2, r18
 b72:	83 01       	movw	r16, r6
 b74:	23 fc       	sbrc	r2, 3
 b76:	1b c0       	rjmp	.+54     	; 0xbae <vfprintf+0x1aa>
 b78:	83 2d       	mov	r24, r3
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	48 16       	cp	r4, r24
 b7e:	59 06       	cpc	r5, r25
 b80:	b0 f4       	brcc	.+44     	; 0xbae <vfprintf+0x1aa>
 b82:	b7 01       	movw	r22, r14
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 b8c:	3a 94       	dec	r3
 b8e:	f4 cf       	rjmp	.-24     	; 0xb78 <vfprintf+0x174>
 b90:	f5 01       	movw	r30, r10
 b92:	27 fc       	sbrc	r2, 7
 b94:	85 91       	lpm	r24, Z+
 b96:	27 fe       	sbrs	r2, 7
 b98:	81 91       	ld	r24, Z+
 b9a:	5f 01       	movw	r10, r30
 b9c:	b7 01       	movw	r22, r14
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 ba4:	31 10       	cpse	r3, r1
 ba6:	3a 94       	dec	r3
 ba8:	f1 e0       	ldi	r31, 0x01	; 1
 baa:	4f 1a       	sub	r4, r31
 bac:	51 08       	sbc	r5, r1
 bae:	41 14       	cp	r4, r1
 bb0:	51 04       	cpc	r5, r1
 bb2:	71 f7       	brne	.-36     	; 0xb90 <vfprintf+0x18c>
 bb4:	e5 c0       	rjmp	.+458    	; 0xd80 <vfprintf+0x37c>
 bb6:	84 36       	cpi	r24, 0x64	; 100
 bb8:	11 f0       	breq	.+4      	; 0xbbe <vfprintf+0x1ba>
 bba:	89 36       	cpi	r24, 0x69	; 105
 bbc:	39 f5       	brne	.+78     	; 0xc0c <vfprintf+0x208>
 bbe:	f8 01       	movw	r30, r16
 bc0:	27 ff       	sbrs	r18, 7
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <vfprintf+0x1ce>
 bc4:	60 81       	ld	r22, Z
 bc6:	71 81       	ldd	r23, Z+1	; 0x01
 bc8:	82 81       	ldd	r24, Z+2	; 0x02
 bca:	93 81       	ldd	r25, Z+3	; 0x03
 bcc:	0c 5f       	subi	r16, 0xFC	; 252
 bce:	1f 4f       	sbci	r17, 0xFF	; 255
 bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <vfprintf+0x1de>
 bd2:	60 81       	ld	r22, Z
 bd4:	71 81       	ldd	r23, Z+1	; 0x01
 bd6:	88 27       	eor	r24, r24
 bd8:	77 fd       	sbrc	r23, 7
 bda:	80 95       	com	r24
 bdc:	98 2f       	mov	r25, r24
 bde:	0e 5f       	subi	r16, 0xFE	; 254
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	2f 76       	andi	r18, 0x6F	; 111
 be4:	b2 2e       	mov	r11, r18
 be6:	97 ff       	sbrs	r25, 7
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x1f8>
 bea:	90 95       	com	r25
 bec:	80 95       	com	r24
 bee:	70 95       	com	r23
 bf0:	61 95       	neg	r22
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	20 68       	ori	r18, 0x80	; 128
 bfa:	b2 2e       	mov	r11, r18
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	a4 01       	movw	r20, r8
 c02:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__ultoa_invert>
 c06:	a8 2e       	mov	r10, r24
 c08:	a8 18       	sub	r10, r8
 c0a:	44 c0       	rjmp	.+136    	; 0xc94 <vfprintf+0x290>
 c0c:	85 37       	cpi	r24, 0x75	; 117
 c0e:	29 f4       	brne	.+10     	; 0xc1a <vfprintf+0x216>
 c10:	2f 7e       	andi	r18, 0xEF	; 239
 c12:	b2 2e       	mov	r11, r18
 c14:	2a e0       	ldi	r18, 0x0A	; 10
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	25 c0       	rjmp	.+74     	; 0xc64 <vfprintf+0x260>
 c1a:	f2 2f       	mov	r31, r18
 c1c:	f9 7f       	andi	r31, 0xF9	; 249
 c1e:	bf 2e       	mov	r11, r31
 c20:	8f 36       	cpi	r24, 0x6F	; 111
 c22:	c1 f0       	breq	.+48     	; 0xc54 <vfprintf+0x250>
 c24:	18 f4       	brcc	.+6      	; 0xc2c <vfprintf+0x228>
 c26:	88 35       	cpi	r24, 0x58	; 88
 c28:	79 f0       	breq	.+30     	; 0xc48 <vfprintf+0x244>
 c2a:	b4 c0       	rjmp	.+360    	; 0xd94 <vfprintf+0x390>
 c2c:	80 37       	cpi	r24, 0x70	; 112
 c2e:	19 f0       	breq	.+6      	; 0xc36 <vfprintf+0x232>
 c30:	88 37       	cpi	r24, 0x78	; 120
 c32:	21 f0       	breq	.+8      	; 0xc3c <vfprintf+0x238>
 c34:	af c0       	rjmp	.+350    	; 0xd94 <vfprintf+0x390>
 c36:	2f 2f       	mov	r18, r31
 c38:	20 61       	ori	r18, 0x10	; 16
 c3a:	b2 2e       	mov	r11, r18
 c3c:	b4 fe       	sbrs	r11, 4
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <vfprintf+0x256>
 c40:	8b 2d       	mov	r24, r11
 c42:	84 60       	ori	r24, 0x04	; 4
 c44:	b8 2e       	mov	r11, r24
 c46:	09 c0       	rjmp	.+18     	; 0xc5a <vfprintf+0x256>
 c48:	24 ff       	sbrs	r18, 4
 c4a:	0a c0       	rjmp	.+20     	; 0xc60 <vfprintf+0x25c>
 c4c:	9f 2f       	mov	r25, r31
 c4e:	96 60       	ori	r25, 0x06	; 6
 c50:	b9 2e       	mov	r11, r25
 c52:	06 c0       	rjmp	.+12     	; 0xc60 <vfprintf+0x25c>
 c54:	28 e0       	ldi	r18, 0x08	; 8
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	05 c0       	rjmp	.+10     	; 0xc64 <vfprintf+0x260>
 c5a:	20 e1       	ldi	r18, 0x10	; 16
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x260>
 c60:	20 e1       	ldi	r18, 0x10	; 16
 c62:	32 e0       	ldi	r19, 0x02	; 2
 c64:	f8 01       	movw	r30, r16
 c66:	b7 fe       	sbrs	r11, 7
 c68:	07 c0       	rjmp	.+14     	; 0xc78 <vfprintf+0x274>
 c6a:	60 81       	ld	r22, Z
 c6c:	71 81       	ldd	r23, Z+1	; 0x01
 c6e:	82 81       	ldd	r24, Z+2	; 0x02
 c70:	93 81       	ldd	r25, Z+3	; 0x03
 c72:	0c 5f       	subi	r16, 0xFC	; 252
 c74:	1f 4f       	sbci	r17, 0xFF	; 255
 c76:	06 c0       	rjmp	.+12     	; 0xc84 <vfprintf+0x280>
 c78:	60 81       	ld	r22, Z
 c7a:	71 81       	ldd	r23, Z+1	; 0x01
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 5f       	subi	r16, 0xFE	; 254
 c82:	1f 4f       	sbci	r17, 0xFF	; 255
 c84:	a4 01       	movw	r20, r8
 c86:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__ultoa_invert>
 c8a:	a8 2e       	mov	r10, r24
 c8c:	a8 18       	sub	r10, r8
 c8e:	fb 2d       	mov	r31, r11
 c90:	ff 77       	andi	r31, 0x7F	; 127
 c92:	bf 2e       	mov	r11, r31
 c94:	b6 fe       	sbrs	r11, 6
 c96:	0b c0       	rjmp	.+22     	; 0xcae <vfprintf+0x2aa>
 c98:	2b 2d       	mov	r18, r11
 c9a:	2e 7f       	andi	r18, 0xFE	; 254
 c9c:	a5 14       	cp	r10, r5
 c9e:	50 f4       	brcc	.+20     	; 0xcb4 <vfprintf+0x2b0>
 ca0:	b4 fe       	sbrs	r11, 4
 ca2:	0a c0       	rjmp	.+20     	; 0xcb8 <vfprintf+0x2b4>
 ca4:	b2 fc       	sbrc	r11, 2
 ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <vfprintf+0x2b4>
 ca8:	2b 2d       	mov	r18, r11
 caa:	2e 7e       	andi	r18, 0xEE	; 238
 cac:	05 c0       	rjmp	.+10     	; 0xcb8 <vfprintf+0x2b4>
 cae:	7a 2c       	mov	r7, r10
 cb0:	2b 2d       	mov	r18, r11
 cb2:	03 c0       	rjmp	.+6      	; 0xcba <vfprintf+0x2b6>
 cb4:	7a 2c       	mov	r7, r10
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <vfprintf+0x2b6>
 cb8:	75 2c       	mov	r7, r5
 cba:	24 ff       	sbrs	r18, 4
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x2d4>
 cbe:	fe 01       	movw	r30, r28
 cc0:	ea 0d       	add	r30, r10
 cc2:	f1 1d       	adc	r31, r1
 cc4:	80 81       	ld	r24, Z
 cc6:	80 33       	cpi	r24, 0x30	; 48
 cc8:	11 f4       	brne	.+4      	; 0xcce <vfprintf+0x2ca>
 cca:	29 7e       	andi	r18, 0xE9	; 233
 ccc:	09 c0       	rjmp	.+18     	; 0xce0 <vfprintf+0x2dc>
 cce:	22 ff       	sbrs	r18, 2
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x2da>
 cd2:	73 94       	inc	r7
 cd4:	73 94       	inc	r7
 cd6:	04 c0       	rjmp	.+8      	; 0xce0 <vfprintf+0x2dc>
 cd8:	82 2f       	mov	r24, r18
 cda:	86 78       	andi	r24, 0x86	; 134
 cdc:	09 f0       	breq	.+2      	; 0xce0 <vfprintf+0x2dc>
 cde:	73 94       	inc	r7
 ce0:	23 fd       	sbrc	r18, 3
 ce2:	13 c0       	rjmp	.+38     	; 0xd0a <vfprintf+0x306>
 ce4:	20 ff       	sbrs	r18, 0
 ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <vfprintf+0x2f0>
 ce8:	5a 2c       	mov	r5, r10
 cea:	73 14       	cp	r7, r3
 cec:	18 f4       	brcc	.+6      	; 0xcf4 <vfprintf+0x2f0>
 cee:	53 0c       	add	r5, r3
 cf0:	57 18       	sub	r5, r7
 cf2:	73 2c       	mov	r7, r3
 cf4:	73 14       	cp	r7, r3
 cf6:	68 f4       	brcc	.+26     	; 0xd12 <vfprintf+0x30e>
 cf8:	b7 01       	movw	r22, r14
 cfa:	80 e2       	ldi	r24, 0x20	; 32
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	2c 87       	std	Y+12, r18	; 0x0c
 d00:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d04:	73 94       	inc	r7
 d06:	2c 85       	ldd	r18, Y+12	; 0x0c
 d08:	f5 cf       	rjmp	.-22     	; 0xcf4 <vfprintf+0x2f0>
 d0a:	73 14       	cp	r7, r3
 d0c:	10 f4       	brcc	.+4      	; 0xd12 <vfprintf+0x30e>
 d0e:	37 18       	sub	r3, r7
 d10:	01 c0       	rjmp	.+2      	; 0xd14 <vfprintf+0x310>
 d12:	31 2c       	mov	r3, r1
 d14:	24 ff       	sbrs	r18, 4
 d16:	12 c0       	rjmp	.+36     	; 0xd3c <vfprintf+0x338>
 d18:	b7 01       	movw	r22, r14
 d1a:	80 e3       	ldi	r24, 0x30	; 48
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	2c 87       	std	Y+12, r18	; 0x0c
 d20:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d24:	2c 85       	ldd	r18, Y+12	; 0x0c
 d26:	22 ff       	sbrs	r18, 2
 d28:	17 c0       	rjmp	.+46     	; 0xd58 <vfprintf+0x354>
 d2a:	21 ff       	sbrs	r18, 1
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <vfprintf+0x330>
 d2e:	88 e5       	ldi	r24, 0x58	; 88
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x334>
 d34:	88 e7       	ldi	r24, 0x78	; 120
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	b7 01       	movw	r22, r14
 d3a:	0c c0       	rjmp	.+24     	; 0xd54 <vfprintf+0x350>
 d3c:	82 2f       	mov	r24, r18
 d3e:	86 78       	andi	r24, 0x86	; 134
 d40:	59 f0       	breq	.+22     	; 0xd58 <vfprintf+0x354>
 d42:	21 fd       	sbrc	r18, 1
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x346>
 d46:	80 e2       	ldi	r24, 0x20	; 32
 d48:	01 c0       	rjmp	.+2      	; 0xd4c <vfprintf+0x348>
 d4a:	8b e2       	ldi	r24, 0x2B	; 43
 d4c:	27 fd       	sbrc	r18, 7
 d4e:	8d e2       	ldi	r24, 0x2D	; 45
 d50:	b7 01       	movw	r22, r14
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d58:	a5 14       	cp	r10, r5
 d5a:	38 f4       	brcc	.+14     	; 0xd6a <vfprintf+0x366>
 d5c:	b7 01       	movw	r22, r14
 d5e:	80 e3       	ldi	r24, 0x30	; 48
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d66:	5a 94       	dec	r5
 d68:	f7 cf       	rjmp	.-18     	; 0xd58 <vfprintf+0x354>
 d6a:	aa 94       	dec	r10
 d6c:	f4 01       	movw	r30, r8
 d6e:	ea 0d       	add	r30, r10
 d70:	f1 1d       	adc	r31, r1
 d72:	80 81       	ld	r24, Z
 d74:	b7 01       	movw	r22, r14
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d7c:	a1 10       	cpse	r10, r1
 d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <vfprintf+0x366>
 d80:	33 20       	and	r3, r3
 d82:	09 f4       	brne	.+2      	; 0xd86 <vfprintf+0x382>
 d84:	51 ce       	rjmp	.-862    	; 0xa28 <vfprintf+0x24>
 d86:	b7 01       	movw	r22, r14
 d88:	80 e2       	ldi	r24, 0x20	; 32
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fputc>
 d90:	3a 94       	dec	r3
 d92:	f6 cf       	rjmp	.-20     	; 0xd80 <vfprintf+0x37c>
 d94:	f7 01       	movw	r30, r14
 d96:	86 81       	ldd	r24, Z+6	; 0x06
 d98:	97 81       	ldd	r25, Z+7	; 0x07
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x39c>
 d9c:	8f ef       	ldi	r24, 0xFF	; 255
 d9e:	9f ef       	ldi	r25, 0xFF	; 255
 da0:	2c 96       	adiw	r28, 0x0c	; 12
 da2:	e2 e1       	ldi	r30, 0x12	; 18
 da4:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__epilogue_restores__>

00000da8 <calloc>:
 da8:	0f 93       	push	r16
 daa:	1f 93       	push	r17
 dac:	cf 93       	push	r28
 dae:	df 93       	push	r29
 db0:	86 9f       	mul	r24, r22
 db2:	80 01       	movw	r16, r0
 db4:	87 9f       	mul	r24, r23
 db6:	10 0d       	add	r17, r0
 db8:	96 9f       	mul	r25, r22
 dba:	10 0d       	add	r17, r0
 dbc:	11 24       	eor	r1, r1
 dbe:	c8 01       	movw	r24, r16
 dc0:	0e 94 4f 03 	call	0x69e	; 0x69e <malloc>
 dc4:	ec 01       	movw	r28, r24
 dc6:	00 97       	sbiw	r24, 0x00	; 0
 dc8:	29 f0       	breq	.+10     	; 0xdd4 <calloc+0x2c>
 dca:	a8 01       	movw	r20, r16
 dcc:	60 e0       	ldi	r22, 0x00	; 0
 dce:	70 e0       	ldi	r23, 0x00	; 0
 dd0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <memset>
 dd4:	ce 01       	movw	r24, r28
 dd6:	df 91       	pop	r29
 dd8:	cf 91       	pop	r28
 dda:	1f 91       	pop	r17
 ddc:	0f 91       	pop	r16
 dde:	08 95       	ret

00000de0 <strnlen_P>:
 de0:	fc 01       	movw	r30, r24
 de2:	05 90       	lpm	r0, Z+
 de4:	61 50       	subi	r22, 0x01	; 1
 de6:	70 40       	sbci	r23, 0x00	; 0
 de8:	01 10       	cpse	r0, r1
 dea:	d8 f7       	brcc	.-10     	; 0xde2 <strnlen_P+0x2>
 dec:	80 95       	com	r24
 dee:	90 95       	com	r25
 df0:	8e 0f       	add	r24, r30
 df2:	9f 1f       	adc	r25, r31
 df4:	08 95       	ret

00000df6 <memset>:
 df6:	dc 01       	movw	r26, r24
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <memset+0x6>
 dfa:	6d 93       	st	X+, r22
 dfc:	41 50       	subi	r20, 0x01	; 1
 dfe:	50 40       	sbci	r21, 0x00	; 0
 e00:	e0 f7       	brcc	.-8      	; 0xdfa <memset+0x4>
 e02:	08 95       	ret

00000e04 <strnlen>:
 e04:	fc 01       	movw	r30, r24
 e06:	61 50       	subi	r22, 0x01	; 1
 e08:	70 40       	sbci	r23, 0x00	; 0
 e0a:	01 90       	ld	r0, Z+
 e0c:	01 10       	cpse	r0, r1
 e0e:	d8 f7       	brcc	.-10     	; 0xe06 <strnlen+0x2>
 e10:	80 95       	com	r24
 e12:	90 95       	com	r25
 e14:	8e 0f       	add	r24, r30
 e16:	9f 1f       	adc	r25, r31
 e18:	08 95       	ret

00000e1a <fputc>:
 e1a:	0f 93       	push	r16
 e1c:	1f 93       	push	r17
 e1e:	cf 93       	push	r28
 e20:	df 93       	push	r29
 e22:	18 2f       	mov	r17, r24
 e24:	09 2f       	mov	r16, r25
 e26:	eb 01       	movw	r28, r22
 e28:	8b 81       	ldd	r24, Y+3	; 0x03
 e2a:	81 fd       	sbrc	r24, 1
 e2c:	03 c0       	rjmp	.+6      	; 0xe34 <fputc+0x1a>
 e2e:	8f ef       	ldi	r24, 0xFF	; 255
 e30:	9f ef       	ldi	r25, 0xFF	; 255
 e32:	20 c0       	rjmp	.+64     	; 0xe74 <fputc+0x5a>
 e34:	82 ff       	sbrs	r24, 2
 e36:	10 c0       	rjmp	.+32     	; 0xe58 <fputc+0x3e>
 e38:	4e 81       	ldd	r20, Y+6	; 0x06
 e3a:	5f 81       	ldd	r21, Y+7	; 0x07
 e3c:	2c 81       	ldd	r18, Y+4	; 0x04
 e3e:	3d 81       	ldd	r19, Y+5	; 0x05
 e40:	42 17       	cp	r20, r18
 e42:	53 07       	cpc	r21, r19
 e44:	7c f4       	brge	.+30     	; 0xe64 <fputc+0x4a>
 e46:	e8 81       	ld	r30, Y
 e48:	f9 81       	ldd	r31, Y+1	; 0x01
 e4a:	9f 01       	movw	r18, r30
 e4c:	2f 5f       	subi	r18, 0xFF	; 255
 e4e:	3f 4f       	sbci	r19, 0xFF	; 255
 e50:	39 83       	std	Y+1, r19	; 0x01
 e52:	28 83       	st	Y, r18
 e54:	10 83       	st	Z, r17
 e56:	06 c0       	rjmp	.+12     	; 0xe64 <fputc+0x4a>
 e58:	e8 85       	ldd	r30, Y+8	; 0x08
 e5a:	f9 85       	ldd	r31, Y+9	; 0x09
 e5c:	81 2f       	mov	r24, r17
 e5e:	09 95       	icall
 e60:	89 2b       	or	r24, r25
 e62:	29 f7       	brne	.-54     	; 0xe2e <fputc+0x14>
 e64:	2e 81       	ldd	r18, Y+6	; 0x06
 e66:	3f 81       	ldd	r19, Y+7	; 0x07
 e68:	2f 5f       	subi	r18, 0xFF	; 255
 e6a:	3f 4f       	sbci	r19, 0xFF	; 255
 e6c:	3f 83       	std	Y+7, r19	; 0x07
 e6e:	2e 83       	std	Y+6, r18	; 0x06
 e70:	81 2f       	mov	r24, r17
 e72:	90 2f       	mov	r25, r16
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	1f 91       	pop	r17
 e7a:	0f 91       	pop	r16
 e7c:	08 95       	ret

00000e7e <__ultoa_invert>:
 e7e:	fa 01       	movw	r30, r20
 e80:	aa 27       	eor	r26, r26
 e82:	28 30       	cpi	r18, 0x08	; 8
 e84:	51 f1       	breq	.+84     	; 0xeda <__ultoa_invert+0x5c>
 e86:	20 31       	cpi	r18, 0x10	; 16
 e88:	81 f1       	breq	.+96     	; 0xeea <__ultoa_invert+0x6c>
 e8a:	e8 94       	clt
 e8c:	6f 93       	push	r22
 e8e:	6e 7f       	andi	r22, 0xFE	; 254
 e90:	6e 5f       	subi	r22, 0xFE	; 254
 e92:	7f 4f       	sbci	r23, 0xFF	; 255
 e94:	8f 4f       	sbci	r24, 0xFF	; 255
 e96:	9f 4f       	sbci	r25, 0xFF	; 255
 e98:	af 4f       	sbci	r26, 0xFF	; 255
 e9a:	b1 e0       	ldi	r27, 0x01	; 1
 e9c:	3e d0       	rcall	.+124    	; 0xf1a <__ultoa_invert+0x9c>
 e9e:	b4 e0       	ldi	r27, 0x04	; 4
 ea0:	3c d0       	rcall	.+120    	; 0xf1a <__ultoa_invert+0x9c>
 ea2:	67 0f       	add	r22, r23
 ea4:	78 1f       	adc	r23, r24
 ea6:	89 1f       	adc	r24, r25
 ea8:	9a 1f       	adc	r25, r26
 eaa:	a1 1d       	adc	r26, r1
 eac:	68 0f       	add	r22, r24
 eae:	79 1f       	adc	r23, r25
 eb0:	8a 1f       	adc	r24, r26
 eb2:	91 1d       	adc	r25, r1
 eb4:	a1 1d       	adc	r26, r1
 eb6:	6a 0f       	add	r22, r26
 eb8:	71 1d       	adc	r23, r1
 eba:	81 1d       	adc	r24, r1
 ebc:	91 1d       	adc	r25, r1
 ebe:	a1 1d       	adc	r26, r1
 ec0:	20 d0       	rcall	.+64     	; 0xf02 <__ultoa_invert+0x84>
 ec2:	09 f4       	brne	.+2      	; 0xec6 <__ultoa_invert+0x48>
 ec4:	68 94       	set
 ec6:	3f 91       	pop	r19
 ec8:	2a e0       	ldi	r18, 0x0A	; 10
 eca:	26 9f       	mul	r18, r22
 ecc:	11 24       	eor	r1, r1
 ece:	30 19       	sub	r19, r0
 ed0:	30 5d       	subi	r19, 0xD0	; 208
 ed2:	31 93       	st	Z+, r19
 ed4:	de f6       	brtc	.-74     	; 0xe8c <__ultoa_invert+0xe>
 ed6:	cf 01       	movw	r24, r30
 ed8:	08 95       	ret
 eda:	46 2f       	mov	r20, r22
 edc:	47 70       	andi	r20, 0x07	; 7
 ede:	40 5d       	subi	r20, 0xD0	; 208
 ee0:	41 93       	st	Z+, r20
 ee2:	b3 e0       	ldi	r27, 0x03	; 3
 ee4:	0f d0       	rcall	.+30     	; 0xf04 <__ultoa_invert+0x86>
 ee6:	c9 f7       	brne	.-14     	; 0xeda <__ultoa_invert+0x5c>
 ee8:	f6 cf       	rjmp	.-20     	; 0xed6 <__ultoa_invert+0x58>
 eea:	46 2f       	mov	r20, r22
 eec:	4f 70       	andi	r20, 0x0F	; 15
 eee:	40 5d       	subi	r20, 0xD0	; 208
 ef0:	4a 33       	cpi	r20, 0x3A	; 58
 ef2:	18 f0       	brcs	.+6      	; 0xefa <__ultoa_invert+0x7c>
 ef4:	49 5d       	subi	r20, 0xD9	; 217
 ef6:	31 fd       	sbrc	r19, 1
 ef8:	40 52       	subi	r20, 0x20	; 32
 efa:	41 93       	st	Z+, r20
 efc:	02 d0       	rcall	.+4      	; 0xf02 <__ultoa_invert+0x84>
 efe:	a9 f7       	brne	.-22     	; 0xeea <__ultoa_invert+0x6c>
 f00:	ea cf       	rjmp	.-44     	; 0xed6 <__ultoa_invert+0x58>
 f02:	b4 e0       	ldi	r27, 0x04	; 4
 f04:	a6 95       	lsr	r26
 f06:	97 95       	ror	r25
 f08:	87 95       	ror	r24
 f0a:	77 95       	ror	r23
 f0c:	67 95       	ror	r22
 f0e:	ba 95       	dec	r27
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x86>
 f12:	00 97       	sbiw	r24, 0x00	; 0
 f14:	61 05       	cpc	r22, r1
 f16:	71 05       	cpc	r23, r1
 f18:	08 95       	ret
 f1a:	9b 01       	movw	r18, r22
 f1c:	ac 01       	movw	r20, r24
 f1e:	0a 2e       	mov	r0, r26
 f20:	06 94       	lsr	r0
 f22:	57 95       	ror	r21
 f24:	47 95       	ror	r20
 f26:	37 95       	ror	r19
 f28:	27 95       	ror	r18
 f2a:	ba 95       	dec	r27
 f2c:	c9 f7       	brne	.-14     	; 0xf20 <__ultoa_invert+0xa2>
 f2e:	62 0f       	add	r22, r18
 f30:	73 1f       	adc	r23, r19
 f32:	84 1f       	adc	r24, r20
 f34:	95 1f       	adc	r25, r21
 f36:	a0 1d       	adc	r26, r0
 f38:	08 95       	ret

00000f3a <__prologue_saves__>:
 f3a:	2f 92       	push	r2
 f3c:	3f 92       	push	r3
 f3e:	4f 92       	push	r4
 f40:	5f 92       	push	r5
 f42:	6f 92       	push	r6
 f44:	7f 92       	push	r7
 f46:	8f 92       	push	r8
 f48:	9f 92       	push	r9
 f4a:	af 92       	push	r10
 f4c:	bf 92       	push	r11
 f4e:	cf 92       	push	r12
 f50:	df 92       	push	r13
 f52:	ef 92       	push	r14
 f54:	ff 92       	push	r15
 f56:	0f 93       	push	r16
 f58:	1f 93       	push	r17
 f5a:	cf 93       	push	r28
 f5c:	df 93       	push	r29
 f5e:	cd b7       	in	r28, 0x3d	; 61
 f60:	de b7       	in	r29, 0x3e	; 62
 f62:	ca 1b       	sub	r28, r26
 f64:	db 0b       	sbc	r29, r27
 f66:	0f b6       	in	r0, 0x3f	; 63
 f68:	f8 94       	cli
 f6a:	de bf       	out	0x3e, r29	; 62
 f6c:	0f be       	out	0x3f, r0	; 63
 f6e:	cd bf       	out	0x3d, r28	; 61
 f70:	09 94       	ijmp

00000f72 <__epilogue_restores__>:
 f72:	2a 88       	ldd	r2, Y+18	; 0x12
 f74:	39 88       	ldd	r3, Y+17	; 0x11
 f76:	48 88       	ldd	r4, Y+16	; 0x10
 f78:	5f 84       	ldd	r5, Y+15	; 0x0f
 f7a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f7c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f7e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f80:	9b 84       	ldd	r9, Y+11	; 0x0b
 f82:	aa 84       	ldd	r10, Y+10	; 0x0a
 f84:	b9 84       	ldd	r11, Y+9	; 0x09
 f86:	c8 84       	ldd	r12, Y+8	; 0x08
 f88:	df 80       	ldd	r13, Y+7	; 0x07
 f8a:	ee 80       	ldd	r14, Y+6	; 0x06
 f8c:	fd 80       	ldd	r15, Y+5	; 0x05
 f8e:	0c 81       	ldd	r16, Y+4	; 0x04
 f90:	1b 81       	ldd	r17, Y+3	; 0x03
 f92:	aa 81       	ldd	r26, Y+2	; 0x02
 f94:	b9 81       	ldd	r27, Y+1	; 0x01
 f96:	ce 0f       	add	r28, r30
 f98:	d1 1d       	adc	r29, r1
 f9a:	0f b6       	in	r0, 0x3f	; 63
 f9c:	f8 94       	cli
 f9e:	de bf       	out	0x3e, r29	; 62
 fa0:	0f be       	out	0x3f, r0	; 63
 fa2:	cd bf       	out	0x3d, r28	; 61
 fa4:	ed 01       	movw	r28, r26
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>

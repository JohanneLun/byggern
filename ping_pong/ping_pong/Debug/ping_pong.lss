
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000008ee  00000982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800152  00800152  000009d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018c4  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bad  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b66  00000000  00000000  000030b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000558  00000000  00000000  00003c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ca  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dea  00000000  00000000  0000473e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00005528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ee       	ldi	r30, 0xEE	; 238
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 35       	cpi	r26, 0x52	; 82
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e5       	ldi	r26, 0x52	; 82
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 36       	cpi	r26, 0x60	; 96
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 96 02 	call	0x52c	; 0x52c <main>
  a6:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:

extern volatile uint8_t ADC_ready;

int ADC_init(void) {
	// Interrupt on rising edge PE0
	EMCUCR |= (1<<ISC2);
  ae:	86 b7       	in	r24, 0x36	; 54
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	86 bf       	out	0x36, r24	; 54

	// Enable interrupt on PE0
	GICR |= (1<<INT2);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b bf       	out	0x3b, r24	; 59
	
	// Button input
	clr_bit(DDRE, PE0);
  ba:	30 98       	cbi	0x06, 0	; 6
	
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  bc:	85 b7       	in	r24, 0x35	; 53
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  c2:	80 b7       	in	r24, 0x30	; 48
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRE &= ~(1<<PINE0);
  c8:	30 98       	cbi	0x06, 0	; 6

	//set button pins to input
	clr_bit(DDRB, DDB0);
  ca:	b8 98       	cbi	0x17, 0	; 23
	clr_bit(DDRB, DDB1);
  cc:	b9 98       	cbi	0x17, 1	; 23
	
	//set joystick button to input
	clr_bit(DDRB, DDB2);
  ce:	ba 98       	cbi	0x17, 2	; 23
	return 0;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	80 93 00 14 	sts	0x1400, r24
	while(!ADC_ready);
  dc:	80 91 53 01 	lds	r24, 0x0153
  e0:	88 23       	and	r24, r24
  e2:	e1 f3       	breq	.-8      	; 0xdc <ADC_read+0x6>
		
	return *adc;
  e4:	80 91 00 14 	lds	r24, 0x1400
}
  e8:	08 95       	ret

000000ea <__vector_3>:


ISR(INT2_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	ADC_ready = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 53 01 	sts	0x0153, r24
	//wake up the CPU
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <CAN_init>:
#include <util/delay.h>
#include <stdio.h>

extern volatile uint8_t rx_int_flag; 

int CAN_init(){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//config-mode
	MCP2515_init();
 112:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCP2515_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <CAN_init+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <CAN_init+0x18>
 120:	00 00       	nop
	//enable interrupts in MCP
	//Interrupt when message received in RXB0
		
	
	
	value = MCP2515_read(MCP_CANSTAT);
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 128:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	80 7e       	andi	r24, 0xE0	; 224
 12e:	80 38       	cpi	r24, 0x80	; 128
 130:	39 f0       	breq	.+14     	; 0x140 <CAN_init+0x38>
		printf("MCP2515 is NOT in config mode after reset!\n");
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 25 04 	call	0x84a	; 0x84a <puts>
		return 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	1f c0       	rjmp	.+62     	; 0x17e <CAN_init+0x76>
	}
	
	MCP2515_bit_modify(MCP_CANINTE, 0x01, 0x01);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x60, 0xFF);
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	60 e6       	ldi	r22, 0x60	; 96
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	//Set loopback-mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK , MODE_NORMAL);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 ee       	ldi	r22, 0xE0	; 224
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 164:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_NORMAL) {
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 7e       	andi	r24, 0xE0	; 224
 16a:	39 f0       	breq	.+14     	; 0x17a <CAN_init+0x72>
		printf("MCP2515 is NOT in normal mode!\n");
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 25 04 	call	0x84a	; 0x84a <puts>
		return 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <CAN_init+0x76>
	}
	
	return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <CAN_transmit_complete>:
		
	}
}

int CAN_transmit_complete(){
	if ( test_bit(MCP2515_read(MCP_TXB0CTRL), 3)){
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MCP2515_read>
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	89 27       	eor	r24, r25
		return 0;
	}
	return 1;
}
 196:	81 70       	andi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <CAN_send>:
	
	return 0;
}


void CAN_send(Message* msg){
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	if(CAN_transmit_complete()){
 1aa:	0e 94 c3 00 	call	0x186	; 0x186 <CAN_transmit_complete>
 1ae:	89 2b       	or	r24, r25
 1b0:	d9 f1       	breq	.+118    	; 0x228 <CAN_send+0x8c>
		
		//sending ID
		MCP2515_write(MCP_TXB0SIDH, (uint8_t)msg->ID >> 3);
 1b2:	f7 01       	movw	r30, r14
 1b4:	60 81       	ld	r22, Z
 1b6:	66 95       	lsr	r22
 1b8:	66 95       	lsr	r22
 1ba:	66 95       	lsr	r22
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
		MCP2515_write(MCP_TXB0SIDL, (uint8_t)msg->ID << 5);
 1c2:	f7 01       	movw	r30, r14
 1c4:	60 81       	ld	r22, Z
 1c6:	62 95       	swap	r22
 1c8:	66 0f       	add	r22, r22
 1ca:	60 7e       	andi	r22, 0xE0	; 224
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//sending data length
		MCP2515_write(MCP_TXB0DLC, msg->length & 0x0F);
 1d2:	f7 01       	movw	r30, r14
 1d4:	62 81       	ldd	r22, Z+2	; 0x02
 1d6:	6f 70       	andi	r22, 0x0F	; 15
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
 1de:	f7 01       	movw	r30, r14
 1e0:	82 81       	ldd	r24, Z+2	; 0x02
 1e2:	93 81       	ldd	r25, Z+3	; 0x03
 1e4:	89 30       	cpi	r24, 0x09	; 9
 1e6:	91 05       	cpc	r25, r1
 1e8:	54 f0       	brlt	.+20     	; 0x1fe <CAN_send+0x62>
			msg->length = 8;
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	93 83       	std	Z+3, r25	; 0x03
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	87 01       	movw	r16, r14
 1f4:	0c 5f       	subi	r16, 0xFC	; 252
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	return 0;
}


void CAN_send(Message* msg){
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <CAN_send+0x6a>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 1fe:	18 16       	cp	r1, r24
 200:	19 06       	cpc	r1, r25
 202:	bc f3       	brlt	.-18     	; 0x1f2 <CAN_send+0x56>
 204:	0e c0       	rjmp	.+28     	; 0x222 <CAN_send+0x86>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
 206:	f8 01       	movw	r30, r16
 208:	61 91       	ld	r22, Z+
 20a:	8f 01       	movw	r16, r30
 20c:	8c 2f       	mov	r24, r28
 20e:	8a 5c       	subi	r24, 0xCA	; 202
 210:	0e 94 6d 01 	call	0x2da	; 0x2da <MCP2515_write>
	
		//Sending data, max 8 bytes
		if(msg->length > 8){
			msg->length = 8;
		}
		for (int i = 0; i < msg->length; i++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	f7 01       	movw	r30, r14
 218:	22 81       	ldd	r18, Z+2	; 0x02
 21a:	33 81       	ldd	r19, Z+3	; 0x03
 21c:	c2 17       	cp	r28, r18
 21e:	d3 07       	cpc	r29, r19
 220:	94 f3       	brlt	.-28     	; 0x206 <CAN_send+0x6a>
			MCP2515_write(MCP_TXB0D0 + i, msg->data[i]);  
		}
	
		//initiate message transmission
		
		MCP2515_request_to_send(1);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 81 01 	call	0x302	; 0x302 <MCP2515_request_to_send>
		
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <CAN_int_vect>:
	return 0; 
}

void CAN_int_vect(){
	//set recieve flag to 0
	MCP2515_bit_modify(MCP_CANINTF, 0x01, 0x00);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	//set transmit flag to 0 
	MCP2515_bit_modify(MCP_CANINTF, 0x04, 0x00);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	8c e2       	ldi	r24, 0x2C	; 44
 246:	0e 94 93 01 	call	0x326	; 0x326 <MCP2515_bit_modify>
	rx_int_flag = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 52 01 	sts	0x0152, r24
 250:	08 95       	ret

00000252 <__vector_1>:
	msg.ID = ID;
	
	return msg;
}

ISR(INT0_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	//RX0 interrupt flag set to 0
	CAN_int_vect();
 274:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_int_vect>
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <MCP2515_reset>:
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
}

void MCP2515_reset(void){
	SPI_activate_SS();
 29a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SPI_activate_SS>
	SPI_read_write(MCP_RESET);
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_deactivate_SS();
 2a4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
 2a8:	08 95       	ret

000002aa <MCP2515_init>:
#include "MCP2515.h"
#include "MCP2515_driver.h"
#include <string.h>

void MCP2515_init(void){
	SPI_init();
 2aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SPI_init>
	//set MCP2515 in configuration mode
	MCP2515_reset(); 
 2ae:	0e 94 4d 01 	call	0x29a	; 0x29a <MCP2515_reset>
 2b2:	08 95       	ret

000002b4 <MCP2515_read>:
	SPI_activate_SS();
	SPI_read_write(MCP_RESET);
	SPI_deactivate_SS();
}

uint8_t MCP2515_read(uint8_t address){
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_activate_SS();
 2b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SPI_activate_SS>
	SPI_read_write(MCP_READ);
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(address);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	data = SPI_read_write(0x00);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
 2ce:	c8 2f       	mov	r28, r24
	SPI_deactivate_SS();
 2d0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
	return data;
}
 2d4:	8c 2f       	mov	r24, r28
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <MCP2515_write>:

void MCP2515_write(uint8_t address, char data){
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	d8 2f       	mov	r29, r24
 2e0:	c6 2f       	mov	r28, r22
	SPI_activate_SS();
 2e2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SPI_activate_SS>
	SPI_read_write(MCP_WRITE);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(address);
 2ec:	8d 2f       	mov	r24, r29
 2ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(data);
 2f2:	8c 2f       	mov	r24, r28
 2f4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_deactivate_SS();
 2f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <MCP2515_request_to_send>:

 void MCP2515_request_to_send(uint8_t command){
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
	SPI_activate_SS();
 306:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SPI_activate_SS>
	if (command <= 7){
 30a:	c8 30       	cpi	r28, 0x08	; 8
 30c:	28 f4       	brcc	.+10     	; 0x318 <MCP2515_request_to_send+0x16>
		SPI_read_write(MCP_RTS | command);
 30e:	8c 2f       	mov	r24, r28
 310:	80 68       	ori	r24, 0x80	; 128
 312:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
 316:	03 c0       	rjmp	.+6      	; 0x31e <MCP2515_request_to_send+0x1c>
	}
	else{
		SPI_read_write(MCP_RTS);
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	}
	SPI_deactivate_SS();
 31e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <MCP2515_bit_modify>:
	SPI_deactivate_SS();	
	return status;
}


void MCP2515_bit_modify(uint8_t address, uint8_t mask_byte, uint8_t data_byte){
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	18 2f       	mov	r17, r24
 32e:	d6 2f       	mov	r29, r22
 330:	c4 2f       	mov	r28, r20
	SPI_activate_SS();
 332:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SPI_activate_SS>
	SPI_read_write(MCP_BITMOD);
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(address);
 33c:	81 2f       	mov	r24, r17
 33e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(mask_byte);
 342:	8d 2f       	mov	r24, r29
 344:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_read_write(data_byte);
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_read_write>
	SPI_deactivate_SS();
 34e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	08 95       	ret

0000035a <UART_transmit>:

int UART_transmit(unsigned char data, FILE *stream){
	
	//Wait for empty transmit buffer
	
	while( !( UCSR0A & (1<<UDRE0)) );
 35a:	5d 9b       	sbis	0x0b, 5	; 11
 35c:	fe cf       	rjmp	.-4      	; 0x35a <UART_transmit>
 
	//Put data into buffer, sends the data
 
	UDR0 = data;
 35e:	8c b9       	out	0x0c, r24	; 12
	return 0; 
}
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret

00000366 <UART_receive>:

unsigned char UART_receive(){

	//Wait for data to be received

	while( !(UCSR0A & (1<<RXC0)) );
 366:	5f 9b       	sbis	0x0b, 7	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <UART_receive>
 
	//Get and return received data from buffer
 
	return UDR0;
 36a:	8c b1       	in	r24, 0x0c	; 12
}
 36c:	08 95       	ret

0000036e <UART_init>:

int UART_init(unsigned int ubrr ){
/* 
Set baud rate
 */
	UBRR0L = ubrr;
 36e:	89 b9       	out	0x09, r24	; 9

/* 
Enable receiver and transmitter
 */
	UCSR0B =(1<<RXEN0)|(1<<TXEN0);
 370:	88 e1       	ldi	r24, 0x18	; 24
 372:	8a b9       	out	0x0a, r24	; 10
	
	uart = fdevopen(&UART_transmit, &UART_receive);
 374:	63 eb       	ldi	r22, 0xB3	; 179
 376:	71 e0       	ldi	r23, 0x01	; 1
 378:	8d ea       	ldi	r24, 0xAD	; 173
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <fdevopen>
 380:	90 93 55 01 	sts	0x0155, r25
 384:	80 93 54 01 	sts	0x0154, r24
	
	return 0; 
}
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	08 95       	ret

0000038e <send_joystick_dir>:
		return LEFT;
	}
	return CENTER;
}

void send_joystick_dir(void){
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	2c 97       	sbiw	r28, 0x0c	; 12
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
*/


int joystick_read(int channel){
	//Return 0-255
	return ADC_read(channel);
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
 3aa:	18 2f       	mov	r17, r24
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_read>
	joystick_dir joy_pos_x = joystick_read(CHANNEL_X);
	joystick_dir joy_pos_y = joystick_read(CHANNEL_Y);
	
	Message msg;
	
	msg.length = 2;
 3b2:	22 e0       	ldi	r18, 0x02	; 2
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	3c 83       	std	Y+4, r19	; 0x04
 3b8:	2b 83       	std	Y+3, r18	; 0x03
	msg.data[0] = (uint8_t)joy_pos_x;
 3ba:	1d 83       	std	Y+5, r17	; 0x05
	msg.data[1] = (uint8_t)joy_pos_y;
 3bc:	8e 83       	std	Y+6, r24	; 0x06
	msg.ID = 0;
 3be:	1a 82       	std	Y+2, r1	; 0x02
 3c0:	19 82       	std	Y+1, r1	; 0x01
	
	CAN_send(&msg);
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 ce 00 	call	0x19c	; 0x19c <CAN_send>
}
 3ca:	2c 96       	adiw	r28, 0x0c	; 12
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	08 95       	ret

000003de <oled_init>:



void oled_init(){
	//  display  off
	*OLED_c = 0xae;
 3de:	e0 91 06 01 	lds	r30, 0x0106
 3e2:	f0 91 07 01 	lds	r31, 0x0107
 3e6:	8e ea       	ldi	r24, 0xAE	; 174
 3e8:	80 83       	st	Z, r24

	//segment  remap
	*OLED_c = 0xa1;	
 3ea:	e0 91 06 01 	lds	r30, 0x0106
 3ee:	f0 91 07 01 	lds	r31, 0x0107
 3f2:	81 ea       	ldi	r24, 0xA1	; 161
 3f4:	80 83       	st	Z, r24

	//common  pads  hardware:  alternative		
	*OLED_c = 0xda;			
 3f6:	e0 91 06 01 	lds	r30, 0x0106
 3fa:	f0 91 07 01 	lds	r31, 0x0107
 3fe:	8a ed       	ldi	r24, 0xDA	; 218
 400:	80 83       	st	Z, r24
	*OLED_c = 0x12;
 402:	e0 91 06 01 	lds	r30, 0x0106
 406:	f0 91 07 01 	lds	r31, 0x0107
 40a:	82 e1       	ldi	r24, 0x12	; 18
 40c:	80 83       	st	Z, r24

	//common output scan direction:com63~com0
	*OLED_c = 0xc8;
 40e:	e0 91 06 01 	lds	r30, 0x0106
 412:	f0 91 07 01 	lds	r31, 0x0107
 416:	88 ec       	ldi	r24, 0xC8	; 200
 418:	80 83       	st	Z, r24

	//multiplex  ration  mode:63
	*OLED_c = 0xa8;
 41a:	e0 91 06 01 	lds	r30, 0x0106
 41e:	f0 91 07 01 	lds	r31, 0x0107
 422:	88 ea       	ldi	r24, 0xA8	; 168
 424:	80 83       	st	Z, r24
	*OLED_c = 0x3f;
 426:	e0 91 06 01 	lds	r30, 0x0106
 42a:	f0 91 07 01 	lds	r31, 0x0107
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_c = 0xd5;
 432:	e0 91 06 01 	lds	r30, 0x0106
 436:	f0 91 07 01 	lds	r31, 0x0107
 43a:	85 ed       	ldi	r24, 0xD5	; 213
 43c:	80 83       	st	Z, r24
	*OLED_c = 0x80;
 43e:	e0 91 06 01 	lds	r30, 0x0106
 442:	f0 91 07 01 	lds	r31, 0x0107
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	80 83       	st	Z, r24

	//contrast  control
	*OLED_c = 0x81;
 44a:	e0 91 06 01 	lds	r30, 0x0106
 44e:	f0 91 07 01 	lds	r31, 0x0107
 452:	81 e8       	ldi	r24, 0x81	; 129
 454:	80 83       	st	Z, r24
	*OLED_c = 0x50;
 456:	e0 91 06 01 	lds	r30, 0x0106
 45a:	f0 91 07 01 	lds	r31, 0x0107
 45e:	80 e5       	ldi	r24, 0x50	; 80
 460:	80 83       	st	Z, r24

	//set  pre-charge  period
	*OLED_c = 0xd9;
 462:	e0 91 06 01 	lds	r30, 0x0106
 466:	f0 91 07 01 	lds	r31, 0x0107
 46a:	89 ed       	ldi	r24, 0xD9	; 217
 46c:	80 83       	st	Z, r24
	*OLED_c = 0x21;
 46e:	e0 91 06 01 	lds	r30, 0x0106
 472:	f0 91 07 01 	lds	r31, 0x0107
 476:	81 e2       	ldi	r24, 0x21	; 33
 478:	80 83       	st	Z, r24

	 //Set  Memory  Addressing  Mode
	*OLED_c = 0x20;
 47a:	e0 91 06 01 	lds	r30, 0x0106
 47e:	f0 91 07 01 	lds	r31, 0x0107
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	80 83       	st	Z, r24
	*OLED_c = 0x02;
 486:	e0 91 06 01 	lds	r30, 0x0106
 48a:	f0 91 07 01 	lds	r31, 0x0107
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	80 83       	st	Z, r24

	//VCOM  deselect  level  mode
	*OLED_c = 0xdb;
 492:	e0 91 06 01 	lds	r30, 0x0106
 496:	f0 91 07 01 	lds	r31, 0x0107
 49a:	8b ed       	ldi	r24, 0xDB	; 219
 49c:	80 83       	st	Z, r24
	*OLED_c = 0x30;
 49e:	e0 91 06 01 	lds	r30, 0x0106
 4a2:	f0 91 07 01 	lds	r31, 0x0107
 4a6:	80 e3       	ldi	r24, 0x30	; 48
 4a8:	80 83       	st	Z, r24

	//master  configuration
	*OLED_c = 0xad;
 4aa:	e0 91 06 01 	lds	r30, 0x0106
 4ae:	f0 91 07 01 	lds	r31, 0x0107
 4b2:	8d ea       	ldi	r24, 0xAD	; 173
 4b4:	80 83       	st	Z, r24

	//out follows RAM content 
	*OLED_c = 0x00;
 4b6:	e0 91 06 01 	lds	r30, 0x0106
 4ba:	f0 91 07 01 	lds	r31, 0x0107
 4be:	10 82       	st	Z, r1
	
	//set  normal  display
	*OLED_c = 0xa4;
 4c0:	e0 91 06 01 	lds	r30, 0x0106
 4c4:	f0 91 07 01 	lds	r31, 0x0107
 4c8:	84 ea       	ldi	r24, 0xA4	; 164
 4ca:	80 83       	st	Z, r24
	*OLED_c = 0xa6;
 4cc:	e0 91 06 01 	lds	r30, 0x0106
 4d0:	f0 91 07 01 	lds	r31, 0x0107
 4d4:	86 ea       	ldi	r24, 0xA6	; 166
 4d6:	80 83       	st	Z, r24
	
	//  display  on
	*OLED_c = 0xaf;
 4d8:	e0 91 06 01 	lds	r30, 0x0106
 4dc:	f0 91 07 01 	lds	r31, 0x0107
 4e0:	8f ea       	ldi	r24, 0xAF	; 175
 4e2:	80 83       	st	Z, r24
 4e4:	08 95       	ret

000004e6 <SPI_read_write>:
}

uint8_t SPI_read_write(char cData){
	/* Start transmission */
	
	SPDR = cData;
 4e6:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(test_bit(SPSR, SPIF)));   //wait until SPIF-flag is set. 
 4e8:	77 9b       	sbis	0x0e, 7	; 14
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <SPI_read_write+0x2>
	return SPDR;
 4ec:	8f b1       	in	r24, 0x0f	; 15
}
 4ee:	08 95       	ret

000004f0 <SPI_activate_SS>:

void SPI_activate_SS(){
	clr_bit(PORTB, SS);
 4f0:	c4 98       	cbi	0x18, 4	; 24
 4f2:	08 95       	ret

000004f4 <SPI_deactivate_SS>:
}

void SPI_deactivate_SS(){
	set_bit(PORTB, SS);
 4f4:	c4 9a       	sbi	0x18, 4	; 24
 4f6:	08 95       	ret

000004f8 <SPI_init>:
#include <avr/io.h>


void SPI_init(void){
	//SPI enable
	set_bit(SPCR, SPE);
 4f8:	6e 9a       	sbi	0x0d, 6	; 13
	//Data order MSB transmitted first
	//clr_bit(SPCR, DORD);
	//Set SPI to master mode
	set_bit(SPCR, MSTR);
 4fa:	6c 9a       	sbi	0x0d, 4	; 13
	
	//set SPI clock rate = Fosc/2
	set_bit(SPSR, SPI2X);
 4fc:	70 9a       	sbi	0x0e, 0	; 14
	
	
	//set MOSI and SCK to output, all others input
	set_bit(DDRB, MOSI);
 4fe:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 500:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 502:	bc 9a       	sbi	0x17, 4	; 23
	
	SPI_deactivate_SS();
 504:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <SPI_deactivate_SS>
 508:	08 95       	ret

0000050a <register_init>:
#define REGISTER_INIT_H_
void register_init(void);

void register_init(void){
	//enabler externt minne i MCU
	set_bit(MCUCR, SRE);
 50a:	85 b7       	in	r24, 0x35	; 53
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 510:	80 b7       	in	r24, 0x30	; 48
 512:	80 62       	ori	r24, 0x20	; 32
 514:	80 bf       	out	0x30, r24	; 48

	//enable interrupts in MCU
	clr_bit(MCUCR,ISC00);
 516:	85 b7       	in	r24, 0x35	; 53
 518:	8e 7f       	andi	r24, 0xFE	; 254
 51a:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR,ISC01);
 51c:	85 b7       	in	r24, 0x35	; 53
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	85 bf       	out	0x35, r24	; 53
	set_bit(GICR,INT0);
 522:	8b b7       	in	r24, 0x3b	; 59
 524:	80 64       	ori	r24, 0x40	; 64
 526:	8b bf       	out	0x3b, r24	; 59
	
	
	clr_bit(DDRD, DDD2);
 528:	8a 98       	cbi	0x11, 2	; 17
 52a:	08 95       	ret

0000052c <main>:
volatile uint8_t* a = 0x1400;


int main(void) {
	// Disable global interrupts
	cli();
 52c:	f8 94       	cli
	UART_init(31);
 52e:	8f e1       	ldi	r24, 0x1F	; 31
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_init>
	register_init();
 536:	0e 94 85 02 	call	0x50a	; 0x50a <register_init>
	oled_init();
 53a:	0e 94 ef 01 	call	0x3de	; 0x3de <oled_init>
	ADC_init();
 53e:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	CAN_init();
 542:	0e 94 84 00 	call	0x108	; 0x108 <CAN_init>
	//Enable global interrupts
	sei();
 546:	78 94       	sei

	while(1){
		send_joystick_dir();
 548:	0e 94 c7 01 	call	0x38e	; 0x38e <send_joystick_dir>
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	9f e5       	ldi	r25, 0x5F	; 95
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x24>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x2a>
 556:	00 00       	nop
		_delay_ms(20);
		
		
		if(ADC_ready){
 558:	80 91 53 01 	lds	r24, 0x0153
 55c:	88 23       	and	r24, r24
 55e:	a1 f3       	breq	.-24     	; 0x548 <main+0x1c>
			ADC_ready = 0;
 560:	10 92 53 01 	sts	0x0153, r1
 564:	f1 cf       	rjmp	.-30     	; 0x548 <main+0x1c>

00000566 <malloc>:
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	91 05       	cpc	r25, r1
 56e:	10 f4       	brcc	.+4      	; 0x574 <malloc+0xe>
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	e0 91 58 01 	lds	r30, 0x0158
 578:	f0 91 59 01 	lds	r31, 0x0159
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	a0 e0       	ldi	r26, 0x00	; 0
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	30 97       	sbiw	r30, 0x00	; 0
 586:	39 f1       	breq	.+78     	; 0x5d6 <malloc+0x70>
 588:	40 81       	ld	r20, Z
 58a:	51 81       	ldd	r21, Z+1	; 0x01
 58c:	48 17       	cp	r20, r24
 58e:	59 07       	cpc	r21, r25
 590:	b8 f0       	brcs	.+46     	; 0x5c0 <malloc+0x5a>
 592:	48 17       	cp	r20, r24
 594:	59 07       	cpc	r21, r25
 596:	71 f4       	brne	.+28     	; 0x5b4 <malloc+0x4e>
 598:	82 81       	ldd	r24, Z+2	; 0x02
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	10 97       	sbiw	r26, 0x00	; 0
 59e:	29 f0       	breq	.+10     	; 0x5aa <malloc+0x44>
 5a0:	13 96       	adiw	r26, 0x03	; 3
 5a2:	9c 93       	st	X, r25
 5a4:	8e 93       	st	-X, r24
 5a6:	12 97       	sbiw	r26, 0x02	; 2
 5a8:	2c c0       	rjmp	.+88     	; 0x602 <malloc+0x9c>
 5aa:	90 93 59 01 	sts	0x0159, r25
 5ae:	80 93 58 01 	sts	0x0158, r24
 5b2:	27 c0       	rjmp	.+78     	; 0x602 <malloc+0x9c>
 5b4:	21 15       	cp	r18, r1
 5b6:	31 05       	cpc	r19, r1
 5b8:	31 f0       	breq	.+12     	; 0x5c6 <malloc+0x60>
 5ba:	42 17       	cp	r20, r18
 5bc:	53 07       	cpc	r21, r19
 5be:	18 f0       	brcs	.+6      	; 0x5c6 <malloc+0x60>
 5c0:	a9 01       	movw	r20, r18
 5c2:	db 01       	movw	r26, r22
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <malloc+0x62>
 5c6:	ef 01       	movw	r28, r30
 5c8:	9a 01       	movw	r18, r20
 5ca:	bd 01       	movw	r22, r26
 5cc:	df 01       	movw	r26, r30
 5ce:	02 80       	ldd	r0, Z+2	; 0x02
 5d0:	f3 81       	ldd	r31, Z+3	; 0x03
 5d2:	e0 2d       	mov	r30, r0
 5d4:	d7 cf       	rjmp	.-82     	; 0x584 <malloc+0x1e>
 5d6:	21 15       	cp	r18, r1
 5d8:	31 05       	cpc	r19, r1
 5da:	f9 f0       	breq	.+62     	; 0x61a <malloc+0xb4>
 5dc:	28 1b       	sub	r18, r24
 5de:	39 0b       	sbc	r19, r25
 5e0:	24 30       	cpi	r18, 0x04	; 4
 5e2:	31 05       	cpc	r19, r1
 5e4:	80 f4       	brcc	.+32     	; 0x606 <malloc+0xa0>
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	9b 81       	ldd	r25, Y+3	; 0x03
 5ea:	61 15       	cp	r22, r1
 5ec:	71 05       	cpc	r23, r1
 5ee:	21 f0       	breq	.+8      	; 0x5f8 <malloc+0x92>
 5f0:	fb 01       	movw	r30, r22
 5f2:	93 83       	std	Z+3, r25	; 0x03
 5f4:	82 83       	std	Z+2, r24	; 0x02
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <malloc+0x9a>
 5f8:	90 93 59 01 	sts	0x0159, r25
 5fc:	80 93 58 01 	sts	0x0158, r24
 600:	fe 01       	movw	r30, r28
 602:	32 96       	adiw	r30, 0x02	; 2
 604:	44 c0       	rjmp	.+136    	; 0x68e <malloc+0x128>
 606:	fe 01       	movw	r30, r28
 608:	e2 0f       	add	r30, r18
 60a:	f3 1f       	adc	r31, r19
 60c:	81 93       	st	Z+, r24
 60e:	91 93       	st	Z+, r25
 610:	22 50       	subi	r18, 0x02	; 2
 612:	31 09       	sbc	r19, r1
 614:	39 83       	std	Y+1, r19	; 0x01
 616:	28 83       	st	Y, r18
 618:	3a c0       	rjmp	.+116    	; 0x68e <malloc+0x128>
 61a:	20 91 56 01 	lds	r18, 0x0156
 61e:	30 91 57 01 	lds	r19, 0x0157
 622:	23 2b       	or	r18, r19
 624:	41 f4       	brne	.+16     	; 0x636 <malloc+0xd0>
 626:	20 91 02 01 	lds	r18, 0x0102
 62a:	30 91 03 01 	lds	r19, 0x0103
 62e:	30 93 57 01 	sts	0x0157, r19
 632:	20 93 56 01 	sts	0x0156, r18
 636:	20 91 00 01 	lds	r18, 0x0100
 63a:	30 91 01 01 	lds	r19, 0x0101
 63e:	21 15       	cp	r18, r1
 640:	31 05       	cpc	r19, r1
 642:	41 f4       	brne	.+16     	; 0x654 <malloc+0xee>
 644:	2d b7       	in	r18, 0x3d	; 61
 646:	3e b7       	in	r19, 0x3e	; 62
 648:	40 91 04 01 	lds	r20, 0x0104
 64c:	50 91 05 01 	lds	r21, 0x0105
 650:	24 1b       	sub	r18, r20
 652:	35 0b       	sbc	r19, r21
 654:	e0 91 56 01 	lds	r30, 0x0156
 658:	f0 91 57 01 	lds	r31, 0x0157
 65c:	e2 17       	cp	r30, r18
 65e:	f3 07       	cpc	r31, r19
 660:	a0 f4       	brcc	.+40     	; 0x68a <malloc+0x124>
 662:	2e 1b       	sub	r18, r30
 664:	3f 0b       	sbc	r19, r31
 666:	28 17       	cp	r18, r24
 668:	39 07       	cpc	r19, r25
 66a:	78 f0       	brcs	.+30     	; 0x68a <malloc+0x124>
 66c:	ac 01       	movw	r20, r24
 66e:	4e 5f       	subi	r20, 0xFE	; 254
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	24 17       	cp	r18, r20
 674:	35 07       	cpc	r19, r21
 676:	48 f0       	brcs	.+18     	; 0x68a <malloc+0x124>
 678:	4e 0f       	add	r20, r30
 67a:	5f 1f       	adc	r21, r31
 67c:	50 93 57 01 	sts	0x0157, r21
 680:	40 93 56 01 	sts	0x0156, r20
 684:	81 93       	st	Z+, r24
 686:	91 93       	st	Z+, r25
 688:	02 c0       	rjmp	.+4      	; 0x68e <malloc+0x128>
 68a:	e0 e0       	ldi	r30, 0x00	; 0
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	cf 01       	movw	r24, r30
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <free>:
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	00 97       	sbiw	r24, 0x00	; 0
 69c:	09 f4       	brne	.+2      	; 0x6a0 <free+0xa>
 69e:	87 c0       	rjmp	.+270    	; 0x7ae <free+0x118>
 6a0:	fc 01       	movw	r30, r24
 6a2:	32 97       	sbiw	r30, 0x02	; 2
 6a4:	13 82       	std	Z+3, r1	; 0x03
 6a6:	12 82       	std	Z+2, r1	; 0x02
 6a8:	c0 91 58 01 	lds	r28, 0x0158
 6ac:	d0 91 59 01 	lds	r29, 0x0159
 6b0:	20 97       	sbiw	r28, 0x00	; 0
 6b2:	81 f4       	brne	.+32     	; 0x6d4 <free+0x3e>
 6b4:	20 81       	ld	r18, Z
 6b6:	31 81       	ldd	r19, Z+1	; 0x01
 6b8:	28 0f       	add	r18, r24
 6ba:	39 1f       	adc	r19, r25
 6bc:	80 91 56 01 	lds	r24, 0x0156
 6c0:	90 91 57 01 	lds	r25, 0x0157
 6c4:	82 17       	cp	r24, r18
 6c6:	93 07       	cpc	r25, r19
 6c8:	79 f5       	brne	.+94     	; 0x728 <free+0x92>
 6ca:	f0 93 57 01 	sts	0x0157, r31
 6ce:	e0 93 56 01 	sts	0x0156, r30
 6d2:	6d c0       	rjmp	.+218    	; 0x7ae <free+0x118>
 6d4:	de 01       	movw	r26, r28
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	ae 17       	cp	r26, r30
 6dc:	bf 07       	cpc	r27, r31
 6de:	50 f4       	brcc	.+20     	; 0x6f4 <free+0x5e>
 6e0:	12 96       	adiw	r26, 0x02	; 2
 6e2:	4d 91       	ld	r20, X+
 6e4:	5c 91       	ld	r21, X
 6e6:	13 97       	sbiw	r26, 0x03	; 3
 6e8:	9d 01       	movw	r18, r26
 6ea:	41 15       	cp	r20, r1
 6ec:	51 05       	cpc	r21, r1
 6ee:	09 f1       	breq	.+66     	; 0x732 <free+0x9c>
 6f0:	da 01       	movw	r26, r20
 6f2:	f3 cf       	rjmp	.-26     	; 0x6da <free+0x44>
 6f4:	b3 83       	std	Z+3, r27	; 0x03
 6f6:	a2 83       	std	Z+2, r26	; 0x02
 6f8:	40 81       	ld	r20, Z
 6fa:	51 81       	ldd	r21, Z+1	; 0x01
 6fc:	84 0f       	add	r24, r20
 6fe:	95 1f       	adc	r25, r21
 700:	8a 17       	cp	r24, r26
 702:	9b 07       	cpc	r25, r27
 704:	71 f4       	brne	.+28     	; 0x722 <free+0x8c>
 706:	8d 91       	ld	r24, X+
 708:	9c 91       	ld	r25, X
 70a:	11 97       	sbiw	r26, 0x01	; 1
 70c:	84 0f       	add	r24, r20
 70e:	95 1f       	adc	r25, r21
 710:	02 96       	adiw	r24, 0x02	; 2
 712:	91 83       	std	Z+1, r25	; 0x01
 714:	80 83       	st	Z, r24
 716:	12 96       	adiw	r26, 0x02	; 2
 718:	8d 91       	ld	r24, X+
 71a:	9c 91       	ld	r25, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
 71e:	93 83       	std	Z+3, r25	; 0x03
 720:	82 83       	std	Z+2, r24	; 0x02
 722:	21 15       	cp	r18, r1
 724:	31 05       	cpc	r19, r1
 726:	29 f4       	brne	.+10     	; 0x732 <free+0x9c>
 728:	f0 93 59 01 	sts	0x0159, r31
 72c:	e0 93 58 01 	sts	0x0158, r30
 730:	3e c0       	rjmp	.+124    	; 0x7ae <free+0x118>
 732:	d9 01       	movw	r26, r18
 734:	13 96       	adiw	r26, 0x03	; 3
 736:	fc 93       	st	X, r31
 738:	ee 93       	st	-X, r30
 73a:	12 97       	sbiw	r26, 0x02	; 2
 73c:	4d 91       	ld	r20, X+
 73e:	5d 91       	ld	r21, X+
 740:	a4 0f       	add	r26, r20
 742:	b5 1f       	adc	r27, r21
 744:	ea 17       	cp	r30, r26
 746:	fb 07       	cpc	r31, r27
 748:	79 f4       	brne	.+30     	; 0x768 <free+0xd2>
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	d9 01       	movw	r26, r18
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	9c 93       	st	X, r25
 75a:	8e 93       	st	-X, r24
 75c:	82 81       	ldd	r24, Z+2	; 0x02
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	13 96       	adiw	r26, 0x03	; 3
 762:	9c 93       	st	X, r25
 764:	8e 93       	st	-X, r24
 766:	12 97       	sbiw	r26, 0x02	; 2
 768:	e0 e0       	ldi	r30, 0x00	; 0
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	9b 81       	ldd	r25, Y+3	; 0x03
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	19 f0       	breq	.+6      	; 0x77a <free+0xe4>
 774:	fe 01       	movw	r30, r28
 776:	ec 01       	movw	r28, r24
 778:	f9 cf       	rjmp	.-14     	; 0x76c <free+0xd6>
 77a:	ce 01       	movw	r24, r28
 77c:	02 96       	adiw	r24, 0x02	; 2
 77e:	28 81       	ld	r18, Y
 780:	39 81       	ldd	r19, Y+1	; 0x01
 782:	82 0f       	add	r24, r18
 784:	93 1f       	adc	r25, r19
 786:	20 91 56 01 	lds	r18, 0x0156
 78a:	30 91 57 01 	lds	r19, 0x0157
 78e:	28 17       	cp	r18, r24
 790:	39 07       	cpc	r19, r25
 792:	69 f4       	brne	.+26     	; 0x7ae <free+0x118>
 794:	30 97       	sbiw	r30, 0x00	; 0
 796:	29 f4       	brne	.+10     	; 0x7a2 <free+0x10c>
 798:	10 92 59 01 	sts	0x0159, r1
 79c:	10 92 58 01 	sts	0x0158, r1
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <free+0x110>
 7a2:	13 82       	std	Z+3, r1	; 0x03
 7a4:	12 82       	std	Z+2, r1	; 0x02
 7a6:	d0 93 57 01 	sts	0x0157, r29
 7aa:	c0 93 56 01 	sts	0x0156, r28
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <fdevopen>:
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	ec 01       	movw	r28, r24
 7be:	8b 01       	movw	r16, r22
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	31 f4       	brne	.+12     	; 0x7d0 <fdevopen+0x1c>
 7c4:	61 15       	cp	r22, r1
 7c6:	71 05       	cpc	r23, r1
 7c8:	19 f4       	brne	.+6      	; 0x7d0 <fdevopen+0x1c>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	38 c0       	rjmp	.+112    	; 0x840 <fdevopen+0x8c>
 7d0:	6e e0       	ldi	r22, 0x0E	; 14
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <calloc>
 7dc:	fc 01       	movw	r30, r24
 7de:	00 97       	sbiw	r24, 0x00	; 0
 7e0:	a1 f3       	breq	.-24     	; 0x7ca <fdevopen+0x16>
 7e2:	80 e8       	ldi	r24, 0x80	; 128
 7e4:	83 83       	std	Z+3, r24	; 0x03
 7e6:	01 15       	cp	r16, r1
 7e8:	11 05       	cpc	r17, r1
 7ea:	71 f0       	breq	.+28     	; 0x808 <fdevopen+0x54>
 7ec:	13 87       	std	Z+11, r17	; 0x0b
 7ee:	02 87       	std	Z+10, r16	; 0x0a
 7f0:	81 e8       	ldi	r24, 0x81	; 129
 7f2:	83 83       	std	Z+3, r24	; 0x03
 7f4:	80 91 5a 01 	lds	r24, 0x015A
 7f8:	90 91 5b 01 	lds	r25, 0x015B
 7fc:	89 2b       	or	r24, r25
 7fe:	21 f4       	brne	.+8      	; 0x808 <fdevopen+0x54>
 800:	f0 93 5b 01 	sts	0x015B, r31
 804:	e0 93 5a 01 	sts	0x015A, r30
 808:	20 97       	sbiw	r28, 0x00	; 0
 80a:	c9 f0       	breq	.+50     	; 0x83e <fdevopen+0x8a>
 80c:	d1 87       	std	Z+9, r29	; 0x09
 80e:	c0 87       	std	Z+8, r28	; 0x08
 810:	83 81       	ldd	r24, Z+3	; 0x03
 812:	82 60       	ori	r24, 0x02	; 2
 814:	83 83       	std	Z+3, r24	; 0x03
 816:	80 91 5c 01 	lds	r24, 0x015C
 81a:	90 91 5d 01 	lds	r25, 0x015D
 81e:	89 2b       	or	r24, r25
 820:	71 f4       	brne	.+28     	; 0x83e <fdevopen+0x8a>
 822:	f0 93 5d 01 	sts	0x015D, r31
 826:	e0 93 5c 01 	sts	0x015C, r30
 82a:	80 91 5e 01 	lds	r24, 0x015E
 82e:	90 91 5f 01 	lds	r25, 0x015F
 832:	89 2b       	or	r24, r25
 834:	21 f4       	brne	.+8      	; 0x83e <fdevopen+0x8a>
 836:	f0 93 5f 01 	sts	0x015F, r31
 83a:	e0 93 5e 01 	sts	0x015E, r30
 83e:	cf 01       	movw	r24, r30
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	08 95       	ret

0000084a <puts>:
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	e0 91 5c 01 	lds	r30, 0x015C
 856:	f0 91 5d 01 	lds	r31, 0x015D
 85a:	23 81       	ldd	r18, Z+3	; 0x03
 85c:	21 ff       	sbrs	r18, 1
 85e:	1b c0       	rjmp	.+54     	; 0x896 <puts+0x4c>
 860:	ec 01       	movw	r28, r24
 862:	00 e0       	ldi	r16, 0x00	; 0
 864:	10 e0       	ldi	r17, 0x00	; 0
 866:	89 91       	ld	r24, Y+
 868:	60 91 5c 01 	lds	r22, 0x015C
 86c:	70 91 5d 01 	lds	r23, 0x015D
 870:	db 01       	movw	r26, r22
 872:	18 96       	adiw	r26, 0x08	; 8
 874:	ed 91       	ld	r30, X+
 876:	fc 91       	ld	r31, X
 878:	19 97       	sbiw	r26, 0x09	; 9
 87a:	88 23       	and	r24, r24
 87c:	31 f0       	breq	.+12     	; 0x88a <puts+0x40>
 87e:	09 95       	icall
 880:	89 2b       	or	r24, r25
 882:	89 f3       	breq	.-30     	; 0x866 <puts+0x1c>
 884:	0f ef       	ldi	r16, 0xFF	; 255
 886:	1f ef       	ldi	r17, 0xFF	; 255
 888:	ee cf       	rjmp	.-36     	; 0x866 <puts+0x1c>
 88a:	8a e0       	ldi	r24, 0x0A	; 10
 88c:	09 95       	icall
 88e:	89 2b       	or	r24, r25
 890:	11 f4       	brne	.+4      	; 0x896 <puts+0x4c>
 892:	c8 01       	movw	r24, r16
 894:	02 c0       	rjmp	.+4      	; 0x89a <puts+0x50>
 896:	8f ef       	ldi	r24, 0xFF	; 255
 898:	9f ef       	ldi	r25, 0xFF	; 255
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	08 95       	ret

000008a4 <calloc>:
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	86 9f       	mul	r24, r22
 8ae:	80 01       	movw	r16, r0
 8b0:	87 9f       	mul	r24, r23
 8b2:	10 0d       	add	r17, r0
 8b4:	96 9f       	mul	r25, r22
 8b6:	10 0d       	add	r17, r0
 8b8:	11 24       	eor	r1, r1
 8ba:	c8 01       	movw	r24, r16
 8bc:	0e 94 b3 02 	call	0x566	; 0x566 <malloc>
 8c0:	ec 01       	movw	r28, r24
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	29 f0       	breq	.+10     	; 0x8d0 <calloc+0x2c>
 8c6:	a8 01       	movw	r20, r16
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <memset>
 8d0:	ce 01       	movw	r24, r28
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	08 95       	ret

000008dc <memset>:
 8dc:	dc 01       	movw	r26, r24
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <memset+0x6>
 8e0:	6d 93       	st	X+, r22
 8e2:	41 50       	subi	r20, 0x01	; 1
 8e4:	50 40       	sbci	r21, 0x00	; 0
 8e6:	e0 f7       	brcc	.-8      	; 0x8e0 <memset+0x4>
 8e8:	08 95       	ret

000008ea <_exit>:
 8ea:	f8 94       	cli

000008ec <__stop_program>:
 8ec:	ff cf       	rjmp	.-2      	; 0x8ec <__stop_program>
